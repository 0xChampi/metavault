{
  "address": "0x406B1732B8777b5CC0E4D878822cb470CB5F677D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Earn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "InsuranceClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy2",
          "type": "address"
        }
      ],
      "name": "StrategiesReordered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "converter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "getCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalInvestEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedYAXIS",
          "type": "uint256"
        }
      ],
      "name": "harvestStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseStrategyGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy2",
          "type": "address"
        }
      ],
      "name": "reorderStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_convert",
          "type": "address"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_converter",
          "type": "address"
        }
      ],
      "name": "setConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_investEnabled",
          "type": "bool"
        }
      ],
      "name": "setInvestEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxStrategies",
          "type": "uint256"
        }
      ],
      "name": "setMaxStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_convert",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21e14953773b5a7e3f34bdf7d152a8fd245121324fec1b9a48df7f771e7eb9f4",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x406B1732B8777b5CC0E4D878822cb470CB5F677D",
    "transactionIndex": 1,
    "gasUsed": "3572870",
    "logsBloom": "0x
    "blockHash": "0x77708a3f59021bca9dd111610692e2014a09aa9ffa24442189ea1287213db84a",
    "transactionHash": "0x21e14953773b5a7e3f34bdf7d152a8fd245121324fec1b9a48df7f771e7eb9f4",
    "logs": [],
    "blockNumber": 26168524,
    "cumulativeGasUsed": "3667959",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD18Fe933E6D03D707Cd5e755cBdC1251e8437095"
  ],
  "solcInputHash": "f68ee801279c5730ebe336840450dfbc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"InsuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy2\",\"type\":\"address\"}],\"name\":\"StrategiesReordered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalInvestEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedYAXIS\",\"type\":\"uint256\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseStrategyGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy2\",\"type\":\"address\"}],\"name\":\"reorderStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_convert\",\"type\":\"address\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investEnabled\",\"type\":\"bool\"}],\"name\":\"setInvestEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStrategies\",\"type\":\"uint256\"}],\"name\":\"setMaxStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convert\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStrategy(address,address,uint256,uint256)\":{\"params\":{\"_cap\":\"The cap of the strategy\",\"_strategy\":\"The address of the strategy\",\"_timeout\":\"The timeout between harvests\",\"_vault\":\"The address of the vault\"}},\"balanceOf()\":{\"details\":\"This function is optimized to prevent looping over all strategy balances, and instead the controller tracks the earn, withdraw, and harvest amounts.\"},\"constructor\":{\"params\":{\"_manager\":\"The address of the manager\"}},\"earn(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount that will be invested\",\"_strategy\":\"The address of the strategy\",\"_token\":\"The address of the token\"}},\"getCap(address,address)\":{\"params\":{\"_strategy\":\"The address of the strategy\",\"_vault\":\"The address of the vault\"}},\"harvestStrategy(address,uint256,uint256)\":{\"params\":{\"_strategy\":\"The address of the strategy\"}},\"inCaseStrategyGetStuck(address,address)\":{\"params\":{\"_strategy\":\"The address of the strategy\",\"_token\":\"The address of the token\"}},\"inCaseTokensGetStuck(address,uint256)\":{\"params\":{\"_amount\":\"The amount that will be withdrawn\",\"_token\":\"The address of the token\"}},\"investEnabled()\":{\"details\":\"Should be called by the vault\"},\"removeStrategy(address,address,uint256)\":{\"params\":{\"_strategy\":\"The address of the strategy\",\"_timeout\":\"The timeout between harvests\",\"_vault\":\"The address of the vault\"}},\"reorderStrategies(address,address,address)\":{\"params\":{\"_strategy1\":\"The address of the first strategy\",\"_strategy2\":\"The address of the second strategy\",\"_vault\":\"The address of the vault\"}},\"setCap(address,address,uint256,address)\":{\"details\":\"If the balance of the strategy is greater than the new cap (except if the cap is 0), then withdraw the difference from the strategy to the vault.\",\"params\":{\"_cap\":\"The new cap of the strategy\",\"_strategy\":\"The address of the strategy\",\"_vault\":\"The address of the vault\"}},\"setConverter(address,address)\":{\"params\":{\"_converter\":\"The address of the converter\",\"_vault\":\"The address of the vault\"}},\"setInvestEnabled(bool)\":{\"params\":{\"_investEnabled\":\"The new bool of the invest enabled flag\"}},\"setMaxStrategies(uint256)\":{\"params\":{\"_maxStrategies\":\"The new value of the maximum strategies\"}},\"strategies(address)\":{\"params\":{\"_vault\":\"The address of the vault\"}},\"withdraw(address,uint256)\":{\"details\":\"If the withdraw amount is greater than the first strategy given by getBestStrategyWithdraw, this function will loop over strategies until the requested amount is met.\",\"params\":{\"_amount\":\"The amount that will be withdrawn\",\"_token\":\"The address of the token\"}},\"withdrawAll(address,address)\":{\"params\":{\"_convert\":\"The token address to convert to\",\"_strategy\":\"The address of the strategy\"}}},\"title\":\"Controller\",\"version\":1},\"userdoc\":{\"events\":{\"Earn(address,address)\":{\"notice\":\"Logged when earn is called for a strategy\"},\"Harvest(address)\":{\"notice\":\"Logged when harvest is called for a strategy\"},\"InsuranceClaimed(address)\":{\"notice\":\"Logged when insurance is claimed for a vault\"},\"StrategiesReordered(address,address,address)\":{\"notice\":\"Logged when strategies are reordered for a vault\"},\"StrategyAdded(address,address,uint256)\":{\"notice\":\"Logged when a strategy is added for a vault\"},\"StrategyRemoved(address,address)\":{\"notice\":\"Logged when a strategy is removed for a vault\"}},\"kind\":\"user\",\"methods\":{\"addStrategy(address,address,uint256,uint256)\":{\"notice\":\"Adds a strategy for a given vault\"},\"balanceOf()\":{\"notice\":\"Returns the rough balance of the sum of all strategies for a given vault\"},\"earn(address,address,uint256)\":{\"notice\":\"Invests funds into a strategy\"},\"getCap(address,address)\":{\"notice\":\"Returns the cap of a strategy for a given vault\"},\"harvestStrategy(address,uint256,uint256)\":{\"notice\":\"Harvests the specified strategy\"},\"inCaseStrategyGetStuck(address,address)\":{\"notice\":\"Withdraws token from a strategy to the treasury address as returned by the manager\"},\"inCaseTokensGetStuck(address,uint256)\":{\"notice\":\"Withdraws token from the controller to the treasury\"},\"investEnabled()\":{\"notice\":\"Returns whether investing is enabled for the calling vault\"},\"removeStrategy(address,address,uint256)\":{\"notice\":\"Removes a strategy for a given token\"},\"reorderStrategies(address,address,address)\":{\"notice\":\"Reorders two strategies for a given vault\"},\"setCap(address,address,uint256,address)\":{\"notice\":\"Sets/updates the cap of a strategy for a vault\"},\"setConverter(address,address)\":{\"notice\":\"Sets/updates the converter for a given vault\"},\"setInvestEnabled(bool)\":{\"notice\":\"Sets/updates the global invest enabled flag\"},\"setMaxStrategies(uint256)\":{\"notice\":\"Sets/updates the maximum number of strategies for a vault\"},\"strategies(address)\":{\"notice\":\"Returns all the strategies for a given vault\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws funds from a strategy\"},\"withdrawAll(address,address)\":{\"notice\":\"Withdraws all funds from a strategy\"}},\"notice\":\"This controller allows multiple strategies to be used for a single vault supporting multiple tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/controllers/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/v3/controllers/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IConverter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IHarvester.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\n\\n/**\\n * @title Controller\\n * @notice This controller allows multiple strategies to be used\\n * for a single vault supporting multiple tokens.\\n */\\ncontract Controller is IController {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IManager public immutable override manager;\\n\\n    bool public globalInvestEnabled;\\n    uint256 public maxStrategies;\\n\\n    struct VaultDetail {\\n        address converter;\\n        uint256 balance;\\n        address[] strategies;\\n        mapping(address => uint256) balances;\\n        mapping(address => uint256) index;\\n        mapping(address => uint256) caps;\\n    }\\n\\n    // vault => Vault\\n    mapping(address => VaultDetail) internal _vaultDetails;\\n    // strategy => vault\\n    mapping(address => address) internal _vaultStrategies;\\n\\n    /**\\n     * @notice Logged when earn is called for a strategy\\n     */\\n    event Earn(address indexed token, address indexed strategy);\\n\\n    /**\\n     * @notice Logged when harvest is called for a strategy\\n     */\\n    event Harvest(address indexed strategy);\\n\\n    /**\\n     * @notice Logged when insurance is claimed for a vault\\n     */\\n    event InsuranceClaimed(address indexed vault);\\n\\n    /**\\n     * @notice Logged when a strategy is added for a vault\\n     */\\n    event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);\\n\\n    /**\\n     * @notice Logged when a strategy is removed for a vault\\n     */\\n    event StrategyRemoved(address indexed vault, address indexed strategy);\\n\\n    /**\\n     * @notice Logged when strategies are reordered for a vault\\n     */\\n    event StrategiesReordered(\\n        address indexed vault,\\n        address indexed strategy1,\\n        address indexed strategy2\\n    );\\n\\n    /**\\n     * @param _manager The address of the manager\\n     */\\n    constructor(\\n        address _manager\\n    )\\n        public\\n    {\\n        manager = IManager(_manager);\\n        globalInvestEnabled = true;\\n        maxStrategies = 10;\\n    }\\n\\n    /**\\n     * STRATEGIST-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Adds a strategy for a given vault\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _cap The cap of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function addStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint256 _cap,\\n        uint256 _timeout\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        require(_vaultDetails[_vault].converter != address(0), \\\"!converter\\\");\\n        // get the index of the newly added strategy\\n        uint256 index = _vaultDetails[_vault].strategies.length;\\n        // ensure we haven't added too many strategies already\\n        require(index < maxStrategies, \\\"!maxStrategies\\\");\\n        // push the strategy to the array of strategies\\n        _vaultDetails[_vault].strategies.push(_strategy);\\n        // set the cap\\n        _vaultDetails[_vault].caps[_strategy] = _cap;\\n        // set the index\\n        _vaultDetails[_vault].index[_strategy] = index;\\n        // store the mapping of strategy to the vault\\n        _vaultStrategies[_strategy] = _vault;\\n        if (_timeout > 0) {\\n            // add it to the harvester\\n            IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);\\n        }\\n        emit StrategyAdded(_vault, _strategy, _cap);\\n    }\\n\\n    /**\\n     * @notice Withdraws token from a strategy to the treasury address as returned by the manager\\n     * @param _strategy The address of the strategy\\n     * @param _token The address of the token\\n     */\\n    function inCaseStrategyGetStuck(\\n        address _strategy,\\n        address _token\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        IStrategy(_strategy).withdraw(_token);\\n        IERC20(_token).safeTransfer(\\n            manager.treasury(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws token from the controller to the treasury\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        IERC20(_token).safeTransfer(manager.treasury(), _amount);\\n    }\\n\\n    /**\\n     * @notice Removes a strategy for a given token\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function removeStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint256 _timeout\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        VaultDetail storage vaultDetail = _vaultDetails[_vault];\\n        // get the index of the strategy to remove\\n        uint256 index = vaultDetail.index[_strategy];\\n        // get the index of the last strategy\\n        uint256 tail = vaultDetail.strategies.length.sub(1);\\n        // get the address of the last strategy\\n        address replace = vaultDetail.strategies[tail];\\n        // replace the removed strategy with the tail\\n        vaultDetail.strategies[index] = replace;\\n        // set the new index for the replaced strategy\\n        vaultDetail.index[replace] = index;\\n        // remove the duplicate replaced strategy\\n        vaultDetail.strategies.pop();\\n        // remove the strategy's index\\n        delete vaultDetail.index[_strategy];\\n        // remove the strategy's cap\\n        delete vaultDetail.caps[_strategy];\\n        // remove the strategy's balance\\n        delete vaultDetail.balances[_strategy];\\n        // remove the mapping of strategy to the vault\\n        delete _vaultStrategies[_strategy];\\n        // pull funds from the removed strategy to the vault\\n        IStrategy(_strategy).withdrawAll();\\n        // remove the strategy from the harvester\\n        IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);\\n        emit StrategyRemoved(_vault, _strategy);\\n    }\\n\\n    /**\\n     * @notice Reorders two strategies for a given vault\\n     * @param _vault The address of the vault\\n     * @param _strategy1 The address of the first strategy\\n     * @param _strategy2 The address of the second strategy\\n     */\\n    function reorderStrategies(\\n        address _vault,\\n        address _strategy1,\\n        address _strategy2\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        require(manager.allowedVaults(_vault), \\\"!_vault\\\");\\n        require(manager.allowedStrategies(_strategy1), \\\"!_strategy1\\\");\\n        require(manager.allowedStrategies(_strategy2), \\\"!_strategy2\\\");\\n        VaultDetail storage vaultDetail = _vaultDetails[_vault];\\n        // get the indexes of the strategies\\n        uint256 index1 = vaultDetail.index[_strategy1];\\n        uint256 index2 = vaultDetail.index[_strategy2];\\n        // set the new addresses at their indexes\\n        vaultDetail.strategies[index1] = _strategy2;\\n        vaultDetail.strategies[index2] = _strategy1;\\n        // update indexes\\n        vaultDetail.index[_strategy1] = index2;\\n        vaultDetail.index[_strategy2] = index1;\\n        emit StrategiesReordered(_vault, _strategy1, _strategy2);\\n    }\\n\\n    /**\\n     * @notice Sets/updates the cap of a strategy for a vault\\n     * @dev If the balance of the strategy is greater than the new cap (except if\\n     * the cap is 0), then withdraw the difference from the strategy to the vault.\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _cap The new cap of the strategy\\n     */\\n    function setCap(\\n        address _vault,\\n        address _strategy,\\n        uint256 _cap,\\n        address _convert\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        _vaultDetails[_vault].caps[_strategy] = _cap;\\n        uint256 _balance = IStrategy(_strategy).balanceOf();\\n        // send excess funds (over cap) back to the vault\\n        if (_balance > _cap && _cap != 0) {\\n            uint256 _diff = _balance.sub(_cap);\\n            IStrategy(_strategy).withdraw(_diff);\\n            updateBalance(_vault, _strategy);\\n            _balance = IStrategy(_strategy).balanceOf();\\n            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_balance);\\n            address _want = IStrategy(_strategy).want();\\n            _balance = IERC20(_want).balanceOf(address(this));\\n            if (_convert != address(0)) {\\n                IConverter _converter = IConverter(_vaultDetails[_vault].converter);\\n                IERC20(_want).safeTransfer(address(_converter), _balance);\\n                _balance = _converter.convert(_want, _convert, _balance, 1);\\n                IERC20(_convert).safeTransfer(_vault, _balance);\\n            } else {\\n                IERC20(_want).safeTransfer(_vault, _balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets/updates the converter for a given vault\\n     * @param _vault The address of the vault\\n     * @param _converter The address of the converter\\n     */\\n    function setConverter(\\n        address _vault,\\n        address _converter\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        require(manager.allowedConverters(_converter), \\\"!allowedConverters\\\");\\n        _vaultDetails[_vault].converter = _converter;\\n    }\\n\\n    /**\\n     * @notice Sets/updates the global invest enabled flag\\n     * @param _investEnabled The new bool of the invest enabled flag\\n     */\\n    function setInvestEnabled(\\n        bool _investEnabled\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        globalInvestEnabled = _investEnabled;\\n    }\\n\\n    /**\\n     * @notice Sets/updates the maximum number of strategies for a vault\\n     * @param _maxStrategies The new value of the maximum strategies\\n     */\\n    function setMaxStrategies(\\n        uint256 _maxStrategies\\n    )\\n        external\\n        notHalted\\n        onlyStrategist\\n    {\\n        maxStrategies = _maxStrategies;\\n    }\\n\\n    function skim(\\n        address _strategy\\n    )\\n        external\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        address _want = IStrategy(_strategy).want();\\n        IStrategy(_strategy).skim();\\n        IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from a strategy\\n     * @param _strategy The address of the strategy\\n     * @param _convert The token address to convert to\\n     */\\n    function withdrawAll(\\n        address _strategy,\\n        address _convert\\n    )\\n        external\\n        override\\n        onlyStrategist\\n        onlyStrategy(_strategy)\\n    {\\n        address _want = IStrategy(_strategy).want();\\n        IStrategy(_strategy).withdrawAll();\\n        uint256 _amount = IERC20(_want).balanceOf(address(this));\\n        address _vault = _vaultStrategies[_strategy];\\n        updateBalance(_vault, _strategy);\\n        if (_convert != address(0)) {\\n            IConverter _converter = IConverter(_vaultDetails[_vault].converter);\\n            IERC20(_want).safeTransfer(address(_converter), _amount);\\n            _amount = _converter.convert(_want, _convert, _amount, 1);\\n            IERC20(_convert).safeTransfer(_vault, _amount);\\n        } else {\\n            IERC20(_want).safeTransfer(_vault, _amount);\\n        }\\n        uint256 _balance = _vaultDetails[_vault].balance;\\n        if (_balance >= _amount) {\\n            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_amount);\\n        } else {\\n            _vaultDetails[_vault].balance = 0;\\n        }\\n    }\\n\\n    /**\\n     * HARVESTER-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Harvests the specified strategy\\n     * @param _strategy The address of the strategy\\n     */\\n    function harvestStrategy(\\n        address _strategy,\\n        uint256 _estimatedWETH,\\n        uint256 _estimatedYAXIS\\n    )\\n        external\\n        override\\n        onlyHarvester\\n        onlyStrategy(_strategy)\\n    {\\n        uint256 _before = IStrategy(_strategy).balanceOf();\\n        IStrategy(_strategy).harvest(_estimatedWETH, _estimatedYAXIS);\\n        uint256 _after = IStrategy(_strategy).balanceOf();\\n        address _vault = _vaultStrategies[_strategy];\\n        _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));\\n        _vaultDetails[_vault].balances[_strategy] = _after;\\n        emit Harvest(_strategy);\\n    }\\n\\n    /**\\n     * VAULT-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Invests funds into a strategy\\n     * @param _strategy The address of the strategy\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be invested\\n     */\\n    function earn(\\n        address _strategy,\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyStrategy(_strategy)\\n        onlyVault(_token)\\n    {\\n        // get the want token of the strategy\\n        address _want = IStrategy(_strategy).want();\\n        if (_want != _token) {\\n            IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);\\n            IERC20(_token).safeTransfer(address(_converter), _amount);\\n            // TODO: do estimation for received\\n            _amount = _converter.convert(_token, _want, _amount, 1);\\n            IERC20(_want).safeTransfer(_strategy, _amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_strategy, _amount);\\n        }\\n        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);\\n        // call the strategy deposit function\\n        IStrategy(_strategy).deposit();\\n        updateBalance(msg.sender, _strategy);\\n        emit Earn(_token, _strategy);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds from a strategy\\n     * @dev If the withdraw amount is greater than the first strategy given\\n     * by getBestStrategyWithdraw, this function will loop over strategies\\n     * until the requested amount is met.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyVault(_token)\\n    {\\n        (\\n            address[] memory _strategies,\\n            uint256[] memory _amounts\\n        ) = getBestStrategyWithdraw(_token, _amount);\\n        for (uint i = 0; i < _strategies.length; i++) {\\n            // getBestStrategyWithdraw will return arrays larger than needed\\n            // if this happens, simply exit the loop\\n            if (_strategies[i] == address(0)) {\\n                break;\\n            }\\n            IStrategy(_strategies[i]).withdraw(_amounts[i]);\\n            updateBalance(msg.sender, _strategies[i]);\\n            address _want = IStrategy(_strategies[i]).want();\\n            if (_want != _token) {\\n                address _converter = _vaultDetails[msg.sender].converter;\\n                IERC20(_want).safeTransfer(_converter, _amounts[i]);\\n                // TODO: do estimation for received\\n                IConverter(_converter).convert(_want, _token, _amounts[i], 1);\\n            }\\n        }\\n        _amount = IERC20(_token).balanceOf(address(this));\\n        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the rough balance of the sum of all strategies for a given vault\\n     * @dev This function is optimized to prevent looping over all strategy balances,\\n     * and instead the controller tracks the earn, withdraw, and harvest amounts.\\n     */\\n    function balanceOf()\\n        external\\n        view\\n        override\\n        returns (uint256 _balance)\\n    {\\n        return _vaultDetails[msg.sender].balance;\\n    }\\n\\n    function converter(\\n        address _vault\\n    )\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _vaultDetails[_vault].converter;\\n    }\\n\\n    /**\\n     * @notice Returns the cap of a strategy for a given vault\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     */\\n    function getCap(\\n        address _vault,\\n        address _strategy\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _vaultDetails[_vault].caps[_strategy];\\n    }\\n\\n    /**\\n     * @notice Returns whether investing is enabled for the calling vault\\n     * @dev Should be called by the vault\\n     */\\n    function investEnabled()\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (globalInvestEnabled) {\\n            return _vaultDetails[msg.sender].strategies.length > 0;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns all the strategies for a given vault\\n     * @param _vault The address of the vault\\n     */\\n    function strategies(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _vaultDetails[_vault].strategies;\\n    }\\n\\n    function strategies()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _vaultDetails[msg.sender].strategies.length;\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the best (optimistic) strategy for funds to be withdrawn from\\n     * @dev Since Solidity doesn't support dynamic arrays in memory, the returned arrays\\n     * from this function will always be the same length as the amount of strategies for\\n     * a token. Check that _strategies[i] != address(0) when consuming to know when to\\n     * break out of the loop.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function getBestStrategyWithdraw(\\n        address _token,\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (\\n            address[] memory _strategies,\\n            uint256[] memory _amounts\\n        )\\n    {\\n        // get the length of strategies for a single token\\n        address _vault = manager.vaults(_token);\\n        uint256 k = _vaultDetails[_vault].strategies.length;\\n        // initialize fixed-length memory arrays\\n        _strategies = new address[](k);\\n        _amounts = new uint256[](k);\\n        address _strategy;\\n        uint256 _balance;\\n        // scan forward from the the beginning of strategies\\n        for (uint i = 0; i < k; i++) {\\n            _strategy = _vaultDetails[_vault].strategies[i];\\n            _strategies[i] = _strategy;\\n            // get the balance of the strategy\\n            _balance = _vaultDetails[_vault].balances[_strategy];\\n            // if the strategy doesn't have the balance to cover the withdraw\\n            if (_balance < _amount) {\\n                // withdraw what we can and add to the _amounts\\n                _amounts[i] = _balance;\\n                _amount = _amount.sub(_balance);\\n            } else {\\n                // stop scanning if the balance is more than the withdraw amount\\n                _amounts[i] = _amount;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function updateBalance(\\n        address _vault,\\n        address _strategy\\n    )\\n        internal\\n    {\\n        _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier notHalted() {\\n        require(!manager.halted(), \\\"halted\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy(address _strategy) {\\n        require(manager.allowedStrategies(_strategy), \\\"!allowedStrategy\\\");\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        require(msg.sender == manager.harvester(), \\\"!harvester\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault(address _token) {\\n        require(msg.sender == manager.vaults(_token), \\\"!vault\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x88713f82cc6c312fb89bf2f472a148847b3c30caaad46ba3ede45cf503a37569\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256 _estimatedWETH, uint256 _estimatedYAXIS) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\",\"keccak256\":\"0x7cf6dd59e7aa05895b7682bf59c96918b9d5baf529d839472b475f9119ba50c9\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IConverter {\\n    function manager() external view returns (IManager);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount,\\n        uint256 _estimatedOutput\\n    ) external returns (uint256 _outputAmount);\\n    function expected(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external view returns (uint256 _outputAmount);\\n}\\n\",\"keccak256\":\"0x6969eecc0d8f1497daf53f2641089dc3d36d7a057b959815b1b565e5b88b8d55\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n}\\n\\n\",\"keccak256\":\"0xda73240c2564d88d7f73128408a85fbcb9aecbe9dd6aa0c2849f881524ef5fa0\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addToken(address, address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedTokens(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getTokens(address) external view returns (address[] memory);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeToken(address, address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function tokens(address, uint256) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (address);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x278428801b8a42fabc2ca66d14e1243163690478c913a0419cfd21df1a384be2\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256, uint256) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\",\"keccak256\":\"0xee1ec3c127871c78aaf474a049f942f4cb4dfbd2a51a0687d05d9b8c0da329cf\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x054e1fbb6e5fc879fcd57c1fe554fe9838dbae742d35df59541c200e50fc6b59\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IVault {\\n    function available(address _token) external view returns (uint256);\\n    function balance() external view returns (uint256);\\n    function deposit(address _token, uint256 _amount) external;\\n    function depositMultiple(address[] calldata _tokens, uint256[] calldata _amount) external;\\n    function earn(address _token, address _strategy) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n    function getTokens() external view returns (address[] memory);\\n    function manager() external view returns (IManager);\\n    function withdraw(uint256 _amount, address _output) external;\\n    function withdrawAll(address _output) external;\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x079d77a4cabf19780966013faa54a48e44685b208481e38cdd7d66b5683d4c3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516140353803806140358339818101604052602081101561003357600080fd5b50516001600160601b031960609190911b166080526000805460ff19166001908117909155600a905560805160601c613f0861012d6000398061052452806105f452806109f85280610ad65280610e6a5280610e8e5280610f4e528061102252806110e2528061132852806114c352806115835280611653528061186052806119ab5280611a6b5280611b3a5280611c0e5280611ce65280611ec45280611f845280612066528061212652806121f6528061268852806127c152806128cd528061299c5280612c655280612d255280612df45280612f015280612fd152806131d652806132a8528061335c528061391a5250613f086000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806376e2008d116100c3578063b23fa5621161007c578063b23fa56214610466578063bc25cf7714610494578063c6d758cb146104ba578063c79c21b7146104e6578063d9f9027f146104ee578063f3fef3a3146104f65761014d565b806376e2008d146103375780638c12f286146103735780638fc1ea1e146103ab57806392530a55146103ca57806395c2204614610406578063a8671c31146104345761014d565b8063481c6a7511610115578063481c6a751461028a5780634ff173d7146102ae5780636bb3722e146102cb5780636e0b4f901461030157806371f4f3fb14610327578063722713f71461032f5761014d565b806309cae2c814610152578063123e63d31461018257806319c494501461019e57806338e88610146101de57806339ebf82314610214575b600080fd5b6101806004803603604081101561016857600080fd5b506001600160a01b0381358116916020013516610522565b005b61018a6109bd565b604080519115158252519081900360200190f35b6101cc600480360360408110156101b457600080fd5b506001600160a01b03813581169160200135166109c6565b60408051918252519081900360200190f35b610180600480360360608110156101f457600080fd5b506001600160a01b038135811691602081013590911690604001356109f5565b61023a6004803603602081101561022a57600080fd5b50356001600160a01b0316610def565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561027657818101518382015260200161025e565b505050509050019250505060405180910390f35b610292610e68565b604080516001600160a01b039092168252519081900360200190f35b610180600480360360208110156102c457600080fd5b5035610e8c565b610180600480360360608110156102e157600080fd5b506001600160a01b03813581169160208101359091169060400135611020565b6102926004803603602081101561031757600080fd5b50356001600160a01b031661145e565b61018a61147c565b6101cc6114ab565b6101806004803603608081101561034d57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356114c1565b6101806004803603606081101561038957600080fd5b506001600160a01b0381358116916020810135821691604090910135166119a9565b610180600480360360208110156103c157600080fd5b50351515611ec2565b610180600480360360808110156103e057600080fd5b506001600160a01b03813581169160208101358216916040820135916060013516612064565b6101806004803603604081101561041c57600080fd5b506001600160a01b0381358116916020013516612686565b6101806004803603606081101561044a57600080fd5b506001600160a01b0381351690602081013590604001356128cb565b6101806004803603604081101561047c57600080fd5b506001600160a01b0381358116916020013516612c63565b610180600480360360208110156104aa57600080fd5b50356001600160a01b0316612eff565b610180600480360360408110156104d057600080fd5b506001600160a01b0381351690602001356131d4565b6101cc61333c565b6101cc613342565b6101806004803603604081101561050c57600080fd5b506001600160a01b038135169060200135613359565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d60208110156105a557600080fd5b50516001600160a01b031633146105f1576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d602081101561068957600080fd5b50516106cf576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6000836001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d602081101561073457600080fd5b50516040805163429c145b60e11b815290519192506001600160a01b0386169163853828b69160048082019260009290919082900301818387803b15801561077b57600080fd5b505af115801561078f573d6000803e3d6000fd5b505050506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d602081101561080c57600080fd5b50516001600160a01b03808716600090815260036020526040902054919250166108368187613789565b6001600160a01b03851615610919576001600160a01b0380821660009081526002602052604090205481169061086f908516828561381e565b604080516375892cf160e01b81526001600160a01b038681166004830152888116602483015260448201869052600160648301529151918316916375892cf1916084808201926020929091908290030181600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b505192506109136001600160a01b038716838561381e565b5061092d565b61092d6001600160a01b038416828461381e565b6001600160a01b038116600090815260026020526040902060010154828110610997576001600160a01b0382166000908152600260205260409020600101546109769084613870565b6001600160a01b0383166000908152600260205260409020600101556109b4565b6001600160a01b0382166000908152600260205260408120600101555b50505050505050565b60005460ff1681565b6001600160a01b0391821660009081526002602090815260408083209390941682526005909201909152205490565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d6020811015610a8d57600080fd5b5051610ad3576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b50516001600160a01b03163314610bb2576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6000856001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d6020811015610c1757600080fd5b505190506001600160a01b0380821690861614610d0157336000908152600260205260409020546001600160a01b0390811690610c57908716828761381e565b604080516375892cf160e01b81526001600160a01b038881166004830152848116602483015260448201889052600160648301529151918316916375892cf1916084808201926020929091908290030181600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050506040513d6020811015610ce357600080fd5b50519450610cfb6001600160a01b038316888761381e565b50610d15565b610d156001600160a01b038616878661381e565b33600090815260026020526040902060010154610d3290856138b9565b33600090815260026020526040808220600101929092558151630d0e30db60e41b815291516001600160a01b0389169263d0e30db092600480830193919282900301818387803b158015610d8557600080fd5b505af1158015610d99573d6000803e3d6000fd5b50505050610da73387613789565b856001600160a01b0316856001600160a01b03167f4a3db5ade61000fa57b36b688adc110f1b90af911256996dc89a52dcacd67ecd60405160405180910390a3505050505050565b6001600160a01b038116600090815260026020818152604092839020909101805483518184028101840190945280845260609392830182828015610e5c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e3e575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee557600080fd5b505afa158015610ef9573d6000803e3d6000fd5b505050506040513d6020811015610f0f57600080fd5b505115610f4c576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d6020811015610fcf57600080fd5b50516001600160a01b0316331461101b576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b600155565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107957600080fd5b505afa15801561108d573d6000803e3d6000fd5b505050506040513d60208110156110a357600080fd5b5051156110e0576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561113957600080fd5b505afa15801561114d573d6000803e3d6000fd5b505050506040513d602081101561116357600080fd5b50516001600160a01b031633146111af576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038084166000908152600260208181526040808420948716845260048501909152822054908301549091906111ec906001613870565b905060008360020182815481106111ff57fe5b6000918252602090912001546002850180546001600160a01b03909216925082918590811061122a57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260048601909152604090208390556002840180548061127257fe5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03891680825260048089018552604080842084905560058a0186528084208490556003808b0187528185208590559095528483208054909416909355835163429c145b60e11b81529351909363853828b69381810193929182900301818387803b15801561130e57600080fd5b505af1158015611322573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d60208110156113a957600080fd5b5051604080516335d9b91760e11b81526001600160a01b038a8116600483015289811660248301526044820189905291519190921691636bb3722e91606480830192600092919082900301818387803b15801561140557600080fd5b505af1158015611419573d6000803e3d6000fd5b50506040516001600160a01b03808a1693508a1691507f64a0e13af5f4bc5a68b1b79d9ff6e775f93e814ee8b0c97d620520190d04bae290600090a350505050505050565b6001600160a01b039081166000908152600260205260409020541690565b6000805460ff16156114a45750336000908152600260208190526040909120015415156114a8565b5060005b90565b3360009081526002602052604090206001015490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d602081101561154457600080fd5b505115611581576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d602081101561160457600080fd5b50516001600160a01b03163314611650576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116be57600080fd5b505afa1580156116d2573d6000803e3d6000fd5b505050506040513d60208110156116e857600080fd5b505161172e576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6001600160a01b0385811660009081526002602052604090205416611787576040805162461bcd60e51b815260206004820152600a60248201526910b1b7b73b32b93a32b960b11b604482015290519081900360640190fd5b6001600160a01b0385166000908152600260208190526040909120015460015481106117eb576040805162461bcd60e51b815260206004820152600e60248201526d216d61785374726174656769657360901b604482015290519081900360640190fd5b6001600160a01b0386811660008181526002602081815260408084209283018054600181018255908552828520018054968c166001600160a01b0319978816811790915584526005830182528084208a90556004909201815281832086905560039052902080549092161790558215611956577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d60208110156118e157600080fd5b505160408051634b704acd60e01b81526001600160a01b03898116600483015288811660248301526044820187905291519190921691634b704acd91606480830192600092919082900301818387803b15801561193d57600080fd5b505af1158015611951573d6000803e3d6000fd5b505050505b846001600160a01b0316866001600160a01b03167fc2008aa15e9b0989ec7ae02bc3d8054428c527c989269ffb2a5bff829028a012866040518082815260200191505060405180910390a3505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0257600080fd5b505afa158015611a16573d6000803e3d6000fd5b505050506040513d6020811015611a2c57600080fd5b505115611a69576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac257600080fd5b505afa158015611ad6573d6000803e3d6000fd5b505050506040513d6020811015611aec57600080fd5b50516001600160a01b03163314611b38576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8d76bce846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ba557600080fd5b505afa158015611bb9573d6000803e3d6000fd5b505050506040513d6020811015611bcf57600080fd5b5051611c0c576040805162461bcd60e51b81526020600482015260076024820152660857dd985d5b1d60ca1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c7957600080fd5b505afa158015611c8d573d6000803e3d6000fd5b505050506040513d6020811015611ca357600080fd5b5051611ce4576040805162461bcd60e51b815260206004820152600b60248201526a215f73747261746567793160a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d5157600080fd5b505afa158015611d65573d6000803e3d6000fd5b505050506040513d6020811015611d7b57600080fd5b5051611dbc576040805162461bcd60e51b815260206004820152600b60248201526a10afb9ba3930ba32b3bc9960a91b604482015290519081900360640190fd5b6001600160a01b03808416600090815260026020818152604080842087861685526004810190925280842054948616845290922054908201805492939285919084908110611e0657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084836002018281548110611e4457fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055878316808352600487019091526040808320859055878416808452818420879055905190939192918a16917ffea1ac549b0e10ecbe67c9d07de370cb3976ed51ef1fd559cf7472021417467891a4505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d6020811015611f4557600080fd5b505115611f82576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611fdb57600080fd5b505afa158015611fef573d6000803e3d6000fd5b505050506040513d602081101561200557600080fd5b50516001600160a01b03163314612051576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120bd57600080fd5b505afa1580156120d1573d6000803e3d6000fd5b505050506040513d60208110156120e757600080fd5b505115612124576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561217d57600080fd5b505afa158015612191573d6000803e3d6000fd5b505050506040513d60208110156121a757600080fd5b50516001600160a01b031633146121f3576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561226157600080fd5b505afa158015612275573d6000803e3d6000fd5b505050506040513d602081101561228b57600080fd5b50516122d1576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6001600160a01b03808616600090815260026020908152604080832093881680845260059094018252808320879055805163722713f760e01b8152905192939263722713f792600480840193919291829003018186803b15801561233457600080fd5b505afa158015612348573d6000803e3d6000fd5b505050506040513d602081101561235e57600080fd5b50519050838111801561237057508315155b1561267e5760006123818286613870565b9050856001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156123c957600080fd5b505af11580156123dd573d6000803e3d6000fd5b505050506123eb8787613789565b856001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561242457600080fd5b505afa158015612438573d6000803e3d6000fd5b505050506040513d602081101561244e57600080fd5b50516001600160a01b0388166000908152600260205260409020600101549092506124799083613870565b60026000896001600160a01b03166001600160a01b03168152602001908152602001600020600101819055506000866001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b1580156124e057600080fd5b505afa1580156124f4573d6000803e3d6000fd5b505050506040513d602081101561250a57600080fd5b5051604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561255657600080fd5b505afa15801561256a573d6000803e3d6000fd5b505050506040513d602081101561258057600080fd5b505192506001600160a01b03851615612667576001600160a01b038089166000908152600260205260409020548116906125bd908316828661381e565b604080516375892cf160e01b81526001600160a01b038481166004830152888116602483015260448201879052600160648301529151918316916375892cf1916084808201926020929091908290030181600087803b15801561261f57600080fd5b505af1158015612633573d6000803e3d6000fd5b505050506040513d602081101561264957600080fd5b505193506126616001600160a01b0387168a8661381e565b5061267b565b61267b6001600160a01b038216898561381e565b50505b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156126df57600080fd5b505afa1580156126f3573d6000803e3d6000fd5b505050506040513d602081101561270957600080fd5b50516001600160a01b03163314612755576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b816001600160a01b03166351cff8d9826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b505050506128c77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d602081101561284257600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561288a57600080fd5b505afa15801561289e573d6000803e3d6000fd5b505050506040513d60208110156128b457600080fd5b50516001600160a01b038416919061381e565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561292457600080fd5b505afa158015612938573d6000803e3d6000fd5b505050506040513d602081101561294e57600080fd5b50516001600160a01b03163314612999576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d6020811015612a3157600080fd5b5051612a77576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6000846001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab257600080fd5b505afa158015612ac6573d6000803e3d6000fd5b505050506040513d6020811015612adc57600080fd5b50516040805163e4a4b7b160e01b8152600481018790526024810186905290519192506001600160a01b0387169163e4a4b7b19160448082019260009290919082900301818387803b158015612b3157600080fd5b505af1158015612b45573d6000803e3d6000fd5b505050506000856001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8457600080fd5b505afa158015612b98573d6000803e3d6000fd5b505050506040513d6020811015612bae57600080fd5b50516001600160a01b0380881660009081526003602052604090205491925016612bfd612bdb8385613870565b6001600160a01b038316600090815260026020526040902060010154906138b9565b6001600160a01b0380831660009081526002602090815260408083206001810195909555928b168083526003909401905281812085905590517f188a622567eeca997c3d494fd65f76ca910b90a50a0c44d5e37b2ea5539e027b9190a250505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cbc57600080fd5b505afa158015612cd0573d6000803e3d6000fd5b505050506040513d6020811015612ce657600080fd5b505115612d23576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015612d7c57600080fd5b505afa158015612d90573d6000803e3d6000fd5b505050506040513d6020811015612da657600080fd5b50516001600160a01b03163314612df2576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166383649674826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b5051612ed1576040805162461bcd60e51b815260206004820152601260248201527121616c6c6f776564436f6e7665727465727360701b604482015290519081900360640190fd5b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5857600080fd5b505afa158015612f6c573d6000803e3d6000fd5b505050506040513d6020811015612f8257600080fd5b50516001600160a01b03163314612fce576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561303c57600080fd5b505afa158015613050573d6000803e3d6000fd5b505050506040513d602081101561306657600080fd5b50516130ac576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6000826001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b1580156130e757600080fd5b505afa1580156130fb573d6000803e3d6000fd5b505050506040513d602081101561311157600080fd5b505160408051630774672d60e21b815290519192506001600160a01b03851691631dd19cb49160048082019260009290919082900301818387803b15801561315857600080fd5b505af115801561316c573d6000803e3d6000fd5b5050506001600160a01b038085166000908152600360209081526040918290205482516370a0823160e01b815230600482015292516131cf9550908416938616926370a08231926024808301939192829003018186803b15801561288a57600080fd5b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561322d57600080fd5b505afa158015613241573d6000803e3d6000fd5b505050506040513d602081101561325757600080fd5b50516001600160a01b031633146132a3576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6128c77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ff57600080fd5b505afa158015613313573d6000803e3d6000fd5b505050506040513d602081101561332957600080fd5b50516001600160a01b038416908361381e565b60015481565b336000908152600260208190526040909120015490565b817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133c757600080fd5b505afa1580156133db573d6000803e3d6000fd5b505050506040513d60208110156133f157600080fd5b50516001600160a01b03163314613438576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6060806134458585613913565b9150915060005b82518110156136c45760006001600160a01b031683828151811061346c57fe5b60200260200101516001600160a01b03161415613488576136c4565b82818151811061349457fe5b60200260200101516001600160a01b0316632e1a7d4d8383815181106134b657fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156134f457600080fd5b505af1158015613508573d6000803e3d6000fd5b505050506135293384838151811061351c57fe5b6020026020010151613789565b600083828151811061353757fe5b60200260200101516001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561357757600080fd5b505afa15801561358b573d6000803e3d6000fd5b505050506040513d60208110156135a157600080fd5b505190506001600160a01b03808216908816146136bb573360009081526002602052604090205483516001600160a01b03909116906136099082908690869081106135e857fe5b6020026020010151846001600160a01b031661381e9092919063ffffffff16565b806001600160a01b03166375892cf1838a87878151811061362657fe5b602002602001015160016040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050602060405180830381600087803b15801561368d57600080fd5b505af11580156136a1573d6000803e3d6000fd5b505050506040513d60208110156136b757600080fd5b5050505b5060010161344c565b50604080516370a0823160e01b815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b15801561370b57600080fd5b505afa15801561371f573d6000803e3d6000fd5b505050506040513d602081101561373557600080fd5b5051336000908152600260205260409020600101549094506137579085613870565b33600081815260026020526040902060010191909155613782906001600160a01b038716908661381e565b5050505050565b806001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156137c257600080fd5b505afa1580156137d6573d6000803e3d6000fd5b505050506040513d60208110156137ec57600080fd5b50516001600160a01b039283166000908152600260209081526040808320949095168252600390930190925291902055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526131cf908490613b5b565b60006138b283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613c0c565b9392505050565b6000828201838110156138b2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60608060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561398557600080fd5b505afa158015613999573d6000803e3d6000fd5b505050506040513d60208110156139af57600080fd5b50516001600160a01b038116600090815260026020819052604090912001549091508067ffffffffffffffff811180156139e857600080fd5b50604051908082528060200260200182016040528015613a12578160200160208202803683370190505b5093508067ffffffffffffffff81118015613a2c57600080fd5b50604051908082528060200260200182016040528015613a56578160200160208202803683370190505b50925060008060005b83811015613b4f576001600160a01b038516600090815260026020819052604090912001805482908110613a8f57fe5b9060005260206000200160009054906101000a90046001600160a01b0316925082878281518110613abc57fe5b6001600160a01b039283166020918202929092018101919091528682166000908152600282526040808220938716825260039093019091522054915087821015613b295781868281518110613b0d57fe5b6020908102919091010152613b228883613870565b9750613b47565b87868281518110613b3657fe5b602002602001018181525050613b4f565b600101613a5f565b50505050509250929050565b6060613bb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ca39092919063ffffffff16565b8051909150156131cf57808060200190516020811015613bcf57600080fd5b50516131cf5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ea9602a913960400191505060405180910390fd5b60008184841115613c9b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613c60578181015183820152602001613c48565b50505050905090810190601f168015613c8d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060613cb28484600085613cba565b949350505050565b606082471015613cfb5760405162461bcd60e51b8152600401808060200182810382526026815260200180613e836026913960400191505060405180910390fd5b613d0485613e16565b613d55576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613d945780518252601f199092019160209182019101613d75565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613df6576040519150601f19603f3d011682016040523d82523d6000602084013e613dfb565b606091505b5091509150613e0b828286613e1c565b979650505050505050565b3b151590565b60608315613e2b5750816138b2565b825115613e3b5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315613c60578181015183820152602001613c4856fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122068b75ffcc99fbfd4d74bcbd0583a4ac580804edf30fdd02ff57d10e65142dccd64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806376e2008d116100c3578063b23fa5621161007c578063b23fa56214610466578063bc25cf7714610494578063c6d758cb146104ba578063c79c21b7146104e6578063d9f9027f146104ee578063f3fef3a3146104f65761014d565b806376e2008d146103375780638c12f286146103735780638fc1ea1e146103ab57806392530a55146103ca57806395c2204614610406578063a8671c31146104345761014d565b8063481c6a7511610115578063481c6a751461028a5780634ff173d7146102ae5780636bb3722e146102cb5780636e0b4f901461030157806371f4f3fb14610327578063722713f71461032f5761014d565b806309cae2c814610152578063123e63d31461018257806319c494501461019e57806338e88610146101de57806339ebf82314610214575b600080fd5b6101806004803603604081101561016857600080fd5b506001600160a01b0381358116916020013516610522565b005b61018a6109bd565b604080519115158252519081900360200190f35b6101cc600480360360408110156101b457600080fd5b506001600160a01b03813581169160200135166109c6565b60408051918252519081900360200190f35b610180600480360360608110156101f457600080fd5b506001600160a01b038135811691602081013590911690604001356109f5565b61023a6004803603602081101561022a57600080fd5b50356001600160a01b0316610def565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561027657818101518382015260200161025e565b505050509050019250505060405180910390f35b610292610e68565b604080516001600160a01b039092168252519081900360200190f35b610180600480360360208110156102c457600080fd5b5035610e8c565b610180600480360360608110156102e157600080fd5b506001600160a01b03813581169160208101359091169060400135611020565b6102926004803603602081101561031757600080fd5b50356001600160a01b031661145e565b61018a61147c565b6101cc6114ab565b6101806004803603608081101561034d57600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356114c1565b6101806004803603606081101561038957600080fd5b506001600160a01b0381358116916020810135821691604090910135166119a9565b610180600480360360208110156103c157600080fd5b50351515611ec2565b610180600480360360808110156103e057600080fd5b506001600160a01b03813581169160208101358216916040820135916060013516612064565b6101806004803603604081101561041c57600080fd5b506001600160a01b0381358116916020013516612686565b6101806004803603606081101561044a57600080fd5b506001600160a01b0381351690602081013590604001356128cb565b6101806004803603604081101561047c57600080fd5b506001600160a01b0381358116916020013516612c63565b610180600480360360208110156104aa57600080fd5b50356001600160a01b0316612eff565b610180600480360360408110156104d057600080fd5b506001600160a01b0381351690602001356131d4565b6101cc61333c565b6101cc613342565b6101806004803603604081101561050c57600080fd5b506001600160a01b038135169060200135613359565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d60208110156105a557600080fd5b50516001600160a01b031633146105f1576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d602081101561068957600080fd5b50516106cf576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6000836001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d602081101561073457600080fd5b50516040805163429c145b60e11b815290519192506001600160a01b0386169163853828b69160048082019260009290919082900301818387803b15801561077b57600080fd5b505af115801561078f573d6000803e3d6000fd5b505050506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d602081101561080c57600080fd5b50516001600160a01b03808716600090815260036020526040902054919250166108368187613789565b6001600160a01b03851615610919576001600160a01b0380821660009081526002602052604090205481169061086f908516828561381e565b604080516375892cf160e01b81526001600160a01b038681166004830152888116602483015260448201869052600160648301529151918316916375892cf1916084808201926020929091908290030181600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b505192506109136001600160a01b038716838561381e565b5061092d565b61092d6001600160a01b038416828461381e565b6001600160a01b038116600090815260026020526040902060010154828110610997576001600160a01b0382166000908152600260205260409020600101546109769084613870565b6001600160a01b0383166000908152600260205260409020600101556109b4565b6001600160a01b0382166000908152600260205260408120600101555b50505050505050565b60005460ff1681565b6001600160a01b0391821660009081526002602090815260408083209390941682526005909201909152205490565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d6020811015610a8d57600080fd5b5051610ad3576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b50516001600160a01b03163314610bb2576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6000856001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d6020811015610c1757600080fd5b505190506001600160a01b0380821690861614610d0157336000908152600260205260409020546001600160a01b0390811690610c57908716828761381e565b604080516375892cf160e01b81526001600160a01b038881166004830152848116602483015260448201889052600160648301529151918316916375892cf1916084808201926020929091908290030181600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050506040513d6020811015610ce357600080fd5b50519450610cfb6001600160a01b038316888761381e565b50610d15565b610d156001600160a01b038616878661381e565b33600090815260026020526040902060010154610d3290856138b9565b33600090815260026020526040808220600101929092558151630d0e30db60e41b815291516001600160a01b0389169263d0e30db092600480830193919282900301818387803b158015610d8557600080fd5b505af1158015610d99573d6000803e3d6000fd5b50505050610da73387613789565b856001600160a01b0316856001600160a01b03167f4a3db5ade61000fa57b36b688adc110f1b90af911256996dc89a52dcacd67ecd60405160405180910390a3505050505050565b6001600160a01b038116600090815260026020818152604092839020909101805483518184028101840190945280845260609392830182828015610e5c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e3e575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee557600080fd5b505afa158015610ef9573d6000803e3d6000fd5b505050506040513d6020811015610f0f57600080fd5b505115610f4c576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d6020811015610fcf57600080fd5b50516001600160a01b0316331461101b576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b600155565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107957600080fd5b505afa15801561108d573d6000803e3d6000fd5b505050506040513d60208110156110a357600080fd5b5051156110e0576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561113957600080fd5b505afa15801561114d573d6000803e3d6000fd5b505050506040513d602081101561116357600080fd5b50516001600160a01b031633146111af576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038084166000908152600260208181526040808420948716845260048501909152822054908301549091906111ec906001613870565b905060008360020182815481106111ff57fe5b6000918252602090912001546002850180546001600160a01b03909216925082918590811061122a57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260048601909152604090208390556002840180548061127257fe5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03891680825260048089018552604080842084905560058a0186528084208490556003808b0187528185208590559095528483208054909416909355835163429c145b60e11b81529351909363853828b69381810193929182900301818387803b15801561130e57600080fd5b505af1158015611322573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d60208110156113a957600080fd5b5051604080516335d9b91760e11b81526001600160a01b038a8116600483015289811660248301526044820189905291519190921691636bb3722e91606480830192600092919082900301818387803b15801561140557600080fd5b505af1158015611419573d6000803e3d6000fd5b50506040516001600160a01b03808a1693508a1691507f64a0e13af5f4bc5a68b1b79d9ff6e775f93e814ee8b0c97d620520190d04bae290600090a350505050505050565b6001600160a01b039081166000908152600260205260409020541690565b6000805460ff16156114a45750336000908152600260208190526040909120015415156114a8565b5060005b90565b3360009081526002602052604090206001015490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d602081101561154457600080fd5b505115611581576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d602081101561160457600080fd5b50516001600160a01b03163314611650576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116be57600080fd5b505afa1580156116d2573d6000803e3d6000fd5b505050506040513d60208110156116e857600080fd5b505161172e576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6001600160a01b0385811660009081526002602052604090205416611787576040805162461bcd60e51b815260206004820152600a60248201526910b1b7b73b32b93a32b960b11b604482015290519081900360640190fd5b6001600160a01b0385166000908152600260208190526040909120015460015481106117eb576040805162461bcd60e51b815260206004820152600e60248201526d216d61785374726174656769657360901b604482015290519081900360640190fd5b6001600160a01b0386811660008181526002602081815260408084209283018054600181018255908552828520018054968c166001600160a01b0319978816811790915584526005830182528084208a90556004909201815281832086905560039052902080549092161790558215611956577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d60208110156118e157600080fd5b505160408051634b704acd60e01b81526001600160a01b03898116600483015288811660248301526044820187905291519190921691634b704acd91606480830192600092919082900301818387803b15801561193d57600080fd5b505af1158015611951573d6000803e3d6000fd5b505050505b846001600160a01b0316866001600160a01b03167fc2008aa15e9b0989ec7ae02bc3d8054428c527c989269ffb2a5bff829028a012866040518082815260200191505060405180910390a3505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0257600080fd5b505afa158015611a16573d6000803e3d6000fd5b505050506040513d6020811015611a2c57600080fd5b505115611a69576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac257600080fd5b505afa158015611ad6573d6000803e3d6000fd5b505050506040513d6020811015611aec57600080fd5b50516001600160a01b03163314611b38576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8d76bce846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ba557600080fd5b505afa158015611bb9573d6000803e3d6000fd5b505050506040513d6020811015611bcf57600080fd5b5051611c0c576040805162461bcd60e51b81526020600482015260076024820152660857dd985d5b1d60ca1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c7957600080fd5b505afa158015611c8d573d6000803e3d6000fd5b505050506040513d6020811015611ca357600080fd5b5051611ce4576040805162461bcd60e51b815260206004820152600b60248201526a215f73747261746567793160a81b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d5157600080fd5b505afa158015611d65573d6000803e3d6000fd5b505050506040513d6020811015611d7b57600080fd5b5051611dbc576040805162461bcd60e51b815260206004820152600b60248201526a10afb9ba3930ba32b3bc9960a91b604482015290519081900360640190fd5b6001600160a01b03808416600090815260026020818152604080842087861685526004810190925280842054948616845290922054908201805492939285919084908110611e0657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084836002018281548110611e4457fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055878316808352600487019091526040808320859055878416808452818420879055905190939192918a16917ffea1ac549b0e10ecbe67c9d07de370cb3976ed51ef1fd559cf7472021417467891a4505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d6020811015611f4557600080fd5b505115611f82576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611fdb57600080fd5b505afa158015611fef573d6000803e3d6000fd5b505050506040513d602081101561200557600080fd5b50516001600160a01b03163314612051576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120bd57600080fd5b505afa1580156120d1573d6000803e3d6000fd5b505050506040513d60208110156120e757600080fd5b505115612124576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561217d57600080fd5b505afa158015612191573d6000803e3d6000fd5b505050506040513d60208110156121a757600080fd5b50516001600160a01b031633146121f3576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561226157600080fd5b505afa158015612275573d6000803e3d6000fd5b505050506040513d602081101561228b57600080fd5b50516122d1576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6001600160a01b03808616600090815260026020908152604080832093881680845260059094018252808320879055805163722713f760e01b8152905192939263722713f792600480840193919291829003018186803b15801561233457600080fd5b505afa158015612348573d6000803e3d6000fd5b505050506040513d602081101561235e57600080fd5b50519050838111801561237057508315155b1561267e5760006123818286613870565b9050856001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156123c957600080fd5b505af11580156123dd573d6000803e3d6000fd5b505050506123eb8787613789565b856001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561242457600080fd5b505afa158015612438573d6000803e3d6000fd5b505050506040513d602081101561244e57600080fd5b50516001600160a01b0388166000908152600260205260409020600101549092506124799083613870565b60026000896001600160a01b03166001600160a01b03168152602001908152602001600020600101819055506000866001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b1580156124e057600080fd5b505afa1580156124f4573d6000803e3d6000fd5b505050506040513d602081101561250a57600080fd5b5051604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561255657600080fd5b505afa15801561256a573d6000803e3d6000fd5b505050506040513d602081101561258057600080fd5b505192506001600160a01b03851615612667576001600160a01b038089166000908152600260205260409020548116906125bd908316828661381e565b604080516375892cf160e01b81526001600160a01b038481166004830152888116602483015260448201879052600160648301529151918316916375892cf1916084808201926020929091908290030181600087803b15801561261f57600080fd5b505af1158015612633573d6000803e3d6000fd5b505050506040513d602081101561264957600080fd5b505193506126616001600160a01b0387168a8661381e565b5061267b565b61267b6001600160a01b038216898561381e565b50505b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156126df57600080fd5b505afa1580156126f3573d6000803e3d6000fd5b505050506040513d602081101561270957600080fd5b50516001600160a01b03163314612755576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b816001600160a01b03166351cff8d9826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b505050506128c77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d602081101561284257600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561288a57600080fd5b505afa15801561289e573d6000803e3d6000fd5b505050506040513d60208110156128b457600080fd5b50516001600160a01b038416919061381e565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561292457600080fd5b505afa158015612938573d6000803e3d6000fd5b505050506040513d602081101561294e57600080fd5b50516001600160a01b03163314612999576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d6020811015612a3157600080fd5b5051612a77576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6000846001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab257600080fd5b505afa158015612ac6573d6000803e3d6000fd5b505050506040513d6020811015612adc57600080fd5b50516040805163e4a4b7b160e01b8152600481018790526024810186905290519192506001600160a01b0387169163e4a4b7b19160448082019260009290919082900301818387803b158015612b3157600080fd5b505af1158015612b45573d6000803e3d6000fd5b505050506000856001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8457600080fd5b505afa158015612b98573d6000803e3d6000fd5b505050506040513d6020811015612bae57600080fd5b50516001600160a01b0380881660009081526003602052604090205491925016612bfd612bdb8385613870565b6001600160a01b038316600090815260026020526040902060010154906138b9565b6001600160a01b0380831660009081526002602090815260408083206001810195909555928b168083526003909401905281812085905590517f188a622567eeca997c3d494fd65f76ca910b90a50a0c44d5e37b2ea5539e027b9190a250505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b9b8af0b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cbc57600080fd5b505afa158015612cd0573d6000803e3d6000fd5b505050506040513d6020811015612ce657600080fd5b505115612d23576040805162461bcd60e51b81526020600482015260066024820152651a185b1d195960d21b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015612d7c57600080fd5b505afa158015612d90573d6000803e3d6000fd5b505050506040513d6020811015612da657600080fd5b50516001600160a01b03163314612df2576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166383649674826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b5051612ed1576040805162461bcd60e51b815260206004820152601260248201527121616c6c6f776564436f6e7665727465727360701b604482015290519081900360640190fd5b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5857600080fd5b505afa158015612f6c573d6000803e3d6000fd5b505050506040513d6020811015612f8257600080fd5b50516001600160a01b03163314612fce576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ae6c8d4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561303c57600080fd5b505afa158015613050573d6000803e3d6000fd5b505050506040513d602081101561306657600080fd5b50516130ac576040805162461bcd60e51b815260206004820152601060248201526f21616c6c6f776564537472617465677960801b604482015290519081900360640190fd5b6000826001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b1580156130e757600080fd5b505afa1580156130fb573d6000803e3d6000fd5b505050506040513d602081101561311157600080fd5b505160408051630774672d60e21b815290519192506001600160a01b03851691631dd19cb49160048082019260009290919082900301818387803b15801561315857600080fd5b505af115801561316c573d6000803e3d6000fd5b5050506001600160a01b038085166000908152600360209081526040918290205482516370a0823160e01b815230600482015292516131cf9550908416938616926370a08231926024808301939192829003018186803b15801561288a57600080fd5b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561322d57600080fd5b505afa158015613241573d6000803e3d6000fd5b505050506040513d602081101561325757600080fd5b50516001600160a01b031633146132a3576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6128c77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ff57600080fd5b505afa158015613313573d6000803e3d6000fd5b505050506040513d602081101561332957600080fd5b50516001600160a01b038416908361381e565b60015481565b336000908152600260208190526040909120015490565b817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133c757600080fd5b505afa1580156133db573d6000803e3d6000fd5b505050506040513d60208110156133f157600080fd5b50516001600160a01b03163314613438576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6060806134458585613913565b9150915060005b82518110156136c45760006001600160a01b031683828151811061346c57fe5b60200260200101516001600160a01b03161415613488576136c4565b82818151811061349457fe5b60200260200101516001600160a01b0316632e1a7d4d8383815181106134b657fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156134f457600080fd5b505af1158015613508573d6000803e3d6000fd5b505050506135293384838151811061351c57fe5b6020026020010151613789565b600083828151811061353757fe5b60200260200101516001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561357757600080fd5b505afa15801561358b573d6000803e3d6000fd5b505050506040513d60208110156135a157600080fd5b505190506001600160a01b03808216908816146136bb573360009081526002602052604090205483516001600160a01b03909116906136099082908690869081106135e857fe5b6020026020010151846001600160a01b031661381e9092919063ffffffff16565b806001600160a01b03166375892cf1838a87878151811061362657fe5b602002602001015160016040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050602060405180830381600087803b15801561368d57600080fd5b505af11580156136a1573d6000803e3d6000fd5b505050506040513d60208110156136b757600080fd5b5050505b5060010161344c565b50604080516370a0823160e01b815230600482015290516001600160a01b038716916370a08231916024808301926020929190829003018186803b15801561370b57600080fd5b505afa15801561371f573d6000803e3d6000fd5b505050506040513d602081101561373557600080fd5b5051336000908152600260205260409020600101549094506137579085613870565b33600081815260026020526040902060010191909155613782906001600160a01b038716908661381e565b5050505050565b806001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156137c257600080fd5b505afa1580156137d6573d6000803e3d6000fd5b505050506040513d60208110156137ec57600080fd5b50516001600160a01b039283166000908152600260209081526040808320949095168252600390930190925291902055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526131cf908490613b5b565b60006138b283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613c0c565b9392505050565b6000828201838110156138b2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60608060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561398557600080fd5b505afa158015613999573d6000803e3d6000fd5b505050506040513d60208110156139af57600080fd5b50516001600160a01b038116600090815260026020819052604090912001549091508067ffffffffffffffff811180156139e857600080fd5b50604051908082528060200260200182016040528015613a12578160200160208202803683370190505b5093508067ffffffffffffffff81118015613a2c57600080fd5b50604051908082528060200260200182016040528015613a56578160200160208202803683370190505b50925060008060005b83811015613b4f576001600160a01b038516600090815260026020819052604090912001805482908110613a8f57fe5b9060005260206000200160009054906101000a90046001600160a01b0316925082878281518110613abc57fe5b6001600160a01b039283166020918202929092018101919091528682166000908152600282526040808220938716825260039093019091522054915087821015613b295781868281518110613b0d57fe5b6020908102919091010152613b228883613870565b9750613b47565b87868281518110613b3657fe5b602002602001018181525050613b4f565b600101613a5f565b50505050509250929050565b6060613bb0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ca39092919063ffffffff16565b8051909150156131cf57808060200190516020811015613bcf57600080fd5b50516131cf5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ea9602a913960400191505060405180910390fd5b60008184841115613c9b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613c60578181015183820152602001613c48565b50505050905090810190601f168015613c8d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060613cb28484600085613cba565b949350505050565b606082471015613cfb5760405162461bcd60e51b8152600401808060200182810382526026815260200180613e836026913960400191505060405180910390fd5b613d0485613e16565b613d55576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613d945780518252601f199092019160209182019101613d75565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613df6576040519150601f19603f3d011682016040523d82523d6000602084013e613dfb565b606091505b5091509150613e0b828286613e1c565b979650505050505050565b3b151590565b60608315613e2b5750816138b2565b825115613e3b5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315613c60578181015183820152602001613c4856fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122068b75ffcc99fbfd4d74bcbd0583a4ac580804edf30fdd02ff57d10e65142dccd64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStrategy(address,address,uint256,uint256)": {
        "params": {
          "_cap": "The cap of the strategy",
          "_strategy": "The address of the strategy",
          "_timeout": "The timeout between harvests",
          "_vault": "The address of the vault"
        }
      },
      "balanceOf()": {
        "details": "This function is optimized to prevent looping over all strategy balances, and instead the controller tracks the earn, withdraw, and harvest amounts."
      },
      "constructor": {
        "params": {
          "_manager": "The address of the manager"
        }
      },
      "earn(address,address,uint256)": {
        "params": {
          "_amount": "The amount that will be invested",
          "_strategy": "The address of the strategy",
          "_token": "The address of the token"
        }
      },
      "getCap(address,address)": {
        "params": {
          "_strategy": "The address of the strategy",
          "_vault": "The address of the vault"
        }
      },
      "harvestStrategy(address,uint256,uint256)": {
        "params": {
          "_strategy": "The address of the strategy"
        }
      },
      "inCaseStrategyGetStuck(address,address)": {
        "params": {
          "_strategy": "The address of the strategy",
          "_token": "The address of the token"
        }
      },
      "inCaseTokensGetStuck(address,uint256)": {
        "params": {
          "_amount": "The amount that will be withdrawn",
          "_token": "The address of the token"
        }
      },
      "investEnabled()": {
        "details": "Should be called by the vault"
      },
      "removeStrategy(address,address,uint256)": {
        "params": {
          "_strategy": "The address of the strategy",
          "_timeout": "The timeout between harvests",
          "_vault": "The address of the vault"
        }
      },
      "reorderStrategies(address,address,address)": {
        "params": {
          "_strategy1": "The address of the first strategy",
          "_strategy2": "The address of the second strategy",
          "_vault": "The address of the vault"
        }
      },
      "setCap(address,address,uint256,address)": {
        "details": "If the balance of the strategy is greater than the new cap (except if the cap is 0), then withdraw the difference from the strategy to the vault.",
        "params": {
          "_cap": "The new cap of the strategy",
          "_strategy": "The address of the strategy",
          "_vault": "The address of the vault"
        }
      },
      "setConverter(address,address)": {
        "params": {
          "_converter": "The address of the converter",
          "_vault": "The address of the vault"
        }
      },
      "setInvestEnabled(bool)": {
        "params": {
          "_investEnabled": "The new bool of the invest enabled flag"
        }
      },
      "setMaxStrategies(uint256)": {
        "params": {
          "_maxStrategies": "The new value of the maximum strategies"
        }
      },
      "strategies(address)": {
        "params": {
          "_vault": "The address of the vault"
        }
      },
      "withdraw(address,uint256)": {
        "details": "If the withdraw amount is greater than the first strategy given by getBestStrategyWithdraw, this function will loop over strategies until the requested amount is met.",
        "params": {
          "_amount": "The amount that will be withdrawn",
          "_token": "The address of the token"
        }
      },
      "withdrawAll(address,address)": {
        "params": {
          "_convert": "The token address to convert to",
          "_strategy": "The address of the strategy"
        }
      }
    },
    "title": "Controller",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Earn(address,address)": {
        "notice": "Logged when earn is called for a strategy"
      },
      "Harvest(address)": {
        "notice": "Logged when harvest is called for a strategy"
      },
      "InsuranceClaimed(address)": {
        "notice": "Logged when insurance is claimed for a vault"
      },
      "StrategiesReordered(address,address,address)": {
        "notice": "Logged when strategies are reordered for a vault"
      },
      "StrategyAdded(address,address,uint256)": {
        "notice": "Logged when a strategy is added for a vault"
      },
      "StrategyRemoved(address,address)": {
        "notice": "Logged when a strategy is removed for a vault"
      }
    },
    "kind": "user",
    "methods": {
      "addStrategy(address,address,uint256,uint256)": {
        "notice": "Adds a strategy for a given vault"
      },
      "balanceOf()": {
        "notice": "Returns the rough balance of the sum of all strategies for a given vault"
      },
      "earn(address,address,uint256)": {
        "notice": "Invests funds into a strategy"
      },
      "getCap(address,address)": {
        "notice": "Returns the cap of a strategy for a given vault"
      },
      "harvestStrategy(address,uint256,uint256)": {
        "notice": "Harvests the specified strategy"
      },
      "inCaseStrategyGetStuck(address,address)": {
        "notice": "Withdraws token from a strategy to the treasury address as returned by the manager"
      },
      "inCaseTokensGetStuck(address,uint256)": {
        "notice": "Withdraws token from the controller to the treasury"
      },
      "investEnabled()": {
        "notice": "Returns whether investing is enabled for the calling vault"
      },
      "removeStrategy(address,address,uint256)": {
        "notice": "Removes a strategy for a given token"
      },
      "reorderStrategies(address,address,address)": {
        "notice": "Reorders two strategies for a given vault"
      },
      "setCap(address,address,uint256,address)": {
        "notice": "Sets/updates the cap of a strategy for a vault"
      },
      "setConverter(address,address)": {
        "notice": "Sets/updates the converter for a given vault"
      },
      "setInvestEnabled(bool)": {
        "notice": "Sets/updates the global invest enabled flag"
      },
      "setMaxStrategies(uint256)": {
        "notice": "Sets/updates the maximum number of strategies for a vault"
      },
      "strategies(address)": {
        "notice": "Returns all the strategies for a given vault"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws funds from a strategy"
      },
      "withdrawAll(address,address)": {
        "notice": "Withdraws all funds from a strategy"
      }
    },
    "notice": "This controller allows multiple strategies to be used for a single vault supporting multiple tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23842,
        "contract": "contracts/v3/controllers/Controller.sol:Controller",
        "label": "globalInvestEnabled",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23844,
        "contract": "contracts/v3/controllers/Controller.sol:Controller",
        "label": "maxStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 23868,
        "contract": "contracts/v3/controllers/Controller.sol:Controller",
        "label": "_vaultDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(VaultDetail)23864_storage)"
      },
      {
        "astId": 23872,
        "contract": "contracts/v3/controllers/Controller.sol:Controller",
        "label": "_vaultStrategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(VaultDetail)23864_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Controller.VaultDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultDetail)23864_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(VaultDetail)23864_storage": {
        "encoding": "inplace",
        "label": "struct Controller.VaultDetail",
        "members": [
          {
            "astId": 23846,
            "contract": "contracts/v3/controllers/Controller.sol:Controller",
            "label": "converter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23848,
            "contract": "contracts/v3/controllers/Controller.sol:Controller",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23851,
            "contract": "contracts/v3/controllers/Controller.sol:Controller",
            "label": "strategies",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 23855,
            "contract": "contracts/v3/controllers/Controller.sol:Controller",
            "label": "balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23859,
            "contract": "contracts/v3/controllers/Controller.sol:Controller",
            "label": "index",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23863,
            "contract": "contracts/v3/controllers/Controller.sol:Controller",
            "label": "caps",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}