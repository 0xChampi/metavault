{
  "address": "0x01FEF0d5d6Fd6B5701aE913CaFb11dDaeE982C9A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yax",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yaxisChef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yaxisBar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yaxEthUniswapV2Pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yax",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yaxEthUniswapV2Pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yaxisBar",
      "outputs": [
        {
          "internalType": "contract IYaxisBar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x54d4980a44490f6f06dd84e4c7030add333c740ab1acfe66ef1435db6352f887",
  "receipt": {
    "to": null,
    "from": "0x65F84A48e640a908d0DF7B6f00B871352F77022D",
    "contractAddress": "0x01FEF0d5d6Fd6B5701aE913CaFb11dDaeE982C9A",
    "transactionIndex": 153,
    "gasUsed": "725561",
    "logsBloom": "0x
    "blockHash": "0xa4534f8a6b33799626419d004a7317c57f404c02d97d6a453b5f15453dfdd450",
    "transactionHash": "0x54d4980a44490f6f06dd84e4c7030add333c740ab1acfe66ef1435db6352f887",
    "logs": [],
    "blockNumber": 12117027,
    "cumulativeGasUsed": "7773670",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1dC9124c395c1e97773ab855d66E879f053A289",
    "0xC330E7e73717cd13fb6bA068Ee871584Cf8A194F",
    "0xeF31Cb88048416E301Fee1eA13e7664b887BA7e8",
    "0x1107B6081231d7F256269aD014bF92E041cb08df"
  ],
  "solcInputHash": "c732ac3106bc5496d862806e5cdcce4a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yaxisChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yaxisBar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yaxEthUniswapV2Pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yax\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxEthUniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxisBar\",\"outputs\":[{\"internalType\":\"contract IYaxisBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/YaxisVotePower.sol\":\"YaxisVotePower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/governance/YaxisVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IMasterChef.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IVoteProxy.sol\\\";\\nimport \\\"./interfaces/IYaxisBar.sol\\\";\\n\\ncontract YaxisVotePower is IVoteProxy {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant PID = 6;\\n    // solhint-disable-next-line const-name-snakecase\\n    uint8 public constant override decimals = uint8(18);\\n\\n    // ETH/YAX token\\n    IUniswapV2Pair public immutable yaxEthUniswapV2Pair;\\n\\n    // YAX token\\n    IERC20 public immutable yax;\\n\\n    // YaxisChef contract\\n    IMasterChef public immutable chef;\\n\\n    // sYAX token\\n    IYaxisBar public immutable yaxisBar;\\n\\n    constructor(\\n        address _yax,\\n        address _yaxisChef,\\n        address _yaxisBar,\\n        address _yaxEthUniswapV2Pair\\n    )\\n        public\\n    {\\n        yax = IERC20(_yax);\\n        chef = IMasterChef(_yaxisChef);\\n        yaxisBar = IYaxisBar(_yaxisBar);\\n        yaxEthUniswapV2Pair = IUniswapV2Pair(_yaxEthUniswapV2Pair);\\n    }\\n\\n    function totalSupply()\\n        external\\n        view\\n        override\\n        returns (uint256 _supply)\\n    {\\n        (uint256 _yaxReserves,,) = yaxEthUniswapV2Pair.getReserves();\\n        _supply = yaxEthUniswapV2Pair.totalSupply();\\n        _supply = _supply == 0\\n            ? 1e18\\n            : _supply;\\n        uint256 _lpStakingYax = _yaxReserves\\n            .mul(yaxEthUniswapV2Pair.balanceOf(address(chef)))\\n            .div(_supply);\\n        _supply = sqrt(\\n            yax.totalSupply()\\n                .add(_lpStakingYax)\\n                .add(yaxisBar.availableBalance())\\n        );\\n    }\\n\\n    function balanceOf(\\n        address _voter\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 _balance)\\n    {\\n        (uint256 _stakeAmount,,) = chef.userInfo(PID, _voter);\\n        (uint256 _yaxReserves,,) = yaxEthUniswapV2Pair.getReserves();\\n        uint256 _supply = yaxEthUniswapV2Pair.totalSupply();\\n        _supply = _supply == 0\\n            ? 1e18\\n            : _supply;\\n        uint256 _lpStakingYax = _yaxReserves\\n            .mul(_stakeAmount)\\n            .div(_supply)\\n            .add(chef.pendingYaxis(PID, _voter));\\n        _supply = yaxisBar.totalSupply();\\n        _supply = _supply == 0\\n            ? 1e18\\n            : _supply;\\n        uint256 _syaxAmount = yaxisBar.balanceOf(_voter)\\n            .mul(yaxisBar.availableBalance())\\n            .div(_supply);\\n        _balance = sqrt(\\n            yax.balanceOf(_voter)\\n                .add(_lpStakingYax)\\n                .add(_syaxAmount)\\n        );\\n    }\\n\\n    function sqrt(\\n        uint256 x\\n    )\\n        private\\n        pure\\n        returns (uint256 y)\\n    {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n        y = y * (10 ** 9);\\n    }\\n}\\n\",\"keccak256\":\"0x0162948390be469ef51078af7e6cd1c8fb042c81b7fce2b30b06dfa4ae2a5001\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMasterChef {\\n    function userInfo(uint256, address) external view returns (uint256, uint256, uint256);\\n    function pendingYaxis(uint256, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x80f0c04e7f0afc760b97c7ebcd4209e9089e6b7ad2efa39067c33f032d14ceff\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IERC20 {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\",\"keccak256\":\"0xfc2eddc11e5ceb4926a4e1a604e0b019f21f566517226f3447bc47db4bae6365\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IVoteProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IVoteProxy {\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _voter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x803c3e938dbe4891fddd4b51f79ee287d136556a0fbc8a8e02c8194ddc568ed8\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IYaxisBar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IYaxisBar is IERC20 {\\n    function availableBalance() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1e3e02242def5b61f8ce315616d6ad5b8ea5994f0350e2c8f3c0bb87cebb9997\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610d27380380610d278339818101604052608081101561003457600080fd5b508051602082015160408301516060938401516001600160601b031993851b841660a05291841b831660c052831b821660e05290911b1660805260805160601c60a05160601c60c05160601c60e05160601c610c326100f5600039806103445280610769528061081152806108b652806109dc5250806102a5528061047352806104c852806106b75250806103e75280610497528061094052508061013452806101de52806102765280610588528061062452806109b85250610c326000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635eaec0e41161005b5780635eaec0e4146100f157806370a08231146100f95780637b66254e1461011f578063e65a715e1461012757610088565b806318160ddd1461008d5780631fc8bc5d146100a75780632f2a04be146100cb578063313ce567146100d3575b600080fd5b61009561012f565b60408051918252519081900360200190f35b6100af610471565b604080516001600160a01b039092168252519081900360200190f35b6100af610495565b6100db6104b9565b6040805160ff9092168252519081900360200190f35b6100956104be565b6100956004803603602081101561010f57600080fd5b50356001600160a01b03166104c3565b6100af6109b6565b6100af6109da565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561018b57600080fd5b505afa15801561019f573d6000803e3d6000fd5b505050506040513d60608110156101b557600080fd5b5051604080516318160ddd60e01b815290516001600160701b0390921692506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd91600480820192602092909190829003018186803b15801561022557600080fd5b505afa158015610239573d6000803e3d6000fd5b505050506040513d602081101561024f57600080fd5b50519150811561025f5781610269565b670de0b6b3a76400005b9150600061033a836103347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d602081101561032b57600080fd5b505185906109fe565b90610a60565b905061046a6104657f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab2f0e516040518163ffffffff1660e01b815260040160206040518083038186803b15801561039b57600080fd5b505afa1580156103af573d6000803e3d6000fd5b505050506040513d60208110156103c557600080fd5b5051604080516318160ddd60e01b8152905161045f9186916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b15801561042d57600080fd5b505afa158015610441573d6000803e3d6000fd5b505050506040513d602081101561045757600080fd5b505190610aa2565b90610aa2565b610afc565b9250505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b600681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b6006856040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060606040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d606081101561056657600080fd5b505160408051630240bc6b60e21b815290519192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630902f1ac916004808301926060929190829003018186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d60608110156105f857600080fd5b5051604080516318160ddd60e01b815290516001600160701b0390921692506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d602081101561069457600080fd5b5051905080156106a457806106ae565b670de0b6b3a76400005b905060006107657f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361336a316006896040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d602081101561075557600080fd5b505161045f8461033487896109fe565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c057600080fd5b505afa1580156107d4573d6000803e3d6000fd5b505050506040513d60208110156107ea57600080fd5b5051915081156107fa5781610804565b670de0b6b3a76400005b91506000610931836103347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab2f0e516040518163ffffffff1660e01b815260040160206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d602081101561089257600080fd5b5051604080516370a0823160e01b81526001600160a01b038d8116600483015291517f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d602081101561092957600080fd5b5051906109fe565b90506109ab6104658261045f857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561042d57600080fd5b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082610a0d57506000610a5a565b82820282848281610a1a57fe5b0414610a575760405162461bcd60e51b8152600401808060200182810382526021815260200180610bdc6021913960400191505060405180910390fd5b90505b92915050565b6000610a5783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610b39565b600082820183811015610a57576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80600260018201045b81811015610b2d57809150600281828581610b1c57fe5b040181610b2557fe5b049050610b05565b50633b9aca0002919050565b60008183610bc55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b8a578181015183820152602001610b72565b50505050905090810190601f168015610bb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610bd157fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204a962c8b0454f9fb6910d30404683fbfef8a9487edc3608246bcae59e1871a1364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635eaec0e41161005b5780635eaec0e4146100f157806370a08231146100f95780637b66254e1461011f578063e65a715e1461012757610088565b806318160ddd1461008d5780631fc8bc5d146100a75780632f2a04be146100cb578063313ce567146100d3575b600080fd5b61009561012f565b60408051918252519081900360200190f35b6100af610471565b604080516001600160a01b039092168252519081900360200190f35b6100af610495565b6100db6104b9565b6040805160ff9092168252519081900360200190f35b6100956104be565b6100956004803603602081101561010f57600080fd5b50356001600160a01b03166104c3565b6100af6109b6565b6100af6109da565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561018b57600080fd5b505afa15801561019f573d6000803e3d6000fd5b505050506040513d60608110156101b557600080fd5b5051604080516318160ddd60e01b815290516001600160701b0390921692506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd91600480820192602092909190829003018186803b15801561022557600080fd5b505afa158015610239573d6000803e3d6000fd5b505050506040513d602081101561024f57600080fd5b50519150811561025f5781610269565b670de0b6b3a76400005b9150600061033a836103347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d602081101561032b57600080fd5b505185906109fe565b90610a60565b905061046a6104657f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab2f0e516040518163ffffffff1660e01b815260040160206040518083038186803b15801561039b57600080fd5b505afa1580156103af573d6000803e3d6000fd5b505050506040513d60208110156103c557600080fd5b5051604080516318160ddd60e01b8152905161045f9186916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b15801561042d57600080fd5b505afa158015610441573d6000803e3d6000fd5b505050506040513d602081101561045757600080fd5b505190610aa2565b90610aa2565b610afc565b9250505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b600681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b6006856040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060606040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d606081101561056657600080fd5b505160408051630240bc6b60e21b815290519192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630902f1ac916004808301926060929190829003018186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d60608110156105f857600080fd5b5051604080516318160ddd60e01b815290516001600160701b0390921692506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d602081101561069457600080fd5b5051905080156106a457806106ae565b670de0b6b3a76400005b905060006107657f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361336a316006896040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d602081101561075557600080fd5b505161045f8461033487896109fe565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c057600080fd5b505afa1580156107d4573d6000803e3d6000fd5b505050506040513d60208110156107ea57600080fd5b5051915081156107fa5781610804565b670de0b6b3a76400005b91506000610931836103347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab2f0e516040518163ffffffff1660e01b815260040160206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d602081101561089257600080fd5b5051604080516370a0823160e01b81526001600160a01b038d8116600483015291517f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d602081101561092957600080fd5b5051906109fe565b90506109ab6104658261045f857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561042d57600080fd5b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082610a0d57506000610a5a565b82820282848281610a1a57fe5b0414610a575760405162461bcd60e51b8152600401808060200182810382526021815260200180610bdc6021913960400191505060405180910390fd5b90505b92915050565b6000610a5783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610b39565b600082820183811015610a57576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80600260018201045b81811015610b2d57809150600281828581610b1c57fe5b040181610b2557fe5b049050610b05565b50633b9aca0002919050565b60008183610bc55760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b8a578181015183820152602001610b72565b50505050905090810190601f168015610bb75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610bd157fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204a962c8b0454f9fb6910d30404683fbfef8a9487edc3608246bcae59e1871a1364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}