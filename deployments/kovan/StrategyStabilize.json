{
  "address": "0xaF25D648B5d72B6238Bd73B4AD935acF25A1cA24",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zpaToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_STBZ",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_converter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STBZ",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfzpaToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateZPATokenWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "converter",
      "outputs": [
        {
          "internalType": "contract IConverter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zpaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0xaF25D648B5d72B6238Bd73B4AD935acF25A1cA24",
    "transactionIndex": 4,
    "gasUsed": "2822778",
    "logsBloom": "0x
    "blockHash": "0x6e7b204bf0a24b190888530a2a0606411674a37d35f5278aa0038dcc9f622ef2",
    "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 23062959,
        "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
        "address": "0x38e966C6F5562D628e70560726A7B7bCD6D1EC8A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af25d648b5d72b6238bd73b4ad935acf25a1ca24",
          "0x0000000000000000000000008d037ea525f150bad41d0cab990665fe944cb2f7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x6e7b204bf0a24b190888530a2a0606411674a37d35f5278aa0038dcc9f622ef2"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 23062959,
        "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
        "address": "0x5B5fE76B7b866A660C3bAe2f5819a1452Db18174",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af25d648b5d72b6238bd73b4ad935acf25a1ca24",
          "0x0000000000000000000000008d037ea525f150bad41d0cab990665fe944cb2f7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x6e7b204bf0a24b190888530a2a0606411674a37d35f5278aa0038dcc9f622ef2"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 23062959,
        "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
        "address": "0x59Dd2C19F322f7457C34C73023cC7dA1fde4063d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af25d648b5d72b6238bd73b4ad935acf25a1ca24",
          "0x0000000000000000000000004981d4a898e1c503bfa06b751f932600e124108f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x6e7b204bf0a24b190888530a2a0606411674a37d35f5278aa0038dcc9f622ef2"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 23062959,
        "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
        "address": "0x59Dd2C19F322f7457C34C73023cC7dA1fde4063d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af25d648b5d72b6238bd73b4ad935acf25a1ca24",
          "0x000000000000000000000000c2a5b8a56a3259039c2eb5b749c121c237ffecf4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x6e7b204bf0a24b190888530a2a0606411674a37d35f5278aa0038dcc9f622ef2"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 23062959,
        "transactionHash": "0xf45d33c0eaca5cdb401ca9146e579295f03c9e0a33238020286b36095c77db85",
        "address": "0xC2A5B8A56A3259039C2eB5b749c121C237ffEcf4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af25d648b5d72b6238bd73b4ad935acf25a1ca24",
          "0x0000000000000000000000006bea6113d06cca2453917d002b9eeb052ea5dd6a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x6e7b204bf0a24b190888530a2a0606411674a37d35f5278aa0038dcc9f622ef2"
      }
    ],
    "blockNumber": 23062959,
    "cumulativeGasUsed": "2976380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x59Dd2C19F322f7457C34C73023cC7dA1fde4063d",
    "0xC2A5B8A56A3259039C2eB5b749c121C237ffEcf4",
    "0x6bea6113d06CcA2453917d002b9eEB052ea5Dd6A",
    0,
    "0x5B5fE76B7b866A660C3bAe2f5819a1452Db18174",
    "0x4981D4A898e1C503BFA06B751f932600E124108f",
    "0xD3dB7ba937597A3fFAd1174bAed2955852FD5d6D",
    "0x15885dE7737B179968B216275b6531f3a668E4E9",
    "0x38e966C6F5562D628e70560726A7B7bCD6D1EC8A",
    "0x8D037Ea525f150BaD41D0caB990665fE944Cb2F7"
  ],
  "solcInputHash": "0dafef0f9d3baf21ab7d835401fdfdba",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zpaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_STBZ\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STBZ\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfzpaToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateZPATokenWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zpaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"setController(address)\":{\"params\":{\"_controller\":\"The address of the controller\"}},\"setRouter(address)\":{\"params\":{\"_router\":\"The address of the router\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest()\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setController(address)\":{\"notice\":\"Sets the address of the controller\"},\"setRouter(address)\":{\"notice\":\"Sets the address of the ISwap-compatible router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/strategies/StrategyStabilize.sol\":\"StrategyStabilize\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/interfaces/Stabilize.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IZPAToken {\\n    function deposit(uint256) external;\\n    function redeem(uint256) external;\\n    function underlyingAsset() external view returns (address);\\n    function pricePerToken() external view returns (uint256);\\n\\n    function initialFee() external view returns (uint256);\\n    function endFee() external view returns (uint256);\\n    function feeDuration() external view returns (uint256);\\n}\\n\\ninterface IZPAPool {\\n    function deposit(uint256, uint256) external;\\n    function withdraw(uint256, uint256) external;\\n    function exit(uint256, uint256) external;\\n    function getReward(uint256) external;\\n    function rewardEarned(uint256, address) external view returns (uint256);\\n    function poolTokenAddress(uint256) external view returns (address);\\n    function poolBalance(uint256, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc0c7998cb7ed8964090a0d76b695664aff0e2c80a3f1a4e0bd961b1ea49713f\",\"license\":\"MIT\"},\"contracts/metavault/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x34677b3f7fc870d4738321e11c0395054e0c995100878ff628e681e41b7ce199\",\"license\":\"MIT\"},\"contracts/metavault/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external returns (uint dy);\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n}\\n\",\"keccak256\":\"0xb2ce7af2aadcccdaddfa43ad14bf581f6d6d2fc85e7eb6c415675e2b1e0d4cd9\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x913b50315c2ef2d41e44e36802e2db0e11a664e76cc232f5496da7d4efde4e5b\",\"license\":\"MIT\"},\"contracts/metavault/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest() external;\\n    function skim() external;\\n    function want() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf4c1f571434bfcb0929b1890e7838f8427395d03057e553d63108e71a1ca5fd3\",\"license\":\"MIT\"},\"contracts/metavault/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n}\\n\",\"keccak256\":\"0x008a41c285e92105e22384cfa3b438c734c431a0d48e2c1920a339de9807809a\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../IStableSwap3Pool.sol\\\";\\nimport \\\"../ISwap.sol\\\";\\nimport \\\"../IVaultManager.sol\\\";\\nimport \\\"../IStrategy.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable weth;\\n    address public controller;\\n    IVaultManager public vaultManager;\\n    ISwap public router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _vaultManager The address of the vaultManager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _router The address of the router for swapping tokens\\n     */\\n    constructor(\\n        address _controller,\\n        address _vaultManager,\\n        address _want,\\n        address _weth,\\n        address _router\\n    ) public {\\n        want = _want;\\n        controller = _controller;\\n        vaultManager = IVaultManager(_vaultManager);\\n        weth = _weth;\\n        router = ISwap(_router);\\n        IERC20(_weth).safeApprove(address(_router), type(uint256).max);\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(IERC20 _token, address _spender, uint256 _amount) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the controller\\n     * @param _controller The address of the controller\\n     */\\n    function setController(address _controller) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _router The address of the router\\n     */\\n    function setRouter(address _router) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        router = ISwap(_router);\\n        IERC20(weth).safeApprove(address(_router), 0);\\n        IERC20(weth).safeApprove(address(_router), type(uint256).max);\\n    }\\n\\n    /**\\n     * AUTHORIZED-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit() external override onlyAuthorized {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest() external override onlyAuthorized {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim() external override onlyAuthorized {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(address _asset) external override onlyAuthorized {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external override onlyAuthorized {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        address _token = _vaultWant();\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll() external override onlyAuthorized returns (uint256 _balance) {\\n        _withdrawAll();\\n\\n        address _token = _vaultWant();\\n        _balance = IERC20(_token).balanceOf(address(this));\\n\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf() external override view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool() public view override virtual returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant() public view override returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit() internal virtual;\\n\\n    function _harvest() internal virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken\\n    ) internal returns (uint256 _wethBal) {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yax,\\n                address stakingPool,\\n                uint256 stakingPoolShareFee,\\n                address treasury,\\n                uint256 treasuryFee,\\n                address insurance,\\n                uint256 insurancePoolFee\\n            ) = vaultManager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the staking pool with YAX\\n            if (stakingPoolShareFee > 0 && stakingPool != address(0)) {\\n                _fee = _wethBal.mul(stakingPoolShareFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(stakingPool, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(treasury, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the insurance pool with YAX\\n            if (insurancePoolFee > 0 && insurance != address(0)) {\\n                _fee = _wethBal.mul(insurancePoolFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(insurance, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokens(address _input, address _output, uint256 _amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            1,\\n            path,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp.add(1800)\\n        );\\n    }\\n\\n    function _vaultWant() internal returns (address) {\\n        return IController(controller).strategyTokens(address(this));\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _withdrawAll() internal virtual;\\n\\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\\n        address _token = _vaultWant();\\n        uint256 _before = IERC20(_token).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(_token).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == controller\\n             || msg.sender == vaultManager.strategist()\\n             || msg.sender == vaultManager.governance(),\\n             \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4c7a0bc0f087511fd955810591d0bc2f9c226709911980d80598206afa2c990c\",\"license\":\"MIT\"},\"contracts/metavault/strategies/StrategyStabilize.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../interfaces/Stabilize.sol\\\";\\nimport \\\"../IConverter.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyStabilize is BaseStrategy {\\n    address public immutable zpaToken;\\n    address public immutable pool;\\n    address public immutable STBZ;\\n    uint256 public immutable poolId;\\n    IConverter public converter;\\n\\n    uint256 private depositTime; // The time the strategy made a deposit into zpa-Token, every deposit resets the time\\n    uint256 private constant DIVISION_FACTOR = 100000;\\n    uint256 private constant INITIAL_FEE = 1000; // 1000 = 1%, 100000 = 100%, max fee restricted in contract is 10%\\n    uint256 private constant END_FEE = 100; // 100 = 0.1%\\n    uint256 private constant FEE_DURATION = 604800; // The amount of seconds it takes from the initial to end fee\\n\\n    constructor(\\n        address _underlying,\\n        address _zpaToken,\\n        address _pool,\\n        uint256 _poolId,\\n        address _STBZ,\\n        address _converter,\\n        address _controller,\\n        address _vaultManager,\\n        address _weth,\\n        address _router\\n    )\\n        public\\n        BaseStrategy(_controller, _vaultManager, _underlying, _weth, _router)\\n    {\\n        zpaToken = _zpaToken;\\n        pool = _pool;\\n        poolId = _poolId;\\n        STBZ = _STBZ;\\n        converter = IConverter(_converter);\\n        IERC20(_STBZ).safeApprove(address(_router), type(uint256).max);\\n        IERC20(_underlying).safeApprove(address(_converter), type(uint256).max);\\n        IERC20(_underlying).safeApprove(_zpaToken, type(uint256).max);\\n        IERC20(_zpaToken).safeApprove(_pool, type(uint256).max);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        uint256 zpaBalance = balanceOfzpaToken();\\n        return (IZPAPool(pool).poolBalance(poolId, address(this)))\\n            .mul(IZPAToken(zpaToken).pricePerToken())\\n            .div(1e18)\\n            .add(zpaBalance).sub(calculateZPATokenWithdrawFee(zpaBalance));\\n    }\\n\\n    function balanceOfzpaToken() public view returns (uint256) {\\n        return IERC20(zpaToken).balanceOf(address(this));\\n    }\\n\\n    function calculateZPATokenWithdrawFee(uint256 amount) public view returns (uint256) {\\n        uint256 _depositTime = depositTime;\\n        if (_depositTime == 0) {\\n            // Never deposited\\n            _depositTime = block.timestamp; // Give the max fee\\n        }\\n\\n        uint256 feeSubtraction = INITIAL_FEE.sub(END_FEE).mul(block.timestamp.sub(_depositTime)).div(FEE_DURATION);\\n        if (feeSubtraction > INITIAL_FEE.sub(END_FEE)) {\\n            // Cannot reduce fee more than this\\n            feeSubtraction = INITIAL_FEE.sub(END_FEE);\\n        }\\n        uint256 fee = INITIAL_FEE.sub(feeSubtraction);\\n        return amount.mul(fee).div(DIVISION_FACTOR);\\n    }\\n\\n    function _deposit() internal override {\\n        uint256 amount = balanceOfWant();\\n        if (amount > 0) {\\n            depositTime = block.timestamp;\\n            IZPAToken(zpaToken).deposit(amount);\\n        }\\n        amount = balanceOfzpaToken();\\n        if (amount > 0) {\\n            IZPAPool(pool).deposit(poolId, amount);\\n        }\\n    }\\n\\n    function _harvest() internal override {\\n        IZPAPool(pool).getReward(poolId);\\n        uint256 remainingWeth = _payHarvestFees(STBZ);\\n\\n        if (remainingWeth > 0) {\\n            _swapTokens(weth, want, remainingWeth);\\n\\n            if (balanceOfWant() > 0) {\\n                _deposit();\\n            }\\n        }\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        _amount = _amount.mul(1e18).div(IZPAToken(zpaToken).pricePerToken());\\n        uint256 _before = balanceOfzpaToken();\\n        IZPAPool(pool).withdraw(poolId, _amount);\\n        uint256 _after = balanceOfzpaToken();\\n        _amount = _after.sub(_before);\\n        IZPAToken(zpaToken).redeem(_amount);\\n        _amount = balanceOfWant();\\n        if (_amount > 0) {\\n            _convert(want, _vaultWant(), _amount);\\n        }\\n    }\\n\\n    function _withdrawAll() internal override {\\n        uint256 amount = IZPAPool(pool).poolBalance(poolId, address(this));\\n        IZPAPool(pool).exit(poolId, amount);\\n\\n        amount = balanceOfzpaToken();\\n        if (amount > 0) {\\n            IZPAToken(zpaToken).redeem(amount);\\n            amount = balanceOfWant();\\n            _convert(want, _vaultWant(), amount);\\n        }\\n    }\\n\\n    function _convert(address _from, address _to, uint256 _amount) internal {\\n        require(converter.convert_rate(_from, _to, _amount) > 0, \\\"!convert_rate\\\");\\n        IERC20(_from).safeTransfer(address(converter), _amount);\\n        converter.convert(_from, _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x686ad1a8a1a3c4ac1d01531c27f6f84d324e3abc74460680d976fb4bf42fa7e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620035453803806200354583398181016040526101408110156200003957600080fd5b508051602080830151604084015160608086015160808088015160a0808a015160c08b015160e08c01516101008d0151610120909d01516001600160601b03198d8a1b8116909752600080546001600160a01b038086166001600160a01b03199283161790925560018054838616908316179055998f901b90971690945260028054878616991698909817909755999a9799969894979296909590949093859185918d9186918691620000fe91841690839060001990620016c4620001f0821b17901c565b5050505050606089811b6001600160601b031990811660c05289821b811660e0526101208990529087901b1661010052600380546001600160a01b0319166001600160a01b03878116919091179091556200016b90871682600019620001f0602090811b620016c417901c565b62000192856000198c6001600160a01b0316620001f060201b620016c4179092919060201c565b620001b9896000198c6001600160a01b0316620001f060201b620016c4179092919060201c565b620001e0886000198b6001600160a01b0316620001f060201b620016c4179092919060201c565b5050505050505050505062000603565b8015806200027a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200024a57600080fd5b505afa1580156200025f573d6000803e3d6000fd5b505050506040513d60208110156200027657600080fd5b5051155b620002b75760405162461bcd60e51b81526004018080602001828103825260368152602001806200350f6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200030f9185916200031416565b505050565b606062000370826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003d060201b620017d7179092919060201c565b8051909150156200030f578080602001905160208110156200039157600080fd5b50516200030f5760405162461bcd60e51b815260040180806020018281038252602a815260200180620034e5602a913960400191505060405180910390fd5b6060620003e18484600085620003eb565b90505b9392505050565b6060824710156200042e5760405162461bcd60e51b8152600401808060200182810382526026815260200180620034bf6026913960400191505060405180910390fd5b620004398562000553565b6200048b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620004cc5780518252601f199092019160209182019101620004ab565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000530576040519150601f19603f3d011682016040523d82523d6000602084013e62000535565b606091505b5090925090506200054882828662000559565b979650505050505050565b3b151590565b606083156200056a575081620003e4565b8251156200057b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005c7578181015183820152602001620005ad565b50505050905090810190601f168015620005f55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c61012051612db962000706600039806103e352806109245280611b2e5280611c415280611cfd5280611f3a52806123945250806114155280611ba252508061041952806104ab5280611aff5280611c7a5280611d375280611f0b528061236552508061035052806110c852806116a25280611da95280611e7c52806122c052806124235250806109cf528061134352806113785280611bd3528061256552806125aa528061271052806127f852806128a3528061293a525080610654528061067f5280610ccf52806113a85280611bf45280611e3452806124b45250612db96000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638a4adf24116100de578063ce29ee3711610097578063ef9e237911610071578063ef9e2379146102d4578063f77c47911461030a578063f887ea4014610312578063fd4c80981461031a57610173565b8063ce29ee37146102bc578063d0e30db0146102c4578063dd0081c7146102cc57610173565b80638a4adf24146102505780638ae011271461025857806392eefe9b14610260578063bd38837b14610286578063c0d786551461028e578063c1a3d44c146102b457610173565b80633ee850ff116101305780633ee850ff146101ed5780633fc8cef31461020a5780634641257d1461021257806351cff8d91461021a578063722713f714610240578063853828b61461024857610173565b8063115880861461017857806316f0115b146101925780631dd19cb4146101b65780631f1fcd51146101c05780632e1a7d4d146101c85780633e0dc34e146101e5575b600080fd5b610180610322565b60408051918252519081900360200190f35b61019a6104a9565b604080516001600160a01b039092168252519081900360200190f35b6101be6104cd565b005b61019a61067d565b6101be600480360360208110156101de57600080fd5b50356106a1565b610180610922565b6101806004803603602081101561020357600080fd5b5035610946565b61019a6109cd565b6101be6109f1565b6101be6004803603602081101561023057600080fd5b50356001600160a01b0316610b5e565b610180610dcc565b610180610de6565b61019a6110b5565b6101806110c4565b6101be6004803603602081101561027657600080fd5b50356001600160a01b0316611164565b61019a61124a565b6101be600480360360208110156102a457600080fd5b50356001600160a01b0316611259565b6101806113a4565b61019a611413565b6101be611437565b6101806115a4565b6101be600480360360608110156102ea57600080fd5b506001600160a01b038135811691602081013590911690604001356115aa565b61019a611682565b61019a611691565b61019a6116a0565b60008061032d6110c4565b90506104a361033b82610946565b61049d83610497670de0b6b3a76400006104917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1b1de66040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d60208110156103d157600080fd5b50516040805163351e7cb360e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482015230602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163351e7cb3916044808301926020929190829003018186803b15801561045f57600080fd5b505afa158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b5051906117f0565b90611852565b90611894565b906118ee565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806105675750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d602081101561055957600080fd5b50516001600160a01b031633145b806105f35750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bb57600080fd5b505afa1580156105cf573d6000803e3d6000fd5b505050506040513d60208110156105e557600080fd5b50516001600160a01b031633145b610632576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60005461067b906001600160a01b031661064a6113a4565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611930565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633148061073b5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561070357600080fd5b505afa158015610717573d6000803e3d6000fd5b505050506040513d602081101561072d57600080fd5b50516001600160a01b031633145b806107c75750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561078f57600080fd5b505afa1580156107a3573d6000803e3d6000fd5b505050506040513d60208110156107b957600080fd5b50516001600160a01b031633145b610806576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006108106113a4565b90508181101561083b5761082c61082783836118ee565b611982565b91506108388282611894565b91505b6000610845611a9c565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b15801561089657600080fd5b505afa1580156108aa573d6000803e3d6000fd5b505050506040513d60208110156108c057600080fd5b505190506001600160a01b038116610908576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b61091c6001600160a01b0383168286611930565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600454600090806109545750425b600061097d62093a8061049161096a42866118ee565b6109776103e860646118ee565b906117f0565b905061098c6103e860646118ee565b8111156109a3576109a06103e860646118ee565b90505b60006109b16103e8836118ee565b90506109c4620186a061049187846117f0565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331480610a8b5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5357600080fd5b505afa158015610a67573d6000803e3d6000fd5b505050506040513d6020811015610a7d57600080fd5b50516001600160a01b031633145b80610b175750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610adf57600080fd5b505afa158015610af3573d6000803e3d6000fd5b505050506040513d6020811015610b0957600080fd5b50516001600160a01b031633145b610b56576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b61067b611afd565b6000546001600160a01b0316331480610bf85750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc057600080fd5b505afa158015610bd4573d6000803e3d6000fd5b505050506040513d6020811015610bea57600080fd5b50516001600160a01b031633145b80610c845750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b50516001600160a01b031633145b610cc3576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610d33576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d6020811015610da857600080fd5b5051600054909150610dc7906001600160a01b03848116911683611930565b505050565b6000610de1610dd9610322565b6104976113a4565b905090565b600080546001600160a01b0316331480610e815750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4957600080fd5b505afa158015610e5d573d6000803e3d6000fd5b505050506040513d6020811015610e7357600080fd5b50516001600160a01b031633145b80610f0d5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed557600080fd5b505afa158015610ee9573d6000803e3d6000fd5b505050506040513d6020811015610eff57600080fd5b50516001600160a01b031633145b610f4c576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610f54611c31565b6000610f5e611a9c565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610fad57600080fd5b505afa158015610fc1573d6000803e3d6000fd5b505050506040513d6020811015610fd757600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b505190506001600160a01b03811661109c576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6110b06001600160a01b0383168285611930565b505090565b6001546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d602081101561115d57600080fd5b5051905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d60208110156111dc57600080fd5b50516001600160a01b03163314611228576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d60208110156112d157600080fd5b50516001600160a01b0316331461131d576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b038381169190911790915561136b907f0000000000000000000000000000000000000000000000000000000000000000168260006116c4565b6113a16001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000196116c4565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561113357600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806114d15750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561149957600080fd5b505afa1580156114ad573d6000803e3d6000fd5b505050506040513d60208110156114c357600080fd5b50516001600160a01b031633145b8061155d5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561152557600080fd5b505afa158015611539573d6000803e3d6000fd5b505050506040513d602081101561154f57600080fd5b50516001600160a01b031633145b61159c576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b61067b611e61565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115f857600080fd5b505afa15801561160c573d6000803e3d6000fd5b505050506040513d602081101561162257600080fd5b50516001600160a01b0316331461166e576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610dc76001600160a01b03841683836116c4565b6000546001600160a01b031681565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b80158061174a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561171c57600080fd5b505afa158015611730573d6000803e3d6000fd5b505050506040513d602081101561174657600080fd5b5051155b6117855760405162461bcd60e51b8152600401808060200182810382526036815260200180612d4e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610dc7908490611fb2565b60606117e68484600085612063565b90505b9392505050565b6000826117ff5750600061184c565b8282028284828161180c57fe5b04146118495760405162461bcd60e51b8152600401808060200182810382526021815260200180612d036021913960400191505060405180910390fd5b90505b92915050565b600061184983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506121bf565b600082820183811015611849576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061184983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612261565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610dc7908490611fb2565b60008061198d611a9c565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156119de57600080fd5b505afa1580156119f2573d6000803e3d6000fd5b505050506040513d6020811015611a0857600080fd5b50519050611a15846122bb565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a6457600080fd5b505afa158015611a78573d6000803e3d6000fd5b505050506040513d6020811015611a8e57600080fd5b505190506109c481836118ee565b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b158015611ae957600080fd5b505af1158015611147573d6000803e3d6000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631c4b774b7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611b8357600080fd5b505af1158015611b97573d6000803e3d6000fd5b505050506000611bc67f00000000000000000000000000000000000000000000000000000000000000006124e1565b905080156113a157611c197f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836129bd565b6000611c236113a4565b11156113a1576113a1611e61565b6040805163351e7cb360e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482015230602482015290516000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163351e7cb391604480820192602092909190829003018186803b158015611cc157600080fd5b505afa158015611cd5573d6000803e3d6000fd5b505050506040513d6020811015611ceb57600080fd5b505160408051632af9cc4160e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526024810183905290519192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632af9cc419160448082019260009290919082900301818387803b158015611d7f57600080fd5b505af1158015611d93573d6000803e3d6000fd5b50505050611d9f6110c4565b905080156113a1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db006a75826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b50505050611e2d6113a4565b90506113a17f0000000000000000000000000000000000000000000000000000000000000000611e5b611a9c565b83612b00565b6000611e6b6113a4565b90508015611ef957426004819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b6b55f25826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611ee057600080fd5b505af1158015611ef4573d6000803e3d6000fd5b505050505b611f016110c4565b905080156113a1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2bbb1587f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015611f9757600080fd5b505af1158015611fab573d6000803e3d6000fd5b5050505050565b6060612007826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117d79092919063ffffffff16565b805190915015610dc75780806020019051602081101561202657600080fd5b5051610dc75760405162461bcd60e51b815260040180806020018281038252602a815260200180612d24602a913960400191505060405180910390fd5b6060824710156120a45760405162461bcd60e51b8152600401808060200182810382526026815260200180612cdd6026913960400191505060405180910390fd5b6120ad85612c70565b6120fe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061213d5780518252601f19909201916020918201910161211e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461219f576040519150601f19603f3d011682016040523d82523d6000602084013e6121a4565b606091505b50915091506121b4828286612c76565b979650505050505050565b6000818361224b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122105781810151838201526020016121f8565b50505050905090810190601f16801561223d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161225757fe5b0495945050505050565b600081848411156122b35760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156122105781810151838201526020016121f8565b505050900390565b6123557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1b1de66040518163ffffffff1660e01b815260040160206040518083038186803b15801561231757600080fd5b505afa15801561232b573d6000803e3d6000fd5b505050506040513d602081101561234157600080fd5b505161049183670de0b6b3a76400006117f0565b905060006123616110c4565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663441a3e707f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b5050505060006124136110c4565b905061241f81836118ee565b92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db006a75846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561248757600080fd5b505af115801561249b573d6000803e3d6000fd5b505050506124a76113a4565b92508215610dc757610dc77f00000000000000000000000000000000000000000000000000000000000000006124db611a9c565b85612b00565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d602081101561255b57600080fd5b5051905061258a837f0000000000000000000000000000000000000000000000000000000000000000836129bd565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156125f057600080fd5b505afa158015612604573d6000803e3d6000fd5b505050506040513d602081101561261a57600080fd5b5051915081156129b7576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b15801561267d57600080fd5b505afa158015612691573d6000803e3d6000fd5b505050506040513d60e08110156126a757600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a50909850965094509092509050600085158015906126f457506001600160a01b03871615155b156127c4576127096127106104918c896117f0565b90506127367f000000000000000000000000000000000000000000000000000000000000000089836129bd565b6127c487896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561278757600080fd5b505afa15801561279b573d6000803e3d6000fd5b505050506040513d60208110156127b157600080fd5b50516001600160a01b038b169190611930565b6000841180156127dc57506001600160a01b03851615155b1561286f576127f16127106104918c876117f0565b905061281e7f000000000000000000000000000000000000000000000000000000000000000089836129bd565b61286f85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561278757600080fd5b60008211801561288757506001600160a01b03831615155b1561291a5761289c6127106104918c856117f0565b90506128c97f000000000000000000000000000000000000000000000000000000000000000089836129bd565b61291a83896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561278757600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561298057600080fd5b505afa158015612994573d6000803e3d6000fd5b505050506040513d60208110156129aa57600080fd5b5051995050505050505050505b50919050565b604080516002808252606080830184529260208301908036833701905050905083816000815181106129eb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110612a1957fe5b6001600160a01b039283166020918202929092010152600254166338ed17398360018430612a4942610708611894565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612ab9578181015183820152602001612aa1565b505050509050019650505050505050600060405180830381600087803b158015612ae257600080fd5b505af1158015612af6573d6000803e3d6000fd5b5050505050505050565b60035460408051630db3e24f60e21b81526001600160a01b038681166004830152858116602483015260448201859052915160009392909216916336cf893c91606480820192602092909190829003018186803b158015612b6057600080fd5b505afa158015612b74573d6000803e3d6000fd5b505050506040513d6020811015612b8a57600080fd5b505111612bce576040805162461bcd60e51b815260206004820152600d60248201526c21636f6e766572745f7261746560981b604482015290519081900360640190fd5b600354612be8906001600160a01b03858116911683611930565b6003546040805163248391ff60e01b81526001600160a01b0386811660048301528581166024830152604482018590529151919092169163248391ff9160648083019260209291908290030181600087803b158015612c4657600080fd5b505af1158015612c5a573d6000803e3d6000fd5b505050506040513d6020811015611fab57600080fd5b3b151590565b60608315612c855750816117e9565b825115612c955782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156122105781810151838201526020016121f856fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220ed88e67e3d4b26b80ff4fe8e5abc9a137b36b29039305f3eb467062122b5a7bb64736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638a4adf24116100de578063ce29ee3711610097578063ef9e237911610071578063ef9e2379146102d4578063f77c47911461030a578063f887ea4014610312578063fd4c80981461031a57610173565b8063ce29ee37146102bc578063d0e30db0146102c4578063dd0081c7146102cc57610173565b80638a4adf24146102505780638ae011271461025857806392eefe9b14610260578063bd38837b14610286578063c0d786551461028e578063c1a3d44c146102b457610173565b80633ee850ff116101305780633ee850ff146101ed5780633fc8cef31461020a5780634641257d1461021257806351cff8d91461021a578063722713f714610240578063853828b61461024857610173565b8063115880861461017857806316f0115b146101925780631dd19cb4146101b65780631f1fcd51146101c05780632e1a7d4d146101c85780633e0dc34e146101e5575b600080fd5b610180610322565b60408051918252519081900360200190f35b61019a6104a9565b604080516001600160a01b039092168252519081900360200190f35b6101be6104cd565b005b61019a61067d565b6101be600480360360208110156101de57600080fd5b50356106a1565b610180610922565b6101806004803603602081101561020357600080fd5b5035610946565b61019a6109cd565b6101be6109f1565b6101be6004803603602081101561023057600080fd5b50356001600160a01b0316610b5e565b610180610dcc565b610180610de6565b61019a6110b5565b6101806110c4565b6101be6004803603602081101561027657600080fd5b50356001600160a01b0316611164565b61019a61124a565b6101be600480360360208110156102a457600080fd5b50356001600160a01b0316611259565b6101806113a4565b61019a611413565b6101be611437565b6101806115a4565b6101be600480360360608110156102ea57600080fd5b506001600160a01b038135811691602081013590911690604001356115aa565b61019a611682565b61019a611691565b61019a6116a0565b60008061032d6110c4565b90506104a361033b82610946565b61049d83610497670de0b6b3a76400006104917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1b1de66040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a757600080fd5b505afa1580156103bb573d6000803e3d6000fd5b505050506040513d60208110156103d157600080fd5b50516040805163351e7cb360e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482015230602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163351e7cb3916044808301926020929190829003018186803b15801561045f57600080fd5b505afa158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b5051906117f0565b90611852565b90611894565b906118ee565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806105675750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d602081101561055957600080fd5b50516001600160a01b031633145b806105f35750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bb57600080fd5b505afa1580156105cf573d6000803e3d6000fd5b505050506040513d60208110156105e557600080fd5b50516001600160a01b031633145b610632576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60005461067b906001600160a01b031661064a6113a4565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611930565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633148061073b5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561070357600080fd5b505afa158015610717573d6000803e3d6000fd5b505050506040513d602081101561072d57600080fd5b50516001600160a01b031633145b806107c75750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561078f57600080fd5b505afa1580156107a3573d6000803e3d6000fd5b505050506040513d60208110156107b957600080fd5b50516001600160a01b031633145b610806576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006108106113a4565b90508181101561083b5761082c61082783836118ee565b611982565b91506108388282611894565b91505b6000610845611a9c565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b15801561089657600080fd5b505afa1580156108aa573d6000803e3d6000fd5b505050506040513d60208110156108c057600080fd5b505190506001600160a01b038116610908576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b61091c6001600160a01b0383168286611930565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600454600090806109545750425b600061097d62093a8061049161096a42866118ee565b6109776103e860646118ee565b906117f0565b905061098c6103e860646118ee565b8111156109a3576109a06103e860646118ee565b90505b60006109b16103e8836118ee565b90506109c4620186a061049187846117f0565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331480610a8b5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5357600080fd5b505afa158015610a67573d6000803e3d6000fd5b505050506040513d6020811015610a7d57600080fd5b50516001600160a01b031633145b80610b175750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610adf57600080fd5b505afa158015610af3573d6000803e3d6000fd5b505050506040513d6020811015610b0957600080fd5b50516001600160a01b031633145b610b56576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b61067b611afd565b6000546001600160a01b0316331480610bf85750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc057600080fd5b505afa158015610bd4573d6000803e3d6000fd5b505050506040513d6020811015610bea57600080fd5b50516001600160a01b031633145b80610c845750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b50516001600160a01b031633145b610cc3576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610d33576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d6020811015610da857600080fd5b5051600054909150610dc7906001600160a01b03848116911683611930565b505050565b6000610de1610dd9610322565b6104976113a4565b905090565b600080546001600160a01b0316331480610e815750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4957600080fd5b505afa158015610e5d573d6000803e3d6000fd5b505050506040513d6020811015610e7357600080fd5b50516001600160a01b031633145b80610f0d5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed557600080fd5b505afa158015610ee9573d6000803e3d6000fd5b505050506040513d6020811015610eff57600080fd5b50516001600160a01b031633145b610f4c576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610f54611c31565b6000610f5e611a9c565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610fad57600080fd5b505afa158015610fc1573d6000803e3d6000fd5b505050506040513d6020811015610fd757600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d602081101561105457600080fd5b505190506001600160a01b03811661109c576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6110b06001600160a01b0383168285611930565b505090565b6001546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d602081101561115d57600080fd5b5051905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d60208110156111dc57600080fd5b50516001600160a01b03163314611228576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d60208110156112d157600080fd5b50516001600160a01b0316331461131d576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b038381169190911790915561136b907f0000000000000000000000000000000000000000000000000000000000000000168260006116c4565b6113a16001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000196116c4565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561113357600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806114d15750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561149957600080fd5b505afa1580156114ad573d6000803e3d6000fd5b505050506040513d60208110156114c357600080fd5b50516001600160a01b031633145b8061155d5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561152557600080fd5b505afa158015611539573d6000803e3d6000fd5b505050506040513d602081101561154f57600080fd5b50516001600160a01b031633145b61159c576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b61067b611e61565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115f857600080fd5b505afa15801561160c573d6000803e3d6000fd5b505050506040513d602081101561162257600080fd5b50516001600160a01b0316331461166e576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610dc76001600160a01b03841683836116c4565b6000546001600160a01b031681565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b80158061174a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561171c57600080fd5b505afa158015611730573d6000803e3d6000fd5b505050506040513d602081101561174657600080fd5b5051155b6117855760405162461bcd60e51b8152600401808060200182810382526036815260200180612d4e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610dc7908490611fb2565b60606117e68484600085612063565b90505b9392505050565b6000826117ff5750600061184c565b8282028284828161180c57fe5b04146118495760405162461bcd60e51b8152600401808060200182810382526021815260200180612d036021913960400191505060405180910390fd5b90505b92915050565b600061184983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506121bf565b600082820183811015611849576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061184983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612261565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610dc7908490611fb2565b60008061198d611a9c565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156119de57600080fd5b505afa1580156119f2573d6000803e3d6000fd5b505050506040513d6020811015611a0857600080fd5b50519050611a15846122bb565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a6457600080fd5b505afa158015611a78573d6000803e3d6000fd5b505050506040513d6020811015611a8e57600080fd5b505190506109c481836118ee565b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b158015611ae957600080fd5b505af1158015611147573d6000803e3d6000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631c4b774b7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611b8357600080fd5b505af1158015611b97573d6000803e3d6000fd5b505050506000611bc67f00000000000000000000000000000000000000000000000000000000000000006124e1565b905080156113a157611c197f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836129bd565b6000611c236113a4565b11156113a1576113a1611e61565b6040805163351e7cb360e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482015230602482015290516000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163351e7cb391604480820192602092909190829003018186803b158015611cc157600080fd5b505afa158015611cd5573d6000803e3d6000fd5b505050506040513d6020811015611ceb57600080fd5b505160408051632af9cc4160e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526024810183905290519192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632af9cc419160448082019260009290919082900301818387803b158015611d7f57600080fd5b505af1158015611d93573d6000803e3d6000fd5b50505050611d9f6110c4565b905080156113a1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db006a75826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b50505050611e2d6113a4565b90506113a17f0000000000000000000000000000000000000000000000000000000000000000611e5b611a9c565b83612b00565b6000611e6b6113a4565b90508015611ef957426004819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b6b55f25826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611ee057600080fd5b505af1158015611ef4573d6000803e3d6000fd5b505050505b611f016110c4565b905080156113a1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2bbb1587f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015611f9757600080fd5b505af1158015611fab573d6000803e3d6000fd5b5050505050565b6060612007826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117d79092919063ffffffff16565b805190915015610dc75780806020019051602081101561202657600080fd5b5051610dc75760405162461bcd60e51b815260040180806020018281038252602a815260200180612d24602a913960400191505060405180910390fd5b6060824710156120a45760405162461bcd60e51b8152600401808060200182810382526026815260200180612cdd6026913960400191505060405180910390fd5b6120ad85612c70565b6120fe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061213d5780518252601f19909201916020918201910161211e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461219f576040519150601f19603f3d011682016040523d82523d6000602084013e6121a4565b606091505b50915091506121b4828286612c76565b979650505050505050565b6000818361224b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156122105781810151838201526020016121f8565b50505050905090810190601f16801561223d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161225757fe5b0495945050505050565b600081848411156122b35760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156122105781810151838201526020016121f8565b505050900390565b6123557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1b1de66040518163ffffffff1660e01b815260040160206040518083038186803b15801561231757600080fd5b505afa15801561232b573d6000803e3d6000fd5b505050506040513d602081101561234157600080fd5b505161049183670de0b6b3a76400006117f0565b905060006123616110c4565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663441a3e707f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b5050505060006124136110c4565b905061241f81836118ee565b92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db006a75846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561248757600080fd5b505af115801561249b573d6000803e3d6000fd5b505050506124a76113a4565b92508215610dc757610dc77f00000000000000000000000000000000000000000000000000000000000000006124db611a9c565b85612b00565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d602081101561255b57600080fd5b5051905061258a837f0000000000000000000000000000000000000000000000000000000000000000836129bd565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156125f057600080fd5b505afa158015612604573d6000803e3d6000fd5b505050506040513d602081101561261a57600080fd5b5051915081156129b7576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b15801561267d57600080fd5b505afa158015612691573d6000803e3d6000fd5b505050506040513d60e08110156126a757600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a50909850965094509092509050600085158015906126f457506001600160a01b03871615155b156127c4576127096127106104918c896117f0565b90506127367f000000000000000000000000000000000000000000000000000000000000000089836129bd565b6127c487896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561278757600080fd5b505afa15801561279b573d6000803e3d6000fd5b505050506040513d60208110156127b157600080fd5b50516001600160a01b038b169190611930565b6000841180156127dc57506001600160a01b03851615155b1561286f576127f16127106104918c876117f0565b905061281e7f000000000000000000000000000000000000000000000000000000000000000089836129bd565b61286f85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561278757600080fd5b60008211801561288757506001600160a01b03831615155b1561291a5761289c6127106104918c856117f0565b90506128c97f000000000000000000000000000000000000000000000000000000000000000089836129bd565b61291a83896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561278757600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561298057600080fd5b505afa158015612994573d6000803e3d6000fd5b505050506040513d60208110156129aa57600080fd5b5051995050505050505050505b50919050565b604080516002808252606080830184529260208301908036833701905050905083816000815181106129eb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110612a1957fe5b6001600160a01b039283166020918202929092010152600254166338ed17398360018430612a4942610708611894565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612ab9578181015183820152602001612aa1565b505050509050019650505050505050600060405180830381600087803b158015612ae257600080fd5b505af1158015612af6573d6000803e3d6000fd5b5050505050505050565b60035460408051630db3e24f60e21b81526001600160a01b038681166004830152858116602483015260448201859052915160009392909216916336cf893c91606480820192602092909190829003018186803b158015612b6057600080fd5b505afa158015612b74573d6000803e3d6000fd5b505050506040513d6020811015612b8a57600080fd5b505111612bce576040805162461bcd60e51b815260206004820152600d60248201526c21636f6e766572745f7261746560981b604482015290519081900360640190fd5b600354612be8906001600160a01b03858116911683611930565b6003546040805163248391ff60e01b81526001600160a01b0386811660048301528581166024830152604482018590529151919092169163248391ff9160648083019260209291908290030181600087803b158015612c4657600080fd5b505af1158015612c5a573d6000803e3d6000fd5b505050506040513d6020811015611fab57600080fd5b3b151590565b60608315612c855750816117e9565b825115612c955782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156122105781810151838201526020016121f856fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220ed88e67e3d4b26b80ff4fe8e5abc9a137b36b29039305f3eb467062122b5a7bb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "setController(address)": {
        "params": {
          "_controller": "The address of the controller"
        }
      },
      "setRouter(address)": {
        "params": {
          "_router": "The address of the router"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest()": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setController(address)": {
        "notice": "Sets the address of the controller"
      },
      "setRouter(address)": {
        "notice": "Sets the address of the ISwap-compatible router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6798,
        "contract": "contracts/metavault/strategies/StrategyStabilize.sol:StrategyStabilize",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6800,
        "contract": "contracts/metavault/strategies/StrategyStabilize.sol:StrategyStabilize",
        "label": "vaultManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVaultManager)2082"
      },
      {
        "astId": 6802,
        "contract": "contracts/metavault/strategies/StrategyStabilize.sol:StrategyStabilize",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwap)1983"
      },
      {
        "astId": 9021,
        "contract": "contracts/metavault/strategies/StrategyStabilize.sol:StrategyStabilize",
        "label": "converter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IConverter)1737"
      },
      {
        "astId": 9023,
        "contract": "contracts/metavault/strategies/StrategyStabilize.sol:StrategyStabilize",
        "label": "depositTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IConverter)1737": {
        "encoding": "inplace",
        "label": "contract IConverter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)1983": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)2082": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}