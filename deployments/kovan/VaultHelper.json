{
  "address": "0x12C03b4Aa6B062a17828524c1B246281B877ed32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositMultipleVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f674569125e89fd16f6ce85a1a5c302b4ea8f3b2bec85c239616b87be5a11c4",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x12C03b4Aa6B062a17828524c1B246281B877ed32",
    "transactionIndex": 3,
    "gasUsed": "879083",
    "logsBloom": "0x
    "blockHash": "0x93c06294ef2a2726bbc3c721ef06f1eae47544e1224205ab2336074d85d72cea",
    "transactionHash": "0x2f674569125e89fd16f6ce85a1a5c302b4ea8f3b2bec85c239616b87be5a11c4",
    "logs": [],
    "blockNumber": 26976908,
    "cumulativeGasUsed": "1043520",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ed02ffea74d81360ebf7246e8a46eb27",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositMultipleVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract has no state and could be deployed by anyone if they didn't trust the original deployer.\",\"kind\":\"dev\",\"methods\":{\"depositMultipleVault(address,address[],uint256[])\":{\"details\":\"Users must approve the vault helper to spend their tokens\",\"params\":{\"_amounts\":\"The amounts of each token being deposited\",\"_tokens\":\"The addresses of each token being deposited\",\"_vault\":\"The address of the vault\"}},\"depositVault(address,address,uint256)\":{\"details\":\"Users must approve the vault helper to spend their token\",\"params\":{\"_amount\":\"The amount of tokens to deposit\",\"_token\":\"The address of the token\",\"_vault\":\"The address of the vault\"}}},\"title\":\"VaultHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositMultipleVault(address,address[],uint256[])\":{\"notice\":\"Deposits multiple tokens simultaneously to the specified vault\"},\"depositVault(address,address,uint256)\":{\"notice\":\"Deposits the given token into the specified vault\"}},\"notice\":\"The VaultHelper acts as a single contract that users may set token approvals on for any token of any vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/VaultHelper.sol\":\"VaultHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/v3/VaultHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ILiquidityGaugeV2.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\n/**\\n * @title VaultHelper\\n * @notice The VaultHelper acts as a single contract that users may set\\n * token approvals on for any token of any vault.\\n * @dev This contract has no state and could be deployed by anyone if\\n * they didn't trust the original deployer.\\n */\\ncontract VaultHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Deposits the given token into the specified vault\\n     * @dev Users must approve the vault helper to spend their token\\n     * @param _vault The address of the vault\\n     * @param _token The address of the token\\n     * @param _amount The amount of tokens to deposit\\n     */\\n    function depositVault(\\n        address _vault,\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n    {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        IERC20(_token).safeApprove(_vault, 0);\\n        IERC20(_token).safeApprove(_vault, _amount);\\n        uint256 _shares = IVault(_vault).deposit(_token, _amount);\\n        address _gauge = IVault(_vault).gauge();\\n        if (_gauge != address(0)) {\\n            IERC20(_vault).safeApprove(_gauge, 0);\\n            IERC20(_vault).safeApprove(_gauge, _shares);\\n            ILiquidityGaugeV2(_gauge).deposit(_shares);\\n            IERC20(_gauge).safeTransfer(msg.sender, _shares);\\n        } else {\\n            IERC20(_vault).safeTransfer(msg.sender, _shares);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposits multiple tokens simultaneously to the specified vault\\n     * @dev Users must approve the vault helper to spend their tokens\\n     * @param _vault The address of the vault\\n     * @param _tokens The addresses of each token being deposited\\n     * @param _amounts The amounts of each token being deposited\\n     */\\n    function depositMultipleVault(\\n        address _vault,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts\\n    )\\n        external\\n    {\\n        for (uint8 i = 0; i < _amounts.length; i++) {\\n            IERC20(_tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);\\n            IERC20(_tokens[i]).safeApprove(_vault, 0);\\n            IERC20(_tokens[i]).safeApprove(_vault, _amounts[i]);\\n        }\\n        uint256 _shares = IVault(_vault).depositMultiple(_tokens, _amounts);\\n        address _gauge = IVault(_vault).gauge();\\n        if (_gauge != address(0)) {\\n            IERC20(_vault).safeApprove(_gauge, 0);\\n            IERC20(_vault).safeApprove(_gauge, _shares);\\n            ILiquidityGaugeV2(_gauge).deposit(_shares);\\n            IERC20(_gauge).safeTransfer(msg.sender, _shares);\\n        } else {\\n            IERC20(_vault).safeTransfer(msg.sender, _shares);\\n        }\\n    }\\n\\n    function withdrawVault(\\n        address _vault,\\n        address _toToken,\\n        uint256 _amount\\n    )\\n        external\\n    {\\n        address _gauge = IVault(_vault).gauge();\\n        if (_gauge != address(0)) {\\n            IERC20(_gauge).safeTransferFrom(msg.sender, address(this), _amount);\\n            ILiquidityGaugeV2(_gauge).withdraw(_amount);\\n            IVault(_vault).withdraw(IERC20(_vault).balanceOf(address(this)), _toToken);\\n            IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)));\\n        } else {\\n            IERC20(_vault).safeTransferFrom(msg.sender, address(this), _amount);\\n            IVault(_vault).withdraw(_amount, _toToken);\\n            IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabce080f77fcf17faf4455441f11389822133d1c1b164d3ded25e262df301c08\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ILiquidityGaugeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ILiquidityGaugeV2 {\\n    function set_approve_deposit(address, bool) external;\\n    function deposit(uint256) external;\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x4933e4af5df536932a186101aff95aedf87bf6b3e9201a7a00d53f6267656140\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addToken(address, address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedTokens(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getTokens(address) external view returns (address[] memory);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeToken(address, address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function tokens(address, uint256) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (address);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x278428801b8a42fabc2ca66d14e1243163690478c913a0419cfd21df1a384be2\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IVault {\\n    function available(address _token) external view returns (uint256);\\n    function balance() external view returns (uint256);\\n    function deposit(address _token, uint256 _amount) external returns (uint256);\\n    function depositMultiple(address[] calldata _tokens, uint256[] calldata _amount) external returns (uint256);\\n    function earn(address _token, address _strategy) external;\\n    function gauge() external returns (address);\\n    function getPricePerFullShare() external view returns (uint256);\\n    function getTokens() external view returns (address[] memory);\\n    function manager() external view returns (IManager);\\n    function withdraw(uint256 _amount, address _output) external;\\n    function withdrawAll(address _output) external;\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41f449f31aca061e89e21897e2b9a529fecaba38a6e4f2c3b277573762f76308\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ef2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806307ca53191461004657806374a626521461007e578063fa9a1a0414610150575b600080fd5b61007c6004803603606081101561005c57600080fd5b506001600160a01b03813581169160208101359091169060400135610186565b005b61007c6004803603606081101561009457600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100bf57600080fd5b8201836020820111156100d157600080fd5b803590602001918460208302840111640100000000831117156100f357600080fd5b91939092909160208101903564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184602083028401116401000000008311171561014557600080fd5b5090925090506104be565b61007c6004803603606081101561016657600080fd5b506001600160a01b038135811691602081013590911690604001356107a3565b6000836001600160a01b031663a6f19c846040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d60208110156101ed57600080fd5b505190506001600160a01b038116156103e4576102156001600160a01b0382163330856109a6565b806001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b038816935062f714ce925083916370a08231916024808301926020929190829003018186803b1580156102c057600080fd5b505afa1580156102d4573d6000803e3d6000fd5b505050506040513d60208110156102ea57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b038716602483015251604480830192600092919082900301818387803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050506103df33846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b50516001600160a01b0386169190610a00565b6104b8565b6103f96001600160a01b0385163330856109a6565b836001600160a01b031662f714ce83856040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505050506104b833846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103a257600080fd5b50505050565b60005b60ff811682111561058d5761051f333085858560ff168181106104e057fe5b9050602002013588888660ff168181106104f657fe5b905060200201356001600160a01b03166001600160a01b03166109a6909392919063ffffffff16565b61055c86600087878560ff1681811061053457fe5b905060200201356001600160a01b03166001600160a01b0316610a579092919063ffffffff16565b6105858684848460ff1681811061056f57fe5b9050602002013587878560ff1681811061053457fe5b6001016104c1565b506000856001600160a01b031663797e566c868686866040518563ffffffff1660e01b81526004018080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509650505050505050602060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b505050506040513d602081101561065f57600080fd5b5051604080516329bc672160e21b815290519192506000916001600160a01b0389169163a6f19c8491600480830192602092919082900301818787803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050506040513d60208110156106d257600080fd5b505190506001600160a01b03811615610786576106fa6001600160a01b038816826000610a57565b61070e6001600160a01b0388168284610a57565b806001600160a01b031663b6b55f25836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b50610781925050506001600160a01b0382163384610a00565b61079a565b61079a6001600160a01b0388163384610a00565b50505050505050565b6107b86001600160a01b0383163330846109a6565b6107cd6001600160a01b038316846000610a57565b6107e16001600160a01b0383168483610a57565b6000836001600160a01b03166347e7ef2484846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d602081101561086457600080fd5b5051604080516329bc672160e21b815290519192506000916001600160a01b0387169163a6f19c8491600480830192602092919082900301818787803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050506040513d60208110156108d757600080fd5b505190506001600160a01b0381161561098b576108ff6001600160a01b038616826000610a57565b6109136001600160a01b0386168284610a57565b806001600160a01b031663b6b55f25836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b50610986925050506001600160a01b0382163384610a00565b61099f565b61099f6001600160a01b0386163384610a00565b5050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526104b8908590610b66565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a52908490610b66565b505050565b801580610add575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610aaf57600080fd5b505afa158015610ac3573d6000803e3d6000fd5b505050506040513d6020811015610ad957600080fd5b5051155b610b185760405162461bcd60e51b8152600401808060200182810382526036815260200180610e876036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610a529084905b6060610bbb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c179092919063ffffffff16565b805190915015610a5257808060200190516020811015610bda57600080fd5b5051610a525760405162461bcd60e51b815260040180806020018281038252602a815260200180610e5d602a913960400191505060405180910390fd5b6060610c268484600085610c30565b90505b9392505050565b606082471015610c715760405162461bcd60e51b8152600401808060200182810382526026815260200180610e376026913960400191505060405180910390fd5b610c7a85610d8c565b610ccb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610d0a5780518252601f199092019160209182019101610ceb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610d6c576040519150601f19603f3d011682016040523d82523d6000602084013e610d71565b606091505b5091509150610d81828286610d92565b979650505050505050565b3b151590565b60608315610da1575081610c29565b825115610db15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dfb578181015183820152602001610de3565b50505050905090810190601f168015610e285780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212208516c8024397c5fe1bc49059abadfcccc77b7a4f6c7337d42e5050c1278fa92d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806307ca53191461004657806374a626521461007e578063fa9a1a0414610150575b600080fd5b61007c6004803603606081101561005c57600080fd5b506001600160a01b03813581169160208101359091169060400135610186565b005b61007c6004803603606081101561009457600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100bf57600080fd5b8201836020820111156100d157600080fd5b803590602001918460208302840111640100000000831117156100f357600080fd5b91939092909160208101903564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184602083028401116401000000008311171561014557600080fd5b5090925090506104be565b61007c6004803603606081101561016657600080fd5b506001600160a01b038135811691602081013590911690604001356107a3565b6000836001600160a01b031663a6f19c846040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d60208110156101ed57600080fd5b505190506001600160a01b038116156103e4576102156001600160a01b0382163330856109a6565b806001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b038816935062f714ce925083916370a08231916024808301926020929190829003018186803b1580156102c057600080fd5b505afa1580156102d4573d6000803e3d6000fd5b505050506040513d60208110156102ea57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b038716602483015251604480830192600092919082900301818387803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050506103df33846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b50516001600160a01b0386169190610a00565b6104b8565b6103f96001600160a01b0385163330856109a6565b836001600160a01b031662f714ce83856040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505050506104b833846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103a257600080fd5b50505050565b60005b60ff811682111561058d5761051f333085858560ff168181106104e057fe5b9050602002013588888660ff168181106104f657fe5b905060200201356001600160a01b03166001600160a01b03166109a6909392919063ffffffff16565b61055c86600087878560ff1681811061053457fe5b905060200201356001600160a01b03166001600160a01b0316610a579092919063ffffffff16565b6105858684848460ff1681811061056f57fe5b9050602002013587878560ff1681811061053457fe5b6001016104c1565b506000856001600160a01b031663797e566c868686866040518563ffffffff1660e01b81526004018080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509650505050505050602060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b505050506040513d602081101561065f57600080fd5b5051604080516329bc672160e21b815290519192506000916001600160a01b0389169163a6f19c8491600480830192602092919082900301818787803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050506040513d60208110156106d257600080fd5b505190506001600160a01b03811615610786576106fa6001600160a01b038816826000610a57565b61070e6001600160a01b0388168284610a57565b806001600160a01b031663b6b55f25836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b50610781925050506001600160a01b0382163384610a00565b61079a565b61079a6001600160a01b0388163384610a00565b50505050505050565b6107b86001600160a01b0383163330846109a6565b6107cd6001600160a01b038316846000610a57565b6107e16001600160a01b0383168483610a57565b6000836001600160a01b03166347e7ef2484846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b505050506040513d602081101561086457600080fd5b5051604080516329bc672160e21b815290519192506000916001600160a01b0387169163a6f19c8491600480830192602092919082900301818787803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050506040513d60208110156108d757600080fd5b505190506001600160a01b0381161561098b576108ff6001600160a01b038616826000610a57565b6109136001600160a01b0386168284610a57565b806001600160a01b031663b6b55f25836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b50610986925050506001600160a01b0382163384610a00565b61099f565b61099f6001600160a01b0386163384610a00565b5050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526104b8908590610b66565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a52908490610b66565b505050565b801580610add575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610aaf57600080fd5b505afa158015610ac3573d6000803e3d6000fd5b505050506040513d6020811015610ad957600080fd5b5051155b610b185760405162461bcd60e51b8152600401808060200182810382526036815260200180610e876036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610a529084905b6060610bbb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c179092919063ffffffff16565b805190915015610a5257808060200190516020811015610bda57600080fd5b5051610a525760405162461bcd60e51b815260040180806020018281038252602a815260200180610e5d602a913960400191505060405180910390fd5b6060610c268484600085610c30565b90505b9392505050565b606082471015610c715760405162461bcd60e51b8152600401808060200182810382526026815260200180610e376026913960400191505060405180910390fd5b610c7a85610d8c565b610ccb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610d0a5780518252601f199092019160209182019101610ceb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610d6c576040519150601f19603f3d011682016040523d82523d6000602084013e610d71565b606091505b5091509150610d81828286610d92565b979650505050505050565b3b151590565b60608315610da1575081610c29565b825115610db15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dfb578181015183820152602001610de3565b50505050905090810190601f168015610e285780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212208516c8024397c5fe1bc49059abadfcccc77b7a4f6c7337d42e5050c1278fa92d64736f6c634300060c0033",
  "devdoc": {
    "details": "This contract has no state and could be deployed by anyone if they didn't trust the original deployer.",
    "kind": "dev",
    "methods": {
      "depositMultipleVault(address,address[],uint256[])": {
        "details": "Users must approve the vault helper to spend their tokens",
        "params": {
          "_amounts": "The amounts of each token being deposited",
          "_tokens": "The addresses of each token being deposited",
          "_vault": "The address of the vault"
        }
      },
      "depositVault(address,address,uint256)": {
        "details": "Users must approve the vault helper to spend their token",
        "params": {
          "_amount": "The amount of tokens to deposit",
          "_token": "The address of the token",
          "_vault": "The address of the vault"
        }
      }
    },
    "title": "VaultHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositMultipleVault(address,address[],uint256[])": {
        "notice": "Deposits multiple tokens simultaneously to the specified vault"
      },
      "depositVault(address,address,uint256)": {
        "notice": "Deposits the given token into the specified vault"
      }
    },
    "notice": "The VaultHelper acts as a single contract that users may set token approvals on for any token of any vault.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}