{
  "address": "0x13aC0d61B4bf1b527e4f79A9c19205676e784c85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_metavault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Earn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "converter",
      "outputs": [
        {
          "internalType": "contract IConverter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        }
      ],
      "name": "legacyDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metavault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "recoverUnsupportedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_converter",
          "type": "address"
        }
      ],
      "name": "setConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_investEnabled",
          "type": "bool"
        }
      ],
      "name": "setInvestEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b1a524096a20f37520fb7689ee8d13c59f446bc9a1fa2b74266d447a7d99aad",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x13aC0d61B4bf1b527e4f79A9c19205676e784c85",
    "transactionIndex": 5,
    "gasUsed": "1777724",
    "logsBloom": "0x
    "blockHash": "0x263c0d1afb7d9d197bd4f02a2531046a3ed931a5c390f544ec8bf7505c58d097",
    "transactionHash": "0x1b1a524096a20f37520fb7689ee8d13c59f446bc9a1fa2b74266d447a7d99aad",
    "logs": [],
    "blockNumber": 26168532,
    "cumulativeGasUsed": "4464141",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD18Fe933E6D03D707Cd5e755cBdC1251e8437095",
    "0x2Cd88D0b4b13f80bE6d18Aeb313F3bb94F9b3a49"
  ],
  "solcInputHash": "f68ee801279c5730ebe336840450dfbc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metavault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"}],\"name\":\"legacyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metavault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"recoverUnsupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investEnabled\",\"type\":\"bool\"}],\"name\":\"setInvestEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_manager\":\"The vault manager contract\",\"_metavault\":\"The legacy MetaVault contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/controllers/LegacyController.sol\":\"LegacyController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/v3/controllers/LegacyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IConverter.sol\\\";\\nimport \\\"../interfaces/ILegacyController.sol\\\";\\nimport \\\"../interfaces/ILegacyVault.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\ncontract LegacyController is ILegacyController {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant MAX = 10000;\\n\\n    IManager public immutable manager;\\n    IERC20 public immutable token;\\n    address public immutable metavault;\\n\\n    bool public investEnabled;\\n    IVault public vault;\\n    IConverter public converter;\\n\\n    event Earn(uint256 amount);\\n    event Withdraw(uint256 amount);\\n\\n    /**\\n     * @param _manager The vault manager contract\\n     * @param _metavault The legacy MetaVault contract\\n     */\\n    constructor(\\n        address _manager,\\n        address _metavault\\n    )\\n        public\\n    {\\n        manager = IManager(_manager);\\n        metavault = _metavault;\\n        address _token = ILegacyVault(_metavault).want();\\n        token = IERC20(_token);\\n    }\\n\\n    function setVault(\\n        address _vault\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        if (address(vault) != address(0)) {\\n            vault.withdrawAll(address(token));\\n            token.safeTransfer(metavault, token.balanceOf(address(this)));\\n        }\\n        vault = IVault(_vault);\\n    }\\n\\n    function setConverter(\\n        address _converter\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        converter = IConverter(_converter);\\n    }\\n\\n    function setInvestEnabled(\\n        bool _investEnabled\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        investEnabled = _investEnabled;\\n    }\\n\\n    function recoverUnsupportedToken(\\n        address _token,\\n        address _receiver\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        require(_token != address(token), \\\"!_token\\\");\\n        IERC20(_token).safeTransfer(_receiver, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    function balanceOf(\\n        address _token\\n    )\\n        external\\n        view\\n        onlyToken(_token)\\n        returns (uint256)\\n    {\\n        return token.balanceOf(address(this))\\n                    .add(IERC20(address(vault)).balanceOf(address(this)));\\n    }\\n\\n    function withdrawFee(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        onlyToken(_token)\\n        returns (uint256)\\n    {\\n        return manager.withdrawalProtectionFee().mul(_amount).div(MAX);\\n    }\\n\\n    function withdraw(\\n        address,\\n        uint256 _amount\\n    )\\n        external\\n        onlyEnabledVault\\n        onlyMetaVault\\n    {\\n        uint256 _balance = token.balanceOf(address(this));\\n        // happy path exits without calling back to the vault\\n        if (_balance >= _amount) {\\n            token.safeTransfer(metavault, _amount);\\n        } else {\\n            uint256 _toWithdraw = _amount.sub(_balance);\\n            // convert to vault shares\\n            address[] memory _tokens = vault.getTokens();\\n            require(_tokens.length > 0, \\\"!_tokens\\\");\\n            // get the amount of the token that we would be withdrawing\\n            uint256 _expected = converter.expected(address(token), _tokens[0], _toWithdraw);\\n            uint256 _shares = _expected.mul(1e18).div(vault.getPricePerFullShare());\\n            vault.withdraw(_shares, _tokens[0]);\\n            _balance = IERC20(_tokens[0]).balanceOf(address(this));\\n            IERC20(_tokens[0]).safeTransfer(address(converter), _balance);\\n            // TODO: calculate expected\\n            converter.convert(_tokens[0], address(token), _balance, 1);\\n            token.safeTransfer(metavault, token.balanceOf(address(this)));\\n        }\\n        emit Withdraw(_amount);\\n    }\\n\\n    function earn(\\n        address,\\n        uint256 _amount\\n    )\\n        external\\n        onlyMetaVault\\n    {\\n        emit Earn(_amount);\\n    }\\n\\n    function legacyDeposit(\\n        address _toToken,\\n        uint256 _expected\\n    )\\n        external\\n        override\\n        onlyEnabledConverter\\n        onlyHarvester\\n    {\\n        if (_toToken != address(token)) {\\n            uint256 _amount = token.balanceOf(address(this));\\n            token.safeTransfer(address(converter), _amount);\\n            converter.convert(address(token), _toToken, _amount, _expected);\\n        }\\n        IERC20(_toToken).safeApprove(address(vault), 0);\\n        IERC20(_toToken).safeApprove(address(vault), type(uint256).max);\\n        vault.deposit(_toToken, IERC20(_toToken).balanceOf(address(this)));\\n    }\\n\\n    modifier onlyEnabledConverter() {\\n        require(address(converter) != address(0), \\\"!converter\\\");\\n        _;\\n    }\\n\\n    modifier onlyEnabledVault() {\\n        require(address(vault) != address(0), \\\"!vault\\\");\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        require(msg.sender == manager.harvester(), \\\"!harvester\\\");\\n        _;\\n    }\\n\\n    modifier onlyMetaVault() {\\n        require(msg.sender == metavault, \\\"!metavault\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken(address _token) {\\n        require(_token == address(token), \\\"!_token\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xecc6fdb2eb055f73d7219da04ce5e463ef3ecbcefa5e5bd22f380f785e1ecb6e\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256 _estimatedWETH, uint256 _estimatedYAXIS) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\",\"keccak256\":\"0x7cf6dd59e7aa05895b7682bf59c96918b9d5baf529d839472b475f9119ba50c9\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IConverter {\\n    function manager() external view returns (IManager);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount,\\n        uint256 _estimatedOutput\\n    ) external returns (uint256 _outputAmount);\\n    function expected(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external view returns (uint256 _outputAmount);\\n}\\n\",\"keccak256\":\"0x6969eecc0d8f1497daf53f2641089dc3d36d7a057b959815b1b565e5b88b8d55\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ILegacyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ILegacyController {\\n    function legacyDeposit(address _token, uint256 _expected) external;\\n}\\n\",\"keccak256\":\"0x6c6f97db6e11c15b4243e684a13f65346f19d486035d6db9c7106bd772f46482\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ILegacyVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ILegacyVault {\\n    function want() external returns (address);\\n}\\n\",\"keccak256\":\"0x6f5f842a9b0ba0168bbeab8cdf4ae391ee058653a88eff4d1bc49addfe5852a8\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addToken(address, address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedTokens(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getTokens(address) external view returns (address[] memory);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeToken(address, address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function tokens(address, uint256) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (address);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x278428801b8a42fabc2ca66d14e1243163690478c913a0419cfd21df1a384be2\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IVault {\\n    function available(address _token) external view returns (uint256);\\n    function balance() external view returns (uint256);\\n    function deposit(address _token, uint256 _amount) external;\\n    function depositMultiple(address[] calldata _tokens, uint256[] calldata _amount) external;\\n    function earn(address _token, address _strategy) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n    function getTokens() external view returns (address[] memory);\\n    function manager() external view returns (IManager);\\n    function withdraw(uint256 _amount, address _output) external;\\n    function withdrawAll(address _output) external;\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x079d77a4cabf19780966013faa54a48e44685b208481e38cdd7d66b5683d4c3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063b19337a411610097578063f3fef3a311610066578063f3fef3a314610288578063fbfa77cf146102b4578063fc0c546a146102bc578063fd9be522146102c457610100565b8063b19337a41461024a578063bad0a7fd14610270578063bd38837b14610278578063d49d51811461028057610100565b80638fc1ea1e116100d35780638fc1ea1e146101a55780639246ce41146101c4578063940a4584146101f0578063b02bf4b91461021e57610100565b8063481c6a75146101055780636817031b1461012957806370a082311461015157806371f4f3fb14610189575b600080fd5b61010d6102f0565b604080516001600160a01b039092168252519081900360200190f35b61014f6004803603602081101561013f57600080fd5b50356001600160a01b0316610314565b005b6101776004803603602081101561016757600080fd5b50356001600160a01b0316610596565b60408051918252519081900360200190f35b610191610725565b604080519115158252519081900360200190f35b61014f600480360360208110156101bb57600080fd5b5035151561072e565b61014f600480360360408110156101da57600080fd5b506001600160a01b038135169060200135610810565b61014f6004803603604081101561020657600080fd5b506001600160a01b0381358116916020013516610c1f565b61014f6004803603604081101561023457600080fd5b506001600160a01b038135169060200135610df1565b61014f6004803603602081101561026057600080fd5b50356001600160a01b0316610e92565b61010d610f83565b61010d610fa7565b610177610fb6565b61014f6004803603604081101561029e57600080fd5b506001600160a01b038135169060200135610fbc565b61010d611746565b61010d61175a565b610177600480360360408110156102da57600080fd5b506001600160a01b03813516906020013561177e565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561036d57600080fd5b505afa158015610381573d6000803e3d6000fd5b505050506040513d602081101561039757600080fd5b50516001600160a01b031633146103e3576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b60005461010090046001600160a01b03161561056e576000805460408051630fa09e6360e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291516101009093049091169263fa09e6309260248084019382900301818387803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b5050505061056e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561051157600080fd5b505afa158015610525573d6000803e3d6000fd5b505050506040513d602081101561053b57600080fd5b50516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061188e565b600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610609576040805162461bcd60e51b815260206004820152600760248201526610afba37b5b2b760c91b604482015290519081900360640190fd5b600054604080516370a0823160e01b8152306004820152905161071e9261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561065a57600080fd5b505afa15801561066e573d6000803e3d6000fd5b505050506040513d602081101561068457600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156106ec57600080fd5b505afa158015610700573d6000803e3d6000fd5b505050506040513d602081101561071657600080fd5b5051906118e5565b9392505050565b60005460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d60208110156107b157600080fd5b50516001600160a01b031633146107fd576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b6001546001600160a01b031661085a576040805162461bcd60e51b815260206004820152600a60248201526910b1b7b73b32b93a32b960b11b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d60208110156108dd57600080fd5b50516001600160a01b03163314610928576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610aec5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109d057600080fd5b505afa1580156109e4573d6000803e3d6000fd5b505050506040513d60208110156109fa57600080fd5b5051600154909150610a39906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361188e565b600154604080516375892cf160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015286811660248301526044820185905260648201869052915191909216916375892cf19160848083019260209291908290030181600087803b158015610abe57600080fd5b505af1158015610ad2573d6000803e3d6000fd5b505050506040513d6020811015610ae857600080fd5b5050505b60008054610b0c916001600160a01b038581169261010090041690611948565b600054610b2d906001600160a01b0384811691610100900416600019611948565b600054604080516370a0823160e01b815230600482015290516001600160a01b036101009093048316926347e7ef24928692918316916370a0823191602480820192602092909190829003018186803b158015610b8957600080fd5b505afa158015610b9d573d6000803e3d6000fd5b505050506040513d6020811015610bb357600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b158015610c0357600080fd5b505af1158015610c17573d6000803e3d6000fd5b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7857600080fd5b505afa158015610c8c573d6000803e3d6000fd5b505050506040513d6020811015610ca257600080fd5b50516001600160a01b03163314610cee576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610d5f576040805162461bcd60e51b815260206004820152600760248201526610afba37b5b2b760c91b604482015290519081900360640190fd5b610ded81836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d6020811015610dda57600080fd5b50516001600160a01b038516919061188e565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e5b576040805162461bcd60e51b815260206004820152600a602482015269085b595d185d985d5b1d60b21b604482015290519081900360640190fd5b6040805182815290517fe9d573778e0925491fffd3b5b980fb161b898fd42d8e2dcd7c128f9de611c1bc9181900360200190a15050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d6020811015610f1557600080fd5b50516001600160a01b03163314610f61576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031681565b61271081565b60005461010090046001600160a01b0316611007576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611071576040805162461bcd60e51b815260206004820152600a602482015269085b595d185d985d5b1d60b21b604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110e057600080fd5b505afa1580156110f4573d6000803e3d6000fd5b505050506040513d602081101561110a57600080fd5b5051905081811061116e576111696001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461188e565b61170e565b600061117a8383611a5b565b90506060600060019054906101000a90046001600160a01b03166001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156111cc57600080fd5b505afa1580156111e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561120957600080fd5b810190808051604051939291908464010000000082111561122957600080fd5b90830190602082018581111561123e57600080fd5b825186602082028301116401000000008211171561125b57600080fd5b82525081516020918201928201910280838360005b83811015611288578181015183820152602001611270565b50505050905001604052505050905060008151116112d8576040805162461bcd60e51b8152602060048201526008602482015267215f746f6b656e7360c01b604482015290519081900360640190fd5b60015481516000916001600160a01b03169063717e7389907f0000000000000000000000000000000000000000000000000000000000000000908590859061131c57fe5b6020026020010151866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d60208110156113a357600080fd5b50516000805460408051631df1ee3f60e21b81529051939450919261143b926101009092046001600160a01b0316916377c7b8fc916004808301926020929190829003018186803b1580156113f757600080fd5b505afa15801561140b573d6000803e3d6000fd5b505050506040513d602081101561142157600080fd5b505161143584670de0b6b3a7640000611a9d565b90611af6565b9050600060019054906101000a90046001600160a01b03166001600160a01b031662f714ce828560008151811061146e57fe5b60200260200101516040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156114bc57600080fd5b505af11580156114d0573d6000803e3d6000fd5b50505050826000815181106114e157fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d602081101561155f57600080fd5b505160015484519196506115a6916001600160a01b03909116908790869060009061158657fe5b60200260200101516001600160a01b031661188e9092919063ffffffff16565b60015483516001600160a01b03909116906375892cf19085906000906115c857fe5b60200260200101517f00000000000000000000000000000000000000000000000000000000000000008860016040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050602060405180830381600087803b15801561165157600080fd5b505af1158015611665573d6000803e3d6000fd5b505050506040513d602081101561167b57600080fd5b5050604080516370a0823160e01b81523060048201529051611709917f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561051157600080fd5b505050505b6040805183815290517f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9181900360200190a1505050565b60005461010090046001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146117f1576040805162461bcd60e51b815260206004820152600760248201526610afba37b5b2b760c91b604482015290519081900360640190fd5b611886612710611435857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663825139096040518163ffffffff1660e01b815260040160206040518083038186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d602081101561187e57600080fd5b505190611a9d565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526118e0908490611b38565b505050565b60008282018381101561193f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b8015806119ce575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156119a057600080fd5b505afa1580156119b4573d6000803e3d6000fd5b505050506040513d60208110156119ca57600080fd5b5051155b611a095760405162461bcd60e51b8152600401808060200182810382526036815260200180611ec36036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526118e0908490611b38565b600061193f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611be9565b600082611aac57506000611942565b82820282848281611ab957fe5b041461193f5760405162461bcd60e51b8152600401808060200182810382526021815260200180611e786021913960400191505060405180910390fd5b600061193f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611c80565b6060611b8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ce59092919063ffffffff16565b8051909150156118e057808060200190516020811015611bac57600080fd5b50516118e05760405162461bcd60e51b815260040180806020018281038252602a815260200180611e99602a913960400191505060405180910390fd5b60008184841115611c785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c3d578181015183820152602001611c25565b50505050905090810190601f168015611c6a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183611ccf5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611c3d578181015183820152602001611c25565b506000838581611cdb57fe5b0495945050505050565b6060611886848460008585611cf985611e0b565b611d4a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611d895780518252601f199092019160209182019101611d6a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611deb576040519150601f19603f3d011682016040523d82523d6000602084013e611df0565b606091505b5091509150611e00828286611e11565b979650505050505050565b3b151590565b60608315611e2057508161071e565b825115611e305782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611c3d578181015183820152602001611c2556fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212202bc1472b01d31a15b0a2212c3a3e4cf3376897fc589c2b9590ed904d5d0c244964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_manager": "The vault manager contract",
          "_metavault": "The legacy MetaVault contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25391,
        "contract": "contracts/v3/controllers/LegacyController.sol:LegacyController",
        "label": "investEnabled",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25393,
        "contract": "contracts/v3/controllers/LegacyController.sol:LegacyController",
        "label": "vault",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(IVault)27199"
      },
      {
        "astId": 25395,
        "contract": "contracts/v3/controllers/LegacyController.sol:LegacyController",
        "label": "converter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IConverter)26651"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConverter)26651": {
        "encoding": "inplace",
        "label": "contract IConverter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)27199": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}