{
  "address": "0xD2c5fe04d97c8C7cea36FbB5016E934C39dCe549",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Earn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "InsuranceClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "input",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "output",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "converter",
          "type": "address"
        }
      ],
      "name": "SetConverter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "SetVaultManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy2",
          "type": "address"
        }
      ],
      "name": "StrategiesReordered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_converter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_canHarvest",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "claimInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "converters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBestStrategyEarn",
      "outputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBestStrategyWithdraw",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "getCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalInvestEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "harvestStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "inCaseStrategyGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy2",
          "type": "address"
        }
      ],
      "name": "reorderStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_converter",
          "type": "address"
        }
      ],
      "name": "setConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_investEnabled",
          "type": "bool"
        }
      ],
      "name": "setInvestEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxStrategies",
          "type": "uint256"
        }
      ],
      "name": "setMaxStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "setVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0fd035cf8e5ea47d4364a7d3c8d85e07c952a6e1755d0563bde563bd9e9863c",
  "receipt": {
    "to": null,
    "from": "0x65F84A48e640a908d0DF7B6f00B871352F77022D",
    "contractAddress": "0xD2c5fe04d97c8C7cea36FbB5016E934C39dCe549",
    "transactionIndex": 121,
    "gasUsed": "3445471",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa7bb977efe52d2d6dca7b39081cb7e0856cc02b6993d50bf82c262331e25550d",
    "transactionHash": "0xf0fd035cf8e5ea47d4364a7d3c8d85e07c952a6e1755d0563bde563bd9e9863c",
    "logs": [],
    "blockNumber": 11901661,
    "cumulativeGasUsed": "8536682",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe3d32C20Be68e6189a52f60148c850dF7A2Bb5DD"
  ],
  "solcInputHash": "3de2fa958fb77ce58b6c702d42713fa5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"InsuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"SetConverter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"SetVaultManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy2\",\"type\":\"address\"}],\"name\":\"StrategiesReordered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canHarvest\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"claimInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"converters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBestStrategyEarn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBestStrategyWithdraw\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalInvestEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseStrategyGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy2\",\"type\":\"address\"}],\"name\":\"reorderStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investEnabled\",\"type\":\"bool\"}],\"name\":\"setInvestEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStrategies\",\"type\":\"uint256\"}],\"name\":\"setMaxStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"setVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStrategy(address,address,uint256,address,bool,uint256)\":{\"details\":\"Only callable by governance\",\"params\":{\"_canHarvest\":\"Flag for whether the strategy can be harvested\",\"_cap\":\"The cap of the strategy\",\"_converter\":\"The converter of the strategy (can be zero address)\",\"_strategy\":\"The address of the strategy\",\"_timeout\":\"The timeout between harvests\",\"_token\":\"The address of the token\"}},\"balanceOf(address)\":{\"details\":\"This function would make deposits more expensive for the more strategies that are added for a given token\",\"params\":{\"_token\":\"The address of the token\"}},\"claimInsurance(address)\":{\"details\":\"Only callable by governanceWhen insurance is claimed by the controller, the insurance fund of the vault is zeroed out, increasing the getPricePerFullShare and applying the gains to everyone in the vault.\",\"params\":{\"_vault\":\"The address of the vault\"}},\"constructor\":{\"params\":{\"_vaultManager\":\"The address of the vaultManager\"}},\"earn(address,uint256)\":{\"details\":\"Only callable by a vault\",\"params\":{\"_amount\":\"The amount that will be invested\",\"_token\":\"The address of the token\"}},\"getBestStrategyEarn(address,uint256)\":{\"params\":{\"_amount\":\"The amount that will be invested\",\"_token\":\"The address of the token\"}},\"getBestStrategyWithdraw(address,uint256)\":{\"details\":\"Since Solidity doesn't support dynamic arrays in memory, the returned arrays from this function will always be the same length as the amount of strategies for a token. Check that _strategies[i] != address(0) when consuming to know when to break out of the loop.\",\"params\":{\"_amount\":\"The amount that will be withdrawn\",\"_token\":\"The address of the token\"}},\"getCap(address,address)\":{\"params\":{\"_strategy\":\"The address of the strategy\",\"_token\":\"The address of the token\"}},\"harvestStrategy(address)\":{\"details\":\"Only callable by governance, the strategist, or the harvester\",\"params\":{\"_strategy\":\"The address of the strategy\"}},\"inCaseStrategyGetStuck(address,address)\":{\"details\":\"Only callable by governance or the strategist\",\"params\":{\"_strategy\":\"The address of the strategy\",\"_token\":\"The address of the token\"}},\"inCaseTokensGetStuck(address,uint256)\":{\"details\":\"Only callable by governance or the strategist\",\"params\":{\"_amount\":\"The amount that will be withdrawn\",\"_token\":\"The address of the token\"}},\"investEnabled()\":{\"details\":\"Should be called by the vault\"},\"removeStrategy(address,address,uint256)\":{\"details\":\"Only callable by governance or strategist\",\"params\":{\"_strategy\":\"The address of the strategy\",\"_timeout\":\"The timeout between harvests\",\"_token\":\"The address of the token\"}},\"reorderStrategies(address,address,address)\":{\"details\":\"Only callable by governance or strategist\",\"params\":{\"_strategy1\":\"The address of the first strategy\",\"_strategy2\":\"The address of the second strategy\",\"_token\":\"The address of the token\"}},\"setCap(address,address,uint256)\":{\"details\":\"Only callable by governance or strategistIf the balance of the strategy is greater than the new cap (except if the cap is 0), then withdraw the difference from the strategy to the vault.\",\"params\":{\"_cap\":\"The new cap of the strategy\",\"_strategy\":\"The address of the strategy\",\"_token\":\"The address of the token\"}},\"setConverter(address,address,address)\":{\"details\":\"Only callable by governance or strategist\",\"params\":{\"_converter\":\"The address of the converter\",\"_input\":\"The address of the input token\",\"_output\":\"The address of the output token\"}},\"setInvestEnabled(bool)\":{\"details\":\"Only callable by governance or strategist\",\"params\":{\"_investEnabled\":\"The new bool of the invest enabled flag\"}},\"setMaxStrategies(uint256)\":{\"details\":\"Only callable by governance or strategist\",\"params\":{\"_maxStrategies\":\"The new value of the maximum strategies\"}},\"setVault(address,address)\":{\"details\":\"Only callable by governance or strategist\",\"params\":{\"_token\":\"The address of the token\",\"_vault\":\"The address of the vault\"}},\"setVaultManager(address)\":{\"details\":\"Only callable by governance\",\"params\":{\"_vaultManager\":\"The address of the vault manager\"}},\"strategies(address)\":{\"params\":{\"_token\":\"The address of the token\"}},\"want(address)\":{\"details\":\"Since strategies can have different want tokens, default to using the want token of the vault for a given token.\",\"params\":{\"_token\":\"The address of the token\"}},\"withdraw(address,uint256)\":{\"details\":\"Only callable by a vaultIf the withdraw amount is greater than the first strategy given by getBestStrategyWithdraw, this function will loop over strategies until the requested amount is met.\",\"params\":{\"_amount\":\"The amount that will be withdrawn\",\"_token\":\"The address of the token\"}},\"withdrawAll(address)\":{\"details\":\"Only callable by governance or the strategist\",\"params\":{\"_strategy\":\"The address of the strategy\"}},\"withdrawFee(address,uint256)\":{\"params\":{\"_amount\":\"The amount that will be withdrawn\"}}},\"title\":\"StrategyControllerV2\",\"version\":1},\"userdoc\":{\"events\":{\"Earn(address)\":{\"notice\":\"Logged when earn is called for a strategy\"},\"Harvest(address)\":{\"notice\":\"Logged when harvest is called for a strategy\"},\"InsuranceClaimed(address)\":{\"notice\":\"Logged when insurance is claimed for a vault\"},\"SetConverter(address,address,address)\":{\"notice\":\"Logged when a converter is set\"},\"SetVaultManager(address)\":{\"notice\":\"Logged when a vault manager is set\"},\"StrategiesReordered(address,address,address)\":{\"notice\":\"Logged when strategies are reordered for a token\"},\"StrategyAdded(address,address,uint256)\":{\"notice\":\"Logged when a strategy is added for a token\"},\"StrategyRemoved(address,address)\":{\"notice\":\"Logged when a strategy is removed for a token\"}},\"kind\":\"user\",\"methods\":{\"addStrategy(address,address,uint256,address,bool,uint256)\":{\"notice\":\"Adds a strategy for a given token\"},\"balanceOf(address)\":{\"notice\":\"Returns the balance of the sum of all strategies for a given token\"},\"claimInsurance(address)\":{\"notice\":\"Claims the insurance fund of a vault\"},\"earn(address,uint256)\":{\"notice\":\"Invests funds into a strategy\"},\"getBestStrategyEarn(address,uint256)\":{\"notice\":\"Returns the best (optimistic) strategy for funds to be sent to with earn\"},\"getBestStrategyWithdraw(address,uint256)\":{\"notice\":\"Returns the best (optimistic) strategy for funds to be withdrawn from\"},\"getCap(address,address)\":{\"notice\":\"Returns the cap of a strategy for a given token\"},\"harvestStrategy(address)\":{\"notice\":\"Harvests the specified strategy\"},\"inCaseStrategyGetStuck(address,address)\":{\"notice\":\"Withdraws token from a strategy to governance\"},\"inCaseTokensGetStuck(address,uint256)\":{\"notice\":\"Withdraws token from the controller to governance\"},\"investEnabled()\":{\"notice\":\"Returns whether investing is enabled for the calling vault\"},\"removeStrategy(address,address,uint256)\":{\"notice\":\"Removes a strategy for a given token\"},\"reorderStrategies(address,address,address)\":{\"notice\":\"Reorders two strategies for a given token\"},\"setCap(address,address,uint256)\":{\"notice\":\"Sets/updates the cap of a strategy for a token\"},\"setConverter(address,address,address)\":{\"notice\":\"Sets/updates the converter for given input and output tokens\"},\"setInvestEnabled(bool)\":{\"notice\":\"Sets/updates the global invest enabled flag\"},\"setMaxStrategies(uint256)\":{\"notice\":\"Sets/updates the maximum number of strategies for a token\"},\"setVault(address,address)\":{\"notice\":\"Sets the address of a vault for a given token\"},\"setVaultManager(address)\":{\"notice\":\"Sets the address of the vault manager contract\"},\"strategies(address)\":{\"notice\":\"Returns all the strategies for a given token\"},\"want(address)\":{\"notice\":\"Returns the want address of a given token\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws funds from a strategy\"},\"withdrawAll(address)\":{\"notice\":\"Withdraws all funds from a strategy\"},\"withdrawFee(address,uint256)\":{\"notice\":\"Returns the fee for withdrawing a specified amount\"}},\"notice\":\"This controller allows multiple strategies to be used for a single token, and multiple tokens are supported.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/controllers/StrategyControllerV2.sol\":\"StrategyControllerV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/metavault/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x34677b3f7fc870d4738321e11c0395054e0c995100878ff628e681e41b7ce199\",\"license\":\"MIT\"},\"contracts/metavault/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n    function setStrategy(address _strategy, bool _status) external;\\n}\\n\",\"keccak256\":\"0xda45be80f9a7f2d5c36fde3ce141dbad964cf6e04b8e4c746d77d9ddc1659cab\",\"license\":\"MIT\"},\"contracts/metavault/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function removeStrategy(address, address, uint256) external;\\n}\\n\\n\",\"keccak256\":\"0x982dea367f57b3e88776e4084b7510b0b16be900f713dfb6b4be8dd9fbd0ae99\",\"license\":\"MIT\"},\"contracts/metavault/IMetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IMetaVault {\\n    function balance() external view returns (uint);\\n    function setController(address _controller) external;\\n    function claimInsurance() external;\\n    function token() external view returns (address);\\n    function available() external view returns (uint);\\n    function withdrawFee(uint _amount) external view returns (uint);\\n    function earn() external;\\n    function calc_token_amount_deposit(uint[3] calldata amounts) external view returns (uint);\\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\\n    function convert_rate(address _input, uint _amount) external view returns (uint);\\n    function deposit(uint _amount, address _input, uint _min_mint_amount, bool _isStake) external;\\n    function harvest(address reserve, uint amount) external;\\n    function withdraw(uint _shares, address _output) external;\\n    function want() external view returns (address);\\n    function getPricePerFullShare() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x6694e831055aef785b2ea8df8123f1dd549bc79ee24f0eb1538543fb79ca928e\",\"license\":\"MIT\"},\"contracts/metavault/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest() external;\\n    function name() external view returns (string memory);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\",\"keccak256\":\"0x3b480188bb0bf6cfbd36a857211239a7546ddbf28df76f1c240526182fb3dd58\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/controllers/StrategyControllerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../IController.sol\\\";\\nimport \\\"../IConverter.sol\\\";\\nimport \\\"../IHarvester.sol\\\";\\nimport \\\"../IMetaVault.sol\\\";\\nimport \\\"../IStrategy.sol\\\";\\nimport \\\"../IVaultManager.sol\\\";\\n\\n/**\\n * @title StrategyControllerV2\\n * @notice This controller allows multiple strategies to be used\\n * for a single token, and multiple tokens are supported.\\n */\\ncontract StrategyControllerV2 is IController {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool public globalInvestEnabled;\\n    uint256 public maxStrategies;\\n    IVaultManager public vaultManager;\\n\\n    struct TokenStrategy {\\n        address[] strategies;\\n        mapping(address => uint256) index;\\n        mapping(address => bool) active;\\n        mapping(address => uint256) caps;\\n    }\\n\\n    // token => (want => converter)\\n    mapping(address => mapping(address => address)) public converters;\\n    // token => TokenStrategy\\n    mapping(address => TokenStrategy) internal tokenStrategies;\\n    // strategy => token\\n    mapping(address => address) public override strategyTokens;\\n    // token => vault\\n    mapping(address => address) public override vaults;\\n    // vault => token\\n    mapping(address => address) public vaultTokens;\\n\\n    /**\\n     * @notice Logged when earn is called for a strategy\\n     */\\n    event Earn(address indexed strategy);\\n\\n    /**\\n     * @notice Logged when harvest is called for a strategy\\n     */\\n    event Harvest(address indexed strategy);\\n\\n    /**\\n     * @notice Logged when insurance is claimed for a vault\\n     */\\n    event InsuranceClaimed(address indexed vault);\\n\\n    /**\\n     * @notice Logged when a converter is set\\n     */\\n    event SetConverter(address input, address output, address converter);\\n\\n    /**\\n     * @notice Logged when a vault manager is set\\n     */\\n    event SetVaultManager(address vaultManager);\\n\\n    /**\\n     * @notice Logged when a strategy is added for a token\\n     */\\n    event StrategyAdded(address indexed token, address indexed strategy, uint256 cap);\\n\\n    /**\\n     * @notice Logged when a strategy is removed for a token\\n     */\\n    event StrategyRemoved(address indexed token, address indexed strategy);\\n\\n    /**\\n     * @notice Logged when strategies are reordered for a token\\n     */\\n    event StrategiesReordered(\\n        address indexed token,\\n        address indexed strategy1,\\n        address indexed strategy2\\n    );\\n\\n    /**\\n     * @param _vaultManager The address of the vaultManager\\n     */\\n    constructor(address _vaultManager) public {\\n        vaultManager = IVaultManager(_vaultManager);\\n        globalInvestEnabled = true;\\n        maxStrategies = 10;\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Adds a strategy for a given token\\n     * @dev Only callable by governance\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     * @param _cap The cap of the strategy\\n     * @param _converter The converter of the strategy (can be zero address)\\n     * @param _canHarvest Flag for whether the strategy can be harvested\\n     * @param _timeout The timeout between harvests\\n     */\\n    function addStrategy(\\n        address _token,\\n        address _strategy,\\n        uint256 _cap,\\n        address _converter,\\n        bool _canHarvest,\\n        uint256 _timeout\\n    ) external onlyGovernance {\\n        // ensure the strategy hasn't been added\\n        require(!tokenStrategies[_token].active[_strategy], \\\"active\\\");\\n        address _want = IStrategy(_strategy).want();\\n        // ensure a converter is added if the strategy's want token is\\n        // different than the want token of the vault\\n        if (_want != IMetaVault(vaults[_token]).want()) {\\n            require(_converter != address(0), \\\"!_converter\\\");\\n            converters[_token][_want] = _converter;\\n            // enable the strategy on the converter\\n            IConverter(_converter).setStrategy(_strategy, true);\\n        }\\n        // get the index of the newly added strategy\\n        uint256 index = tokenStrategies[_token].strategies.length;\\n        // ensure we haven't added too many strategies already\\n        require(index < maxStrategies, \\\"!maxStrategies\\\");\\n        // push the strategy to the array of strategies\\n        tokenStrategies[_token].strategies.push(_strategy);\\n        // set the cap\\n        tokenStrategies[_token].caps[_strategy] = _cap;\\n        // set the index\\n        tokenStrategies[_token].index[_strategy] = index;\\n        // activate the strategy\\n        tokenStrategies[_token].active[_strategy] = true;\\n        // store the reverse mapping\\n        strategyTokens[_strategy] = _token;\\n        // if the strategy should be harvested\\n        if (_canHarvest) {\\n            // add it to the harvester\\n            IHarvester(vaultManager.harvester()).addStrategy(_token, _strategy, _timeout);\\n        }\\n        emit StrategyAdded(_token, _strategy, _cap);\\n    }\\n\\n    /**\\n     * @notice Claims the insurance fund of a vault\\n     * @dev Only callable by governance\\n     * @dev When insurance is claimed by the controller, the insurance fund of\\n     * the vault is zeroed out, increasing the getPricePerFullShare and applying\\n     * the gains to everyone in the vault.\\n     * @param _vault The address of the vault\\n     */\\n    function claimInsurance(address _vault) external onlyGovernance {\\n        IMetaVault(_vault).claimInsurance();\\n        emit InsuranceClaimed(_vault);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the vault manager contract\\n     * @dev Only callable by governance\\n     * @param _vaultManager The address of the vault manager\\n     */\\n    function setVaultManager(address _vaultManager) external onlyGovernance {\\n        vaultManager = IVaultManager(_vaultManager);\\n        emit SetVaultManager(_vaultManager);\\n    }\\n\\n    /**\\n     * (GOVERNANCE|STRATEGIST)-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Withdraws token from a strategy to governance\\n     * @dev Only callable by governance or the strategist\\n     * @param _strategy The address of the strategy\\n     * @param _token The address of the token\\n     */\\n    function inCaseStrategyGetStuck(\\n        address _strategy,\\n        address _token\\n    ) external onlyStrategist {\\n        IStrategy(_strategy).withdraw(_token);\\n        IERC20(_token).safeTransfer(\\n            vaultManager.governance(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraws token from the controller to governance\\n     * @dev Only callable by governance or the strategist\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount\\n    ) external onlyStrategist {\\n        IERC20(_token).safeTransfer(vaultManager.governance(), _amount);\\n    }\\n\\n    /**\\n     * @notice Removes a strategy for a given token\\n     * @dev Only callable by governance or strategist\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function removeStrategy(\\n        address _token,\\n        address _strategy,\\n        uint256 _timeout\\n    ) external onlyStrategist {\\n        TokenStrategy storage tokenStrategy = tokenStrategies[_token];\\n        // ensure the strategy is already added\\n        require(tokenStrategy.active[_strategy], \\\"!active\\\");\\n        // get the index of the strategy to remove\\n        uint256 index = tokenStrategy.index[_strategy];\\n        // get the index of the last strategy\\n        uint256 tail = tokenStrategy.strategies.length.sub(1);\\n        // get the address of the last strategy\\n        address replace = tokenStrategy.strategies[tail];\\n        // replace the removed strategy with the tail\\n        tokenStrategy.strategies[index] = replace;\\n        // set the new index for the replaced strategy\\n        tokenStrategy.index[replace] = index;\\n        // remove the duplicate replaced strategy\\n        tokenStrategy.strategies.pop();\\n        // remove the strategy's index\\n        delete tokenStrategy.index[_strategy];\\n        // remove the strategy's cap\\n        delete tokenStrategy.caps[_strategy];\\n        // deactivate the strategy\\n        delete tokenStrategy.active[_strategy];\\n        // pull funds from the removed strategy to the vault\\n        IStrategy(_strategy).withdrawAll();\\n        // remove the strategy from the harvester\\n        IHarvester(vaultManager.harvester()).removeStrategy(_token, _strategy, _timeout);\\n        // get the strategy want token\\n        address _want = IStrategy(_strategy).want();\\n        // if a converter is used\\n        if (_want != IMetaVault(vaults[_token]).want()) {\\n            // disable the strategy on the converter\\n            IConverter(converters[_token][_want]).setStrategy(_strategy, false);\\n        }\\n        emit StrategyRemoved(_token, _strategy);\\n    }\\n\\n    /**\\n     * @notice Reorders two strategies for a given token\\n     * @dev Only callable by governance or strategist\\n     * @param _token The address of the token\\n     * @param _strategy1 The address of the first strategy\\n     * @param _strategy2 The address of the second strategy\\n     */\\n    function reorderStrategies(\\n        address _token,\\n        address _strategy1,\\n        address _strategy2\\n    ) external onlyStrategist {\\n        require(_strategy1 != _strategy2, \\\"_strategy1 == _strategy2\\\");\\n        TokenStrategy storage tokenStrategy = tokenStrategies[_token];\\n        // ensure the strategies are already added\\n        require(tokenStrategy.active[_strategy1]\\n             && tokenStrategy.active[_strategy2],\\n             \\\"!active\\\");\\n        // get the indexes of the strategies\\n        uint256 index1 = tokenStrategy.index[_strategy1];\\n        uint256 index2 = tokenStrategy.index[_strategy2];\\n        // set the new addresses at their indexes\\n        tokenStrategy.strategies[index1] = _strategy2;\\n        tokenStrategy.strategies[index2] = _strategy1;\\n        // update indexes\\n        tokenStrategy.index[_strategy1] = index2;\\n        tokenStrategy.index[_strategy2] = index1;\\n        emit StrategiesReordered(_token, _strategy1, _strategy2);\\n    }\\n\\n    /**\\n     * @notice Sets/updates the cap of a strategy for a token\\n     * @dev Only callable by governance or strategist\\n     * @dev If the balance of the strategy is greater than the new cap (except if\\n     * the cap is 0), then withdraw the difference from the strategy to the vault.\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     * @param _cap The new cap of the strategy\\n     */\\n    function setCap(\\n        address _token,\\n        address _strategy,\\n        uint256 _cap\\n    ) external onlyStrategist {\\n        require(tokenStrategies[_token].active[_strategy], \\\"!active\\\");\\n        tokenStrategies[_token].caps[_strategy] = _cap;\\n        uint256 _balance = IStrategy(_strategy).balanceOf();\\n        // send excess funds (over cap) back to the vault\\n        if (_balance > _cap && _cap != 0) {\\n            uint256 _diff = _balance.sub(_cap);\\n            IStrategy(_strategy).withdraw(_diff);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets/updates the converter for given input and output tokens\\n     * @dev Only callable by governance or strategist\\n     * @param _input The address of the input token\\n     * @param _output The address of the output token\\n     * @param _converter The address of the converter\\n     */\\n    function setConverter(\\n        address _input,\\n        address _output,\\n        address _converter\\n    ) external onlyStrategist {\\n        converters[_input][_output] = _converter;\\n        emit SetConverter(_input, _output, _converter);\\n    }\\n\\n    /**\\n     * @notice Sets/updates the global invest enabled flag\\n     * @dev Only callable by governance or strategist\\n     * @param _investEnabled The new bool of the invest enabled flag\\n     */\\n    function setInvestEnabled(bool _investEnabled) external onlyStrategist {\\n        globalInvestEnabled = _investEnabled;\\n    }\\n\\n    /**\\n     * @notice Sets/updates the maximum number of strategies for a token\\n     * @dev Only callable by governance or strategist\\n     * @param _maxStrategies The new value of the maximum strategies\\n     */\\n    function setMaxStrategies(uint256 _maxStrategies) external onlyStrategist {\\n        require(_maxStrategies > 0, \\\"!_maxStrategies\\\");\\n        maxStrategies = _maxStrategies;\\n    }\\n\\n    /**\\n     * @notice Sets the address of a vault for a given token\\n     * @dev Only callable by governance or strategist\\n     * @param _token The address of the token\\n     * @param _vault The address of the vault\\n     */\\n    function setVault(address _token, address _vault) external onlyStrategist {\\n        require(vaults[_token] == address(0), \\\"vault\\\");\\n        vaults[_token] = _vault;\\n        vaultTokens[_vault] = _token;\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from a strategy\\n     * @dev Only callable by governance or the strategist\\n     * @param _strategy The address of the strategy\\n     */\\n    function withdrawAll(address _strategy) external onlyStrategist {\\n        // WithdrawAll sends 'want' to 'vault'\\n        IStrategy(_strategy).withdrawAll();\\n    }\\n\\n    /**\\n     * (GOVERNANCE|STRATEGIST|HARVESTER)-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Harvests the specified strategy\\n     * @dev Only callable by governance, the strategist, or the harvester\\n     * @param _strategy The address of the strategy\\n     */\\n    function harvestStrategy(address _strategy) external override onlyHarvester {\\n        IStrategy(_strategy).harvest();\\n        emit Harvest(_strategy);\\n    }\\n\\n    /**\\n     * VAULT-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Invests funds into a strategy\\n     * @dev Only callable by a vault\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be invested\\n     */\\n    function earn(address _token, uint256 _amount) external override onlyVault(_token) {\\n        // get the first strategy that will accept the deposit\\n        address _strategy = getBestStrategyEarn(_token, _amount);\\n        // get the want token of the strategy\\n        address _want = IStrategy(_strategy).want();\\n        // if the depositing token is not what the strategy wants, convert it\\n        // then transfer it to the strategy\\n        if (_want != _token) {\\n            address _converter = converters[_token][_want];\\n            IERC20(_token).safeTransfer(_converter, _amount);\\n            _amount = IConverter(_converter).convert(\\n                _token,\\n                _want,\\n                _amount\\n            );\\n            IERC20(_want).safeTransfer(_strategy, _amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_strategy, _amount);\\n        }\\n        // call the strategy's deposit function\\n        IStrategy(_strategy).deposit();\\n        emit Earn(_strategy);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds from a strategy\\n     * @dev Only callable by a vault\\n     * @dev If the withdraw amount is greater than the first strategy given\\n     * by getBestStrategyWithdraw, this function will loop over strategies\\n     * until the requested amount is met.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function withdraw(address _token, uint256 _amount) external override onlyVault(_token) {\\n        (\\n            address[] memory _strategies,\\n            uint256[] memory _amounts\\n        ) = getBestStrategyWithdraw(_token, _amount);\\n        for (uint i = 0; i < _strategies.length; i++) {\\n            // getBestStrategyWithdraw will return arrays larger than needed\\n            // if this happens, simply exit the loop\\n            if (_strategies[i] == address(0)) {\\n                break;\\n            }\\n            IStrategy(_strategies[i]).withdraw(_amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the sum of all strategies for a given token\\n     * @dev This function would make deposits more expensive for the more strategies\\n     * that are added for a given token\\n     * @param _token The address of the token\\n     */\\n    function balanceOf(address _token) external view override returns (uint256 _balance) {\\n        uint256 k = tokenStrategies[_token].strategies.length;\\n        for (uint i = 0; i < k; i++) {\\n            IStrategy _strategy = IStrategy(tokenStrategies[_token].strategies[i]);\\n            address _want = _strategy.want();\\n            if (_want != _token) {\\n                address _converter = converters[_token][_want];\\n                _balance = _balance.add(IConverter(_converter).convert_rate(\\n                    _want,\\n                    _token,\\n                    _strategy.balanceOf()\\n               ));\\n            } else {\\n                _balance = _balance.add(_strategy.balanceOf());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the cap of a strategy for a given token\\n     * @param _token The address of the token\\n     * @param _strategy The address of the strategy\\n     */\\n    function getCap(address _token, address _strategy) external view returns (uint256) {\\n        return tokenStrategies[_token].caps[_strategy];\\n    }\\n\\n    /**\\n     * @notice Returns whether investing is enabled for the calling vault\\n     * @dev Should be called by the vault\\n     */\\n    function investEnabled() external view override returns (bool) {\\n        if (globalInvestEnabled) {\\n            return tokenStrategies[vaultTokens[msg.sender]].strategies.length > 0;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns all the strategies for a given token\\n     * @param _token The address of the token\\n     */\\n    function strategies(address _token) external view returns (address[] memory) {\\n        return tokenStrategies[_token].strategies;\\n    }\\n\\n    /**\\n     * @notice Returns the want address of a given token\\n     * @dev Since strategies can have different want tokens, default to using the\\n     * want token of the vault for a given token.\\n     * @param _token The address of the token\\n     */\\n    function want(address _token) external view override returns (address) {\\n        return IMetaVault(vaults[_token]).want();\\n    }\\n\\n    /**\\n     * @notice Returns the fee for withdrawing a specified amount\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function withdrawFee(\\n        address,\\n        uint256 _amount\\n    ) external view override returns (uint256 _fee) {\\n        return vaultManager.withdrawalProtectionFee().mul(_amount).div(10000);\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the best (optimistic) strategy for funds to be sent to with earn\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be invested\\n     */\\n    function getBestStrategyEarn(\\n        address _token,\\n        uint256 _amount\\n    ) public view returns (address _strategy) {\\n        // get the index of the last strategy\\n        uint256 k = tokenStrategies[_token].strategies.length;\\n        // scan backwards from the index to the beginning of strategies\\n        for (uint i = k; i > 0; i--) {\\n            _strategy = tokenStrategies[_token].strategies[i - 1];\\n            // get the new balance if the _amount were added to the strategy\\n            uint256 balance = IStrategy(_strategy).balanceOf().add(_amount);\\n            uint256 cap = tokenStrategies[_token].caps[_strategy];\\n            // stop scanning if the deposit wouldn't go over the cap\\n            if (balance <= cap || cap == 0) {\\n                break;\\n            }\\n        }\\n        // if never broken from the loop, use the last scanned strategy\\n        // this could cause it to go over cap if (for some reason) no strategies\\n        // were added with 0 cap\\n    }\\n\\n    /**\\n     * @notice Returns the best (optimistic) strategy for funds to be withdrawn from\\n     * @dev Since Solidity doesn't support dynamic arrays in memory, the returned arrays\\n     * from this function will always be the same length as the amount of strategies for\\n     * a token. Check that _strategies[i] != address(0) when consuming to know when to\\n     * break out of the loop.\\n     * @param _token The address of the token\\n     * @param _amount The amount that will be withdrawn\\n     */\\n    function getBestStrategyWithdraw(\\n        address _token,\\n        uint256 _amount\\n    ) public view returns (\\n        address[] memory _strategies,\\n        uint256[] memory _amounts\\n    ) {\\n        // get the length of strategies\\n        uint256 k = tokenStrategies[_token].strategies.length;\\n        // initialize fixed-length memory arrays\\n        _strategies = new address[](k);\\n        _amounts = new uint256[](k);\\n        // scan forward from the the beginning of strategies\\n        for (uint i = 0; i < k; i++) {\\n            address _strategy = tokenStrategies[_token].strategies[i];\\n            _strategies[i] = _strategy;\\n            // get the balance of the strategy\\n            uint256 _balance = IStrategy(_strategy).balanceOf();\\n            // if the strategy doesn't have the balance to cover the withdraw\\n            if (_balance < _amount) {\\n                // withdraw what we can and add to the _amounts\\n                _amounts[i] = _balance;\\n                _amount = _amount.sub(_balance);\\n            } else {\\n                // stop scanning if the balance is more than the withdraw amount\\n                _amounts[i] = _amount;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == vaultManager.strategist()\\n             || msg.sender == vaultManager.governance(),\\n             \\\"!strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        require(\\n            msg.sender == vaultManager.harvester() ||\\n            msg.sender == vaultManager.strategist() ||\\n            msg.sender == vaultManager.governance(),\\n            \\\"!harvester\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVault(address _token) {\\n        require(msg.sender == vaults[_token], \\\"!vault\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd0e935fb808c5afee9ef2175599bf12e1947e62704f7856f412142942daf7ae2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613cb3380380613cb38339818101604052602081101561003357600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556000805460ff191660019081178255600a9055613c3c90819061007790396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638cda24361161010f578063b543503e116100a2578063e4f2494d11610071578063e4f2494d1461072b578063f3fef3a314610759578063fa09e63014610785578063fd9be522146107ab576101e5565b8063b543503e14610699578063c6d758cb146106bf578063c79c21b7146106eb578063ccd06318146106f3576101e5565b806396d236b1116100de57806396d236b11461055c578063a622ee7c14610621578063b02bf4b914610647578063b3deb95814610673576101e5565b80638cda24361461048d5780638fc1ea1e146104c3578063920335e5146104e257806395c220461461052e576101e5565b806364f500571161018757806371f4f3fb1161015657806371f4f3fb1461041f57806375724589146104275780638a4adf241461044d5780638c12f28614610455576101e5565b806364f500571461036f5780636bb3722e1461039557806370a08231146103cb578063714ccf7b146103f1576101e5565b806319c49450116101c357806319c494501461027657806339ebf823146102b65780634ff173d71461032c57806361f13e0014610349576101e5565b80630b72a8d1146101ea5780631239c27114610232578063123e63d31461025a575b600080fd5b6102166004803603604081101561020057600080fd5b506001600160a01b0381351690602001356107d7565b604080516001600160a01b039092168252519081900360200190f35b6102586004803603602081101561024857600080fd5b50356001600160a01b031661090a565b005b610262610a58565b604080519115158252519081900360200190f35b6102a46004803603604081101561028c57600080fd5b506001600160a01b0381358116916020013516610a61565b60408051918252519081900360200190f35b6102dc600480360360208110156102cc57600080fd5b50356001600160a01b0316610a92565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610318578181015183820152602001610300565b505050509050019250505060405180910390f35b6102586004803603602081101561034257600080fd5b5035610b08565b6102586004803603602081101561035f57600080fd5b50356001600160a01b0316610ca4565b6102166004803603602081101561038557600080fd5b50356001600160a01b0316610f09565b610258600480360360608110156103ab57600080fd5b506001600160a01b03813581169160208101359091169060400135610f24565b6102a4600480360360208110156103e157600080fd5b50356001600160a01b03166114e9565b6102586004803603604081101561040757600080fd5b506001600160a01b038135811691602001351661176a565b610262611957565b6102166004803603602081101561043d57600080fd5b50356001600160a01b0316611998565b610216611a1c565b6102586004803603606081101561046b57600080fd5b506001600160a01b038135811691602081013582169160409091013516611a2b565b610258600480360360608110156104a357600080fd5b506001600160a01b03813581169160208101359091169060400135611d62565b610258600480360360208110156104d957600080fd5b5035151561202e565b610258600480360360c08110156104f857600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013590911690608081013515159060a00135612191565b6102586004803603604081101561054457600080fd5b506001600160a01b03813581169160200135166126c7565b6105886004803603604081101561057257600080fd5b506001600160a01b038135169060200135612982565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105cc5781810151838201526020016105b4565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561060b5781810151838201526020016105f3565b5050505090500194505050505060405180910390f35b6102166004803603602081101561063757600080fd5b50356001600160a01b0316612b71565b6102586004803603604081101561065d57600080fd5b506001600160a01b038135169060200135612b8c565b6102166004803603602081101561068957600080fd5b50356001600160a01b0316612df7565b610258600480360360208110156106af57600080fd5b50356001600160a01b0316612e12565b610258600480360360408110156106d557600080fd5b506001600160a01b038135169060200135612f2a565b6102a46130fd565b6102586004803603606081101561070957600080fd5b506001600160a01b038135811691602081013582169160409091013516613103565b6102166004803603604081101561074157600080fd5b506001600160a01b03813581169160200135166132d5565b6102586004803603604081101561076f57600080fd5b506001600160a01b0381351690602001356132fb565b6102586004803603602081101561079b57600080fd5b50356001600160a01b031661343c565b6102a4600480360360408110156107c157600080fd5b506001600160a01b0381351690602001356135e2565b6001600160a01b038216600090815260046020526040812054805b8015610902576001600160a01b03851660009081526004602052604090208054600019830190811061082057fe5b9060005260206000200160009054906101000a90046001600160a01b0316925060006108b185856001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d60208110156108a957600080fd5b50519061367b565b6001600160a01b038088166000908152600460209081526040808320938916835260039093019052205490915080821115806108eb575080155b156108f7575050610902565b5050600019016107f2565b505092915050565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b50516001600160a01b031633146109ce576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b806001600160a01b031663a75ac6086040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b50506040516001600160a01b03841692507f0483066eee20a73e7807d02640a5b3e72815138b02d49102a9f53490977d198f9150600090a250565b60005460ff1681565b6001600160a01b03808316600090815260046020908152604080832093851683526003909301905220545b92915050565b6001600160a01b038116600090815260046020908152604091829020805483518184028101840190945280845260609392830182828015610afc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ade575b50505050509050919050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d6020811015610b8057600080fd5b50516001600160a01b0316331480610c195750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d6020811015610c0b57600080fd5b50516001600160a01b031633145b610c58576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b60008111610c9f576040805162461bcd60e51b815260206004820152600f60248201526e215f6d61785374726174656769657360881b604482015290519081900360640190fd5b600155565b600260009054906101000a90046001600160a01b03166001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf257600080fd5b505afa158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b50516001600160a01b0316331480610db55750600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7d57600080fd5b505afa158015610d91573d6000803e3d6000fd5b505050506040513d6020811015610da757600080fd5b50516001600160a01b031633145b80610e415750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b50516001600160a01b031633145b610e7f576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b806001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b50506040516001600160a01b03841692507f188a622567eeca997c3d494fd65f76ca910b90a50a0c44d5e37b2ea5539e027b9150600090a250565b6005602052600090815260409020546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7257600080fd5b505afa158015610f86573d6000803e3d6000fd5b505050506040513d6020811015610f9c57600080fd5b50516001600160a01b03163314806110355750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffd57600080fd5b505afa158015611011573d6000803e3d6000fd5b505050506040513d602081101561102757600080fd5b50516001600160a01b031633145b611074576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020908152604080832093861683526002840190915290205460ff166110dd576040805162461bcd60e51b81526020600482015260076024820152662161637469766560c81b604482015290519081900360640190fd5b6001600160a01b038316600090815260018083016020526040822054835490929161110891906136d5565b9050600083600001828154811061111b57fe5b60009182526020909120015484546001600160a01b039091169150819085908590811061114457fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526001860190915260409020839055835484908061118a57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038816808352600187018252604080842084905560038801835280842084905560028801909252818320805460ff19169055815163429c145b60e11b81529151909263853828b6926004808201939182900301818387803b15801561121b57600080fd5b505af115801561122f573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561128157600080fd5b505afa158015611295573d6000803e3d6000fd5b505050506040513d60208110156112ab57600080fd5b5051604080516335d9b91760e11b81526001600160a01b038a8116600483015289811660248301526044820189905291519190921691636bb3722e91606480830192600092919082900301818387803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050506000866001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561135a57600080fd5b505afa15801561136e573d6000803e3d6000fd5b505050506040513d602081101561138457600080fd5b50516001600160a01b03808a16600090815260066020908152604091829020548251631f1fcd5160e01b8152925194955090921692631f1fcd5192600480840193919291829003018186803b1580156113dc57600080fd5b505afa1580156113f0573d6000803e3d6000fd5b505050506040513d602081101561140657600080fd5b50516001600160a01b0382811691161461149f576001600160a01b0380891660009081526003602090815260408083208585168452909152808220548151632eaa0a8d60e21b81528b8516600482015260248101849052915193169263baa82a349260448084019391929182900301818387803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167f64a0e13af5f4bc5a68b1b79d9ff6e775f93e814ee8b0c97d620520190d04bae260405160405180910390a35050505050505050565b6001600160a01b038116600090815260046020526040812054815b81811015611763576001600160a01b038416600090815260046020526040812080548390811061153057fe5b600091825260208083209091015460408051631f1fcd5160e01b815290516001600160a01b0390921694508492631f1fcd5192600480840193829003018186803b15801561157d57600080fd5b505afa158015611591573d6000803e3d6000fd5b505050506040513d60208110156115a757600080fd5b505190506001600160a01b03808216908716146116e7576001600160a01b038087166000908152600360209081526040808320858516845282529182902054825163722713f760e01b81529251908416936116df9385936336cf893c9388938e93908b169263722713f792600480840193829003018186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d602081101561165657600080fd5b5051604080516001600160e01b031960e087901b1681526001600160a01b039485166004820152929093166024830152604482015290516064808301926020929190829003018186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d60208110156116d657600080fd5b5051879061367b565b955050611759565b611756826001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561172357600080fd5b505afa158015611737573d6000803e3d6000fd5b505050506040513d602081101561174d57600080fd5b5051869061367b565b94505b5050600101611504565b5050919050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d60208110156117e257600080fd5b50516001600160a01b031633148061187b5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561184357600080fd5b505afa158015611857573d6000803e3d6000fd5b505050506040513d602081101561186d57600080fd5b50516001600160a01b031633145b6118ba576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b03828116600090815260066020526040902054161561190f576040805162461bcd60e51b81526020600482015260056024820152641d985d5b1d60da1b604482015290519081900360640190fd5b6001600160a01b0391821660008181526006602090815260408083208054969095166001600160a01b0319968716811790955593825260079052919091208054909216179055565b6000805460ff16156119915750336000908152600760209081526040808320546001600160a01b0316835260049091529020541515611995565b5060005b90565b6001600160a01b038082166000908152600660209081526040808320548151631f1fcd5160e01b8152915193941692631f1fcd5192600480840193919291829003018186803b1580156119ea57600080fd5b505afa1580156119fe573d6000803e3d6000fd5b505050506040513d6020811015611a1457600080fd5b505192915050565b6002546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7957600080fd5b505afa158015611a8d573d6000803e3d6000fd5b505050506040513d6020811015611aa357600080fd5b50516001600160a01b0316331480611b3c5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0457600080fd5b505afa158015611b18573d6000803e3d6000fd5b505050506040513d6020811015611b2e57600080fd5b50516001600160a01b031633145b611b7b576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415611be2576040805162461bcd60e51b815260206004820152601860248201527f5f737472617465677931203d3d205f7374726174656779320000000000000000604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020908152604080832093861683526002840190915290205460ff168015611c3657506001600160a01b038216600090815260028201602052604090205460ff165b611c71576040805162461bcd60e51b81526020600482015260076024820152662161637469766560c81b604482015290519081900360640190fd5b6001600160a01b03808416600090815260018301602052604080822054928516825290205482548490849084908110611ca657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084836000018281548110611ce457fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055878316808352600187019091526040808320859055878416808452818420879055905190939192918a16917ffea1ac549b0e10ecbe67c9d07de370cb3976ed51ef1fd559cf7472021417467891a4505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611db057600080fd5b505afa158015611dc4573d6000803e3d6000fd5b505050506040513d6020811015611dda57600080fd5b50516001600160a01b0316331480611e735750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3b57600080fd5b505afa158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b50516001600160a01b031633145b611eb2576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038084166000908152600460209081526040808320938616835260029093019052205460ff16611f1a576040805162461bcd60e51b81526020600482015260076024820152662161637469766560c81b604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020818152604080842094871680855260039095018252808420869055805163722713f760e01b8152905193949363722713f7938281019392829003018186803b158015611f7957600080fd5b505afa158015611f8d573d6000803e3d6000fd5b505050506040513d6020811015611fa357600080fd5b505190508181118015611fb557508115155b15612028576000611fc682846136d5565b9050836001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561200e57600080fd5b505af1158015612022573d6000803e3d6000fd5b50505050505b50505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561207c57600080fd5b505afa158015612090573d6000803e3d6000fd5b505050506040513d60208110156120a657600080fd5b50516001600160a01b031633148061213f5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561210757600080fd5b505afa15801561211b573d6000803e3d6000fd5b505050506040513d602081101561213157600080fd5b50516001600160a01b031633145b61217e576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156121df57600080fd5b505afa1580156121f3573d6000803e3d6000fd5b505050506040513d602081101561220957600080fd5b50516001600160a01b03163314612255576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b6001600160a01b038087166000908152600460209081526040808320938916835260029093019052205460ff16156122bd576040805162461bcd60e51b815260206004820152600660248201526561637469766560d01b604482015290519081900360640190fd5b6000856001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d602081101561232257600080fd5b50516001600160a01b03808916600090815260066020908152604091829020548251631f1fcd5160e01b8152925194955090921692631f1fcd5192600480840193919291829003018186803b15801561237a57600080fd5b505afa15801561238e573d6000803e3d6000fd5b505050506040513d60208110156123a457600080fd5b50516001600160a01b03828116911614612498576001600160a01b038416612401576040805162461bcd60e51b815260206004820152600b60248201526a10afb1b7b73b32b93a32b960a91b604482015290519081900360640190fd5b6001600160a01b038781166000908152600360209081526040808320858516845290915280822080546001600160a01b0319168885169081179091558151632eaa0a8d60e21b8152938a166004850152600160248501529051909263baa82a3492604480830193919282900301818387803b15801561247f57600080fd5b505af1158015612493573d6000803e3d6000fd5b505050505b6001600160a01b03871660009081526004602052604090205460015481106124f8576040805162461bcd60e51b815260206004820152600e60248201526d216d61785374726174656769657360901b604482015290519081900360640190fd5b6001600160a01b0380891660008181526004602090815260408083208054600181810183558286528486209091018054978f166001600160a01b031998891681179091558086526003830185528386208e90558086528183018552838620899055855260029091018352818420805460ff19169091179055600590915290208054909216179055831561267257600260009054906101000a90046001600160a01b03166001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b1580156125d357600080fd5b505afa1580156125e7573d6000803e3d6000fd5b505050506040513d60208110156125fd57600080fd5b505160408051634b704acd60e01b81526001600160a01b038b811660048301528a811660248301526044820187905291519190921691634b704acd91606480830192600092919082900301818387803b15801561265957600080fd5b505af115801561266d573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167fc2008aa15e9b0989ec7ae02bc3d8054428c527c989269ffb2a5bff829028a012886040518082815260200191505060405180910390a35050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d602081101561273f57600080fd5b50516001600160a01b03163314806127d85750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156127a057600080fd5b505afa1580156127b4573d6000803e3d6000fd5b505050506040513d60208110156127ca57600080fd5b50516001600160a01b031633145b612817576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b816001600160a01b03166351cff8d9826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561286657600080fd5b505af115801561287a573d6000803e3d6000fd5b5050505061297e600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156128cf57600080fd5b505afa1580156128e3573d6000803e3d6000fd5b505050506040513d60208110156128f957600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561294157600080fd5b505afa158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b50516001600160a01b0384169190613717565b5050565b6001600160a01b03821660009081526004602052604090205460609081908067ffffffffffffffff811180156129b757600080fd5b506040519080825280602002602001820160405280156129e1578160200160208202803683370190505b5092508067ffffffffffffffff811180156129fb57600080fd5b50604051908082528060200260200182016040528015612a25578160200160208202803683370190505b50915060005b81811015612b68576001600160a01b0386166000908152600460205260408120805483908110612a5757fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080858381518110612a8457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000816001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d6020811015612b0957600080fd5b5051905086811015612b3e5780858481518110612b2257fe5b6020908102919091010152612b3787826136d5565b9650612b5e565b86858481518110612b4b57fe5b6020026020010181815250505050612b68565b5050600101612a2b565b50509250929050565b6006602052600090815260409020546001600160a01b031681565b6001600160a01b038281166000908152600660205260409020548391163314612be5576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6000612bf184846107d7565b90506000816001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2e57600080fd5b505afa158015612c42573d6000803e3d6000fd5b505050506040513d6020811015612c5857600080fd5b505190506001600160a01b0380821690861614612d55576001600160a01b038086166000818152600360209081526040808320868616845290915290205490911690612ca5908287613717565b806001600160a01b031663248391ff8784886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015612d0d57600080fd5b505af1158015612d21573d6000803e3d6000fd5b505050506040513d6020811015612d3757600080fd5b50519450612d4f6001600160a01b0383168487613717565b50612d69565b612d696001600160a01b0386168386613717565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612da457600080fd5b505af1158015612db8573d6000803e3d6000fd5b50506040516001600160a01b03851692507fd9ff27d148b72eef72d3ccadcd1d61afe5d6fae843f1cc6a7b19c99f787c11de9150600090a25050505050565b6007602052600090815260409020546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6057600080fd5b505afa158015612e74573d6000803e3d6000fd5b505050506040513d6020811015612e8a57600080fd5b50516001600160a01b03163314612ed6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0383166001600160a01b0319909116811790915560408051918252517ff936751e3ffe55eec34636f5166fff2a5714505f4a3aa0862829ddb1eb75f1019181900360200190a150565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7857600080fd5b505afa158015612f8c573d6000803e3d6000fd5b505050506040513d6020811015612fa257600080fd5b50516001600160a01b031633148061303b5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561300357600080fd5b505afa158015613017573d6000803e3d6000fd5b505050506040513d602081101561302d57600080fd5b50516001600160a01b031633145b61307a576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b60025460408051635aa6e67560e01b8152905161297e926001600160a01b031691635aa6e675916004808301926020929190829003018186803b1580156130c057600080fd5b505afa1580156130d4573d6000803e3d6000fd5b505050506040513d60208110156130ea57600080fd5b50516001600160a01b0384169083613717565b60015481565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561315157600080fd5b505afa158015613165573d6000803e3d6000fd5b505050506040513d602081101561317b57600080fd5b50516001600160a01b03163314806132145750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156131dc57600080fd5b505afa1580156131f0573d6000803e3d6000fd5b505050506040513d602081101561320657600080fd5b50516001600160a01b031633145b613253576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b0380841660008181526003602090815260408083208786168085529083529281902080549587166001600160a01b0319909616861790558051938452908301919091528181019290925290517f304562ece6c846eb82a8b84b5370f7f035e32bd2c10433989984bcf15513f41f9181900360600190a1505050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001600160a01b038281166000908152600660205260409020548391163314613354576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6060806133618585612982565b9150915060005b82518110156134345760006001600160a01b031683828151811061338857fe5b60200260200101516001600160a01b031614156133a457613434565b8281815181106133b057fe5b60200260200101516001600160a01b0316632e1a7d4d8383815181106133d257fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561341057600080fd5b505af1158015613424573d6000803e3d6000fd5b5050600190920191506133689050565b505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561348a57600080fd5b505afa15801561349e573d6000803e3d6000fd5b505050506040513d60208110156134b457600080fd5b50516001600160a01b031633148061354d5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561351557600080fd5b505afa158015613529573d6000803e3d6000fd5b505050506040513d602081101561353f57600080fd5b50516001600160a01b031633145b61358c576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156135c757600080fd5b505af11580156135db573d6000803e3d6000fd5b5050505050565b600061367461271061366e84600260009054906101000a90046001600160a01b03166001600160a01b031663825139096040518163ffffffff1660e01b815260040160206040518083038186803b15801561363c57600080fd5b505afa158015613650573d6000803e3d6000fd5b505050506040513d602081101561366657600080fd5b50519061376e565b906137c7565b9392505050565b600082820183811015613674576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061367483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613809565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526137699084906138a0565b505050565b60008261377d57506000610a8c565b8282028284828161378a57fe5b04146136745760405162461bcd60e51b8152600401808060200182810382526021815260200180613bbc6021913960400191505060405180910390fd5b600061367483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613951565b600081848411156138985760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561385d578181015183820152602001613845565b50505050905090810190601f16801561388a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606138f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b69092919063ffffffff16565b8051909150156137695780806020019051602081101561391457600080fd5b50516137695760405162461bcd60e51b815260040180806020018281038252602a815260200180613bdd602a913960400191505060405180910390fd5b600081836139a05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561385d578181015183820152602001613845565b5060008385816139ac57fe5b0495945050505050565b60606139c584846000856139cd565b949350505050565b606082471015613a0e5760405162461bcd60e51b8152600401808060200182810382526026815260200180613b966026913960400191505060405180910390fd5b613a1785613b29565b613a68576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613aa75780518252601f199092019160209182019101613a88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613b09576040519150601f19603f3d011682016040523d82523d6000602084013e613b0e565b606091505b5091509150613b1e828286613b2f565b979650505050505050565b3b151590565b60608315613b3e575081613674565b825115613b4e5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561385d57818101518382015260200161384556fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220515fb92c3c9ddecdedca5a83fdd6cfff676ef061221be5a520a0608f9ebb478064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638cda24361161010f578063b543503e116100a2578063e4f2494d11610071578063e4f2494d1461072b578063f3fef3a314610759578063fa09e63014610785578063fd9be522146107ab576101e5565b8063b543503e14610699578063c6d758cb146106bf578063c79c21b7146106eb578063ccd06318146106f3576101e5565b806396d236b1116100de57806396d236b11461055c578063a622ee7c14610621578063b02bf4b914610647578063b3deb95814610673576101e5565b80638cda24361461048d5780638fc1ea1e146104c3578063920335e5146104e257806395c220461461052e576101e5565b806364f500571161018757806371f4f3fb1161015657806371f4f3fb1461041f57806375724589146104275780638a4adf241461044d5780638c12f28614610455576101e5565b806364f500571461036f5780636bb3722e1461039557806370a08231146103cb578063714ccf7b146103f1576101e5565b806319c49450116101c357806319c494501461027657806339ebf823146102b65780634ff173d71461032c57806361f13e0014610349576101e5565b80630b72a8d1146101ea5780631239c27114610232578063123e63d31461025a575b600080fd5b6102166004803603604081101561020057600080fd5b506001600160a01b0381351690602001356107d7565b604080516001600160a01b039092168252519081900360200190f35b6102586004803603602081101561024857600080fd5b50356001600160a01b031661090a565b005b610262610a58565b604080519115158252519081900360200190f35b6102a46004803603604081101561028c57600080fd5b506001600160a01b0381358116916020013516610a61565b60408051918252519081900360200190f35b6102dc600480360360208110156102cc57600080fd5b50356001600160a01b0316610a92565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610318578181015183820152602001610300565b505050509050019250505060405180910390f35b6102586004803603602081101561034257600080fd5b5035610b08565b6102586004803603602081101561035f57600080fd5b50356001600160a01b0316610ca4565b6102166004803603602081101561038557600080fd5b50356001600160a01b0316610f09565b610258600480360360608110156103ab57600080fd5b506001600160a01b03813581169160208101359091169060400135610f24565b6102a4600480360360208110156103e157600080fd5b50356001600160a01b03166114e9565b6102586004803603604081101561040757600080fd5b506001600160a01b038135811691602001351661176a565b610262611957565b6102166004803603602081101561043d57600080fd5b50356001600160a01b0316611998565b610216611a1c565b6102586004803603606081101561046b57600080fd5b506001600160a01b038135811691602081013582169160409091013516611a2b565b610258600480360360608110156104a357600080fd5b506001600160a01b03813581169160208101359091169060400135611d62565b610258600480360360208110156104d957600080fd5b5035151561202e565b610258600480360360c08110156104f857600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013590911690608081013515159060a00135612191565b6102586004803603604081101561054457600080fd5b506001600160a01b03813581169160200135166126c7565b6105886004803603604081101561057257600080fd5b506001600160a01b038135169060200135612982565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105cc5781810151838201526020016105b4565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561060b5781810151838201526020016105f3565b5050505090500194505050505060405180910390f35b6102166004803603602081101561063757600080fd5b50356001600160a01b0316612b71565b6102586004803603604081101561065d57600080fd5b506001600160a01b038135169060200135612b8c565b6102166004803603602081101561068957600080fd5b50356001600160a01b0316612df7565b610258600480360360208110156106af57600080fd5b50356001600160a01b0316612e12565b610258600480360360408110156106d557600080fd5b506001600160a01b038135169060200135612f2a565b6102a46130fd565b6102586004803603606081101561070957600080fd5b506001600160a01b038135811691602081013582169160409091013516613103565b6102166004803603604081101561074157600080fd5b506001600160a01b03813581169160200135166132d5565b6102586004803603604081101561076f57600080fd5b506001600160a01b0381351690602001356132fb565b6102586004803603602081101561079b57600080fd5b50356001600160a01b031661343c565b6102a4600480360360408110156107c157600080fd5b506001600160a01b0381351690602001356135e2565b6001600160a01b038216600090815260046020526040812054805b8015610902576001600160a01b03851660009081526004602052604090208054600019830190811061082057fe5b9060005260206000200160009054906101000a90046001600160a01b0316925060006108b185856001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561087f57600080fd5b505afa158015610893573d6000803e3d6000fd5b505050506040513d60208110156108a957600080fd5b50519061367b565b6001600160a01b038088166000908152600460209081526040808320938916835260039093019052205490915080821115806108eb575080155b156108f7575050610902565b5050600019016107f2565b505092915050565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b50516001600160a01b031633146109ce576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b806001600160a01b031663a75ac6086040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b50506040516001600160a01b03841692507f0483066eee20a73e7807d02640a5b3e72815138b02d49102a9f53490977d198f9150600090a250565b60005460ff1681565b6001600160a01b03808316600090815260046020908152604080832093851683526003909301905220545b92915050565b6001600160a01b038116600090815260046020908152604091829020805483518184028101840190945280845260609392830182828015610afc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ade575b50505050509050919050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d6020811015610b8057600080fd5b50516001600160a01b0316331480610c195750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d6020811015610c0b57600080fd5b50516001600160a01b031633145b610c58576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b60008111610c9f576040805162461bcd60e51b815260206004820152600f60248201526e215f6d61785374726174656769657360881b604482015290519081900360640190fd5b600155565b600260009054906101000a90046001600160a01b03166001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf257600080fd5b505afa158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b50516001600160a01b0316331480610db55750600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7d57600080fd5b505afa158015610d91573d6000803e3d6000fd5b505050506040513d6020811015610da757600080fd5b50516001600160a01b031633145b80610e415750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b50516001600160a01b031633145b610e7f576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b806001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b50506040516001600160a01b03841692507f188a622567eeca997c3d494fd65f76ca910b90a50a0c44d5e37b2ea5539e027b9150600090a250565b6005602052600090815260409020546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7257600080fd5b505afa158015610f86573d6000803e3d6000fd5b505050506040513d6020811015610f9c57600080fd5b50516001600160a01b03163314806110355750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffd57600080fd5b505afa158015611011573d6000803e3d6000fd5b505050506040513d602081101561102757600080fd5b50516001600160a01b031633145b611074576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020908152604080832093861683526002840190915290205460ff166110dd576040805162461bcd60e51b81526020600482015260076024820152662161637469766560c81b604482015290519081900360640190fd5b6001600160a01b038316600090815260018083016020526040822054835490929161110891906136d5565b9050600083600001828154811061111b57fe5b60009182526020909120015484546001600160a01b039091169150819085908590811061114457fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526001860190915260409020839055835484908061118a57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038816808352600187018252604080842084905560038801835280842084905560028801909252818320805460ff19169055815163429c145b60e11b81529151909263853828b6926004808201939182900301818387803b15801561121b57600080fd5b505af115801561122f573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561128157600080fd5b505afa158015611295573d6000803e3d6000fd5b505050506040513d60208110156112ab57600080fd5b5051604080516335d9b91760e11b81526001600160a01b038a8116600483015289811660248301526044820189905291519190921691636bb3722e91606480830192600092919082900301818387803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050506000866001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561135a57600080fd5b505afa15801561136e573d6000803e3d6000fd5b505050506040513d602081101561138457600080fd5b50516001600160a01b03808a16600090815260066020908152604091829020548251631f1fcd5160e01b8152925194955090921692631f1fcd5192600480840193919291829003018186803b1580156113dc57600080fd5b505afa1580156113f0573d6000803e3d6000fd5b505050506040513d602081101561140657600080fd5b50516001600160a01b0382811691161461149f576001600160a01b0380891660009081526003602090815260408083208585168452909152808220548151632eaa0a8d60e21b81528b8516600482015260248101849052915193169263baa82a349260448084019391929182900301818387803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167f64a0e13af5f4bc5a68b1b79d9ff6e775f93e814ee8b0c97d620520190d04bae260405160405180910390a35050505050505050565b6001600160a01b038116600090815260046020526040812054815b81811015611763576001600160a01b038416600090815260046020526040812080548390811061153057fe5b600091825260208083209091015460408051631f1fcd5160e01b815290516001600160a01b0390921694508492631f1fcd5192600480840193829003018186803b15801561157d57600080fd5b505afa158015611591573d6000803e3d6000fd5b505050506040513d60208110156115a757600080fd5b505190506001600160a01b03808216908716146116e7576001600160a01b038087166000908152600360209081526040808320858516845282529182902054825163722713f760e01b81529251908416936116df9385936336cf893c9388938e93908b169263722713f792600480840193829003018186803b15801561162c57600080fd5b505afa158015611640573d6000803e3d6000fd5b505050506040513d602081101561165657600080fd5b5051604080516001600160e01b031960e087901b1681526001600160a01b039485166004820152929093166024830152604482015290516064808301926020929190829003018186803b1580156116ac57600080fd5b505afa1580156116c0573d6000803e3d6000fd5b505050506040513d60208110156116d657600080fd5b5051879061367b565b955050611759565b611756826001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561172357600080fd5b505afa158015611737573d6000803e3d6000fd5b505050506040513d602081101561174d57600080fd5b5051869061367b565b94505b5050600101611504565b5050919050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d60208110156117e257600080fd5b50516001600160a01b031633148061187b5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561184357600080fd5b505afa158015611857573d6000803e3d6000fd5b505050506040513d602081101561186d57600080fd5b50516001600160a01b031633145b6118ba576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b03828116600090815260066020526040902054161561190f576040805162461bcd60e51b81526020600482015260056024820152641d985d5b1d60da1b604482015290519081900360640190fd5b6001600160a01b0391821660008181526006602090815260408083208054969095166001600160a01b0319968716811790955593825260079052919091208054909216179055565b6000805460ff16156119915750336000908152600760209081526040808320546001600160a01b0316835260049091529020541515611995565b5060005b90565b6001600160a01b038082166000908152600660209081526040808320548151631f1fcd5160e01b8152915193941692631f1fcd5192600480840193919291829003018186803b1580156119ea57600080fd5b505afa1580156119fe573d6000803e3d6000fd5b505050506040513d6020811015611a1457600080fd5b505192915050565b6002546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7957600080fd5b505afa158015611a8d573d6000803e3d6000fd5b505050506040513d6020811015611aa357600080fd5b50516001600160a01b0316331480611b3c5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0457600080fd5b505afa158015611b18573d6000803e3d6000fd5b505050506040513d6020811015611b2e57600080fd5b50516001600160a01b031633145b611b7b576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415611be2576040805162461bcd60e51b815260206004820152601860248201527f5f737472617465677931203d3d205f7374726174656779320000000000000000604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020908152604080832093861683526002840190915290205460ff168015611c3657506001600160a01b038216600090815260028201602052604090205460ff165b611c71576040805162461bcd60e51b81526020600482015260076024820152662161637469766560c81b604482015290519081900360640190fd5b6001600160a01b03808416600090815260018301602052604080822054928516825290205482548490849084908110611ca657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084836000018281548110611ce457fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055878316808352600187019091526040808320859055878416808452818420879055905190939192918a16917ffea1ac549b0e10ecbe67c9d07de370cb3976ed51ef1fd559cf7472021417467891a4505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015611db057600080fd5b505afa158015611dc4573d6000803e3d6000fd5b505050506040513d6020811015611dda57600080fd5b50516001600160a01b0316331480611e735750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3b57600080fd5b505afa158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b50516001600160a01b031633145b611eb2576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038084166000908152600460209081526040808320938616835260029093019052205460ff16611f1a576040805162461bcd60e51b81526020600482015260076024820152662161637469766560c81b604482015290519081900360640190fd5b6001600160a01b03808416600090815260046020818152604080842094871680855260039095018252808420869055805163722713f760e01b8152905193949363722713f7938281019392829003018186803b158015611f7957600080fd5b505afa158015611f8d573d6000803e3d6000fd5b505050506040513d6020811015611fa357600080fd5b505190508181118015611fb557508115155b15612028576000611fc682846136d5565b9050836001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561200e57600080fd5b505af1158015612022573d6000803e3d6000fd5b50505050505b50505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561207c57600080fd5b505afa158015612090573d6000803e3d6000fd5b505050506040513d60208110156120a657600080fd5b50516001600160a01b031633148061213f5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561210757600080fd5b505afa15801561211b573d6000803e3d6000fd5b505050506040513d602081101561213157600080fd5b50516001600160a01b031633145b61217e576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6000805460ff1916911515919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156121df57600080fd5b505afa1580156121f3573d6000803e3d6000fd5b505050506040513d602081101561220957600080fd5b50516001600160a01b03163314612255576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b6001600160a01b038087166000908152600460209081526040808320938916835260029093019052205460ff16156122bd576040805162461bcd60e51b815260206004820152600660248201526561637469766560d01b604482015290519081900360640190fd5b6000856001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d602081101561232257600080fd5b50516001600160a01b03808916600090815260066020908152604091829020548251631f1fcd5160e01b8152925194955090921692631f1fcd5192600480840193919291829003018186803b15801561237a57600080fd5b505afa15801561238e573d6000803e3d6000fd5b505050506040513d60208110156123a457600080fd5b50516001600160a01b03828116911614612498576001600160a01b038416612401576040805162461bcd60e51b815260206004820152600b60248201526a10afb1b7b73b32b93a32b960a91b604482015290519081900360640190fd5b6001600160a01b038781166000908152600360209081526040808320858516845290915280822080546001600160a01b0319168885169081179091558151632eaa0a8d60e21b8152938a166004850152600160248501529051909263baa82a3492604480830193919282900301818387803b15801561247f57600080fd5b505af1158015612493573d6000803e3d6000fd5b505050505b6001600160a01b03871660009081526004602052604090205460015481106124f8576040805162461bcd60e51b815260206004820152600e60248201526d216d61785374726174656769657360901b604482015290519081900360640190fd5b6001600160a01b0380891660008181526004602090815260408083208054600181810183558286528486209091018054978f166001600160a01b031998891681179091558086526003830185528386208e90558086528183018552838620899055855260029091018352818420805460ff19169091179055600590915290208054909216179055831561267257600260009054906101000a90046001600160a01b03166001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b1580156125d357600080fd5b505afa1580156125e7573d6000803e3d6000fd5b505050506040513d60208110156125fd57600080fd5b505160408051634b704acd60e01b81526001600160a01b038b811660048301528a811660248301526044820187905291519190921691634b704acd91606480830192600092919082900301818387803b15801561265957600080fd5b505af115801561266d573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167fc2008aa15e9b0989ec7ae02bc3d8054428c527c989269ffb2a5bff829028a012886040518082815260200191505060405180910390a35050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d602081101561273f57600080fd5b50516001600160a01b03163314806127d85750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156127a057600080fd5b505afa1580156127b4573d6000803e3d6000fd5b505050506040513d60208110156127ca57600080fd5b50516001600160a01b031633145b612817576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b816001600160a01b03166351cff8d9826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561286657600080fd5b505af115801561287a573d6000803e3d6000fd5b5050505061297e600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156128cf57600080fd5b505afa1580156128e3573d6000803e3d6000fd5b505050506040513d60208110156128f957600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561294157600080fd5b505afa158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b50516001600160a01b0384169190613717565b5050565b6001600160a01b03821660009081526004602052604090205460609081908067ffffffffffffffff811180156129b757600080fd5b506040519080825280602002602001820160405280156129e1578160200160208202803683370190505b5092508067ffffffffffffffff811180156129fb57600080fd5b50604051908082528060200260200182016040528015612a25578160200160208202803683370190505b50915060005b81811015612b68576001600160a01b0386166000908152600460205260408120805483908110612a5757fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080858381518110612a8457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000816001600160a01b031663722713f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d6020811015612b0957600080fd5b5051905086811015612b3e5780858481518110612b2257fe5b6020908102919091010152612b3787826136d5565b9650612b5e565b86858481518110612b4b57fe5b6020026020010181815250505050612b68565b5050600101612a2b565b50509250929050565b6006602052600090815260409020546001600160a01b031681565b6001600160a01b038281166000908152600660205260409020548391163314612be5576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6000612bf184846107d7565b90506000816001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2e57600080fd5b505afa158015612c42573d6000803e3d6000fd5b505050506040513d6020811015612c5857600080fd5b505190506001600160a01b0380821690861614612d55576001600160a01b038086166000818152600360209081526040808320868616845290915290205490911690612ca5908287613717565b806001600160a01b031663248391ff8784886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015612d0d57600080fd5b505af1158015612d21573d6000803e3d6000fd5b505050506040513d6020811015612d3757600080fd5b50519450612d4f6001600160a01b0383168487613717565b50612d69565b612d696001600160a01b0386168386613717565b816001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612da457600080fd5b505af1158015612db8573d6000803e3d6000fd5b50506040516001600160a01b03851692507fd9ff27d148b72eef72d3ccadcd1d61afe5d6fae843f1cc6a7b19c99f787c11de9150600090a25050505050565b6007602052600090815260409020546001600160a01b031681565b600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6057600080fd5b505afa158015612e74573d6000803e3d6000fd5b505050506040513d6020811015612e8a57600080fd5b50516001600160a01b03163314612ed6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0383166001600160a01b0319909116811790915560408051918252517ff936751e3ffe55eec34636f5166fff2a5714505f4a3aa0862829ddb1eb75f1019181900360200190a150565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7857600080fd5b505afa158015612f8c573d6000803e3d6000fd5b505050506040513d6020811015612fa257600080fd5b50516001600160a01b031633148061303b5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561300357600080fd5b505afa158015613017573d6000803e3d6000fd5b505050506040513d602081101561302d57600080fd5b50516001600160a01b031633145b61307a576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b60025460408051635aa6e67560e01b8152905161297e926001600160a01b031691635aa6e675916004808301926020929190829003018186803b1580156130c057600080fd5b505afa1580156130d4573d6000803e3d6000fd5b505050506040513d60208110156130ea57600080fd5b50516001600160a01b0384169083613717565b60015481565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561315157600080fd5b505afa158015613165573d6000803e3d6000fd5b505050506040513d602081101561317b57600080fd5b50516001600160a01b03163314806132145750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156131dc57600080fd5b505afa1580156131f0573d6000803e3d6000fd5b505050506040513d602081101561320657600080fd5b50516001600160a01b031633145b613253576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b0380841660008181526003602090815260408083208786168085529083529281902080549587166001600160a01b0319909616861790558051938452908301919091528181019290925290517f304562ece6c846eb82a8b84b5370f7f035e32bd2c10433989984bcf15513f41f9181900360600190a1505050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001600160a01b038281166000908152600660205260409020548391163314613354576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6060806133618585612982565b9150915060005b82518110156134345760006001600160a01b031683828151811061338857fe5b60200260200101516001600160a01b031614156133a457613434565b8281815181106133b057fe5b60200260200101516001600160a01b0316632e1a7d4d8383815181106133d257fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561341057600080fd5b505af1158015613424573d6000803e3d6000fd5b5050600190920191506133689050565b505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561348a57600080fd5b505afa15801561349e573d6000803e3d6000fd5b505050506040513d60208110156134b457600080fd5b50516001600160a01b031633148061354d5750600260009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561351557600080fd5b505afa158015613529573d6000803e3d6000fd5b505050506040513d602081101561353f57600080fd5b50516001600160a01b031633145b61358c576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156135c757600080fd5b505af11580156135db573d6000803e3d6000fd5b5050505050565b600061367461271061366e84600260009054906101000a90046001600160a01b03166001600160a01b031663825139096040518163ffffffff1660e01b815260040160206040518083038186803b15801561363c57600080fd5b505afa158015613650573d6000803e3d6000fd5b505050506040513d602081101561366657600080fd5b50519061376e565b906137c7565b9392505050565b600082820183811015613674576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061367483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613809565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526137699084906138a0565b505050565b60008261377d57506000610a8c565b8282028284828161378a57fe5b04146136745760405162461bcd60e51b8152600401808060200182810382526021815260200180613bbc6021913960400191505060405180910390fd5b600061367483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613951565b600081848411156138985760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561385d578181015183820152602001613845565b50505050905090810190601f16801561388a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606138f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b69092919063ffffffff16565b8051909150156137695780806020019051602081101561391457600080fd5b50516137695760405162461bcd60e51b815260040180806020018281038252602a815260200180613bdd602a913960400191505060405180910390fd5b600081836139a05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561385d578181015183820152602001613845565b5060008385816139ac57fe5b0495945050505050565b60606139c584846000856139cd565b949350505050565b606082471015613a0e5760405162461bcd60e51b8152600401808060200182810382526026815260200180613b966026913960400191505060405180910390fd5b613a1785613b29565b613a68576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613aa75780518252601f199092019160209182019101613a88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613b09576040519150601f19603f3d011682016040523d82523d6000602084013e613b0e565b606091505b5091509150613b1e828286613b2f565b979650505050505050565b3b151590565b60608315613b3e575081613674565b825115613b4e5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561385d57818101518382015260200161384556fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220515fb92c3c9ddecdedca5a83fdd6cfff676ef061221be5a520a0608f9ebb478064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStrategy(address,address,uint256,address,bool,uint256)": {
        "details": "Only callable by governance",
        "params": {
          "_canHarvest": "Flag for whether the strategy can be harvested",
          "_cap": "The cap of the strategy",
          "_converter": "The converter of the strategy (can be zero address)",
          "_strategy": "The address of the strategy",
          "_timeout": "The timeout between harvests",
          "_token": "The address of the token"
        }
      },
      "balanceOf(address)": {
        "details": "This function would make deposits more expensive for the more strategies that are added for a given token",
        "params": {
          "_token": "The address of the token"
        }
      },
      "claimInsurance(address)": {
        "details": "Only callable by governanceWhen insurance is claimed by the controller, the insurance fund of the vault is zeroed out, increasing the getPricePerFullShare and applying the gains to everyone in the vault.",
        "params": {
          "_vault": "The address of the vault"
        }
      },
      "constructor": {
        "params": {
          "_vaultManager": "The address of the vaultManager"
        }
      },
      "earn(address,uint256)": {
        "details": "Only callable by a vault",
        "params": {
          "_amount": "The amount that will be invested",
          "_token": "The address of the token"
        }
      },
      "getBestStrategyEarn(address,uint256)": {
        "params": {
          "_amount": "The amount that will be invested",
          "_token": "The address of the token"
        }
      },
      "getBestStrategyWithdraw(address,uint256)": {
        "details": "Since Solidity doesn't support dynamic arrays in memory, the returned arrays from this function will always be the same length as the amount of strategies for a token. Check that _strategies[i] != address(0) when consuming to know when to break out of the loop.",
        "params": {
          "_amount": "The amount that will be withdrawn",
          "_token": "The address of the token"
        }
      },
      "getCap(address,address)": {
        "params": {
          "_strategy": "The address of the strategy",
          "_token": "The address of the token"
        }
      },
      "harvestStrategy(address)": {
        "details": "Only callable by governance, the strategist, or the harvester",
        "params": {
          "_strategy": "The address of the strategy"
        }
      },
      "inCaseStrategyGetStuck(address,address)": {
        "details": "Only callable by governance or the strategist",
        "params": {
          "_strategy": "The address of the strategy",
          "_token": "The address of the token"
        }
      },
      "inCaseTokensGetStuck(address,uint256)": {
        "details": "Only callable by governance or the strategist",
        "params": {
          "_amount": "The amount that will be withdrawn",
          "_token": "The address of the token"
        }
      },
      "investEnabled()": {
        "details": "Should be called by the vault"
      },
      "removeStrategy(address,address,uint256)": {
        "details": "Only callable by governance or strategist",
        "params": {
          "_strategy": "The address of the strategy",
          "_timeout": "The timeout between harvests",
          "_token": "The address of the token"
        }
      },
      "reorderStrategies(address,address,address)": {
        "details": "Only callable by governance or strategist",
        "params": {
          "_strategy1": "The address of the first strategy",
          "_strategy2": "The address of the second strategy",
          "_token": "The address of the token"
        }
      },
      "setCap(address,address,uint256)": {
        "details": "Only callable by governance or strategistIf the balance of the strategy is greater than the new cap (except if the cap is 0), then withdraw the difference from the strategy to the vault.",
        "params": {
          "_cap": "The new cap of the strategy",
          "_strategy": "The address of the strategy",
          "_token": "The address of the token"
        }
      },
      "setConverter(address,address,address)": {
        "details": "Only callable by governance or strategist",
        "params": {
          "_converter": "The address of the converter",
          "_input": "The address of the input token",
          "_output": "The address of the output token"
        }
      },
      "setInvestEnabled(bool)": {
        "details": "Only callable by governance or strategist",
        "params": {
          "_investEnabled": "The new bool of the invest enabled flag"
        }
      },
      "setMaxStrategies(uint256)": {
        "details": "Only callable by governance or strategist",
        "params": {
          "_maxStrategies": "The new value of the maximum strategies"
        }
      },
      "setVault(address,address)": {
        "details": "Only callable by governance or strategist",
        "params": {
          "_token": "The address of the token",
          "_vault": "The address of the vault"
        }
      },
      "setVaultManager(address)": {
        "details": "Only callable by governance",
        "params": {
          "_vaultManager": "The address of the vault manager"
        }
      },
      "strategies(address)": {
        "params": {
          "_token": "The address of the token"
        }
      },
      "want(address)": {
        "details": "Since strategies can have different want tokens, default to using the want token of the vault for a given token.",
        "params": {
          "_token": "The address of the token"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Only callable by a vaultIf the withdraw amount is greater than the first strategy given by getBestStrategyWithdraw, this function will loop over strategies until the requested amount is met.",
        "params": {
          "_amount": "The amount that will be withdrawn",
          "_token": "The address of the token"
        }
      },
      "withdrawAll(address)": {
        "details": "Only callable by governance or the strategist",
        "params": {
          "_strategy": "The address of the strategy"
        }
      },
      "withdrawFee(address,uint256)": {
        "params": {
          "_amount": "The amount that will be withdrawn"
        }
      }
    },
    "title": "StrategyControllerV2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Earn(address)": {
        "notice": "Logged when earn is called for a strategy"
      },
      "Harvest(address)": {
        "notice": "Logged when harvest is called for a strategy"
      },
      "InsuranceClaimed(address)": {
        "notice": "Logged when insurance is claimed for a vault"
      },
      "SetConverter(address,address,address)": {
        "notice": "Logged when a converter is set"
      },
      "SetVaultManager(address)": {
        "notice": "Logged when a vault manager is set"
      },
      "StrategiesReordered(address,address,address)": {
        "notice": "Logged when strategies are reordered for a token"
      },
      "StrategyAdded(address,address,uint256)": {
        "notice": "Logged when a strategy is added for a token"
      },
      "StrategyRemoved(address,address)": {
        "notice": "Logged when a strategy is removed for a token"
      }
    },
    "kind": "user",
    "methods": {
      "addStrategy(address,address,uint256,address,bool,uint256)": {
        "notice": "Adds a strategy for a given token"
      },
      "balanceOf(address)": {
        "notice": "Returns the balance of the sum of all strategies for a given token"
      },
      "claimInsurance(address)": {
        "notice": "Claims the insurance fund of a vault"
      },
      "earn(address,uint256)": {
        "notice": "Invests funds into a strategy"
      },
      "getBestStrategyEarn(address,uint256)": {
        "notice": "Returns the best (optimistic) strategy for funds to be sent to with earn"
      },
      "getBestStrategyWithdraw(address,uint256)": {
        "notice": "Returns the best (optimistic) strategy for funds to be withdrawn from"
      },
      "getCap(address,address)": {
        "notice": "Returns the cap of a strategy for a given token"
      },
      "harvestStrategy(address)": {
        "notice": "Harvests the specified strategy"
      },
      "inCaseStrategyGetStuck(address,address)": {
        "notice": "Withdraws token from a strategy to governance"
      },
      "inCaseTokensGetStuck(address,uint256)": {
        "notice": "Withdraws token from the controller to governance"
      },
      "investEnabled()": {
        "notice": "Returns whether investing is enabled for the calling vault"
      },
      "removeStrategy(address,address,uint256)": {
        "notice": "Removes a strategy for a given token"
      },
      "reorderStrategies(address,address,address)": {
        "notice": "Reorders two strategies for a given token"
      },
      "setCap(address,address,uint256)": {
        "notice": "Sets/updates the cap of a strategy for a token"
      },
      "setConverter(address,address,address)": {
        "notice": "Sets/updates the converter for given input and output tokens"
      },
      "setInvestEnabled(bool)": {
        "notice": "Sets/updates the global invest enabled flag"
      },
      "setMaxStrategies(uint256)": {
        "notice": "Sets/updates the maximum number of strategies for a token"
      },
      "setVault(address,address)": {
        "notice": "Sets the address of a vault for a given token"
      },
      "setVaultManager(address)": {
        "notice": "Sets the address of the vault manager contract"
      },
      "strategies(address)": {
        "notice": "Returns all the strategies for a given token"
      },
      "want(address)": {
        "notice": "Returns the want address of a given token"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws funds from a strategy"
      },
      "withdrawAll(address)": {
        "notice": "Withdraws all funds from a strategy"
      },
      "withdrawFee(address,uint256)": {
        "notice": "Returns the fee for withdrawing a specified amount"
      }
    },
    "notice": "This controller allows multiple strategies to be used for a single token, and multiple tokens are supported.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3537,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "globalInvestEnabled",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3539,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "maxStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3541,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "vaultManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVaultManager)2503"
      },
      {
        "astId": 3563,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "converters",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 3567,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "tokenStrategies",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(TokenStrategy)3557_storage)"
      },
      {
        "astId": 3572,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "strategyTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3577,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "vaults",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3581,
        "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
        "label": "vaultTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVaultManager)2503": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_struct(TokenStrategy)3557_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyControllerV2.TokenStrategy)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenStrategy)3557_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenStrategy)3557_storage": {
        "encoding": "inplace",
        "label": "struct StrategyControllerV2.TokenStrategy",
        "members": [
          {
            "astId": 3544,
            "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
            "label": "strategies",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3548,
            "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3552,
            "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
            "label": "active",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3556,
            "contract": "contracts/metavault/controllers/StrategyControllerV2.sol:StrategyControllerV2",
            "label": "caps",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}