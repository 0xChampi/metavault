{
  "address": "0x347B497B15B91C704BEA7664Fab6F6Cd3922176E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenDAI",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenUSDC",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenUSDT",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token3CRV",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenYAX",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_yaxPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCKS_PER_WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accYaxPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptContractDepositor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "calc_token_amount_deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        }
      ],
      "name": "calc_token_amount_withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convert_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "converter",
      "outputs": [
        {
          "internalType": "contract IConverter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_min_mint_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "_amounts",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "_min_mint_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isStake",
          "type": "bool"
        }
      ],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "earnExtra",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnLowerlimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochEndBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochRewardMultiplers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inputTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "pendingYax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_acceptContractDepositor",
          "type": "bool"
        }
      ],
      "name": "setAcceptContractDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConverter",
          "name": "_converter",
          "type": "address"
        }
      ],
      "name": "setConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_earnLowerlimit",
          "type": "uint256"
        }
      ],
      "name": "setEarnLowerlimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_epochEndBlock",
          "type": "uint256"
        }
      ],
      "name": "setEpochEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_epochRewardMultipler",
          "type": "uint256"
        }
      ],
      "name": "setEpochRewardMultipler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        }
      ],
      "name": "setMin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalDepositCap",
          "type": "uint256"
        }
      ],
      "name": "setTotalDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "setVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yaxPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setYaxPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "stakeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token3CRV",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenYAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDepositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yaxRewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yaxPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64297077daf226ea219e098ce2a3b48c7eec81c59fcbec73635e336057bb6f10",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x347B497B15B91C704BEA7664Fab6F6Cd3922176E",
    "transactionIndex": 2,
    "gasUsed": "4223556",
    "logsBloom": "0x
    "blockHash": "0xb4792a628abbd97adb8574a30a66c545b06e27f165f351ca7e7c2e28368db0cc",
    "transactionHash": "0x64297077daf226ea219e098ce2a3b48c7eec81c59fcbec73635e336057bb6f10",
    "logs": [],
    "blockNumber": 22972670,
    "cumulativeGasUsed": "4462115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2B383417F6859a96a5fB3C28Ea0e7fa1887fA70d",
    "0x2640F74f8586b84D95bE5b48CA96eFC90320D30E",
    "0xda6E4647bD6f98A41292434277B466d654c52b75",
    "0x54f37AE099c0417146CE57615D4D39fB0D666bed",
    "0xdf0479A9fCAAF1C05944CB5A326301bd528e4F5A",
    "10000000000000",
    1
  ],
  "solcInputHash": "29c097734f195176561e60c2670ea13c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenDAI\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token3CRV\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenYAX\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_yaxPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accYaxPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptContractDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"calc_token_amount_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"calc_token_amount_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_amounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"earnExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnLowerlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochEndBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochRewardMultiplers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inputTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingYax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_acceptContractDepositor\",\"type\":\"bool\"}],\"name\":\"setAcceptContractDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnLowerlimit\",\"type\":\"uint256\"}],\"name\":\"setEarnLowerlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_epochEndBlock\",\"type\":\"uint256\"}],\"name\":\"setEpochEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_epochRewardMultipler\",\"type\":\"uint256\"}],\"name\":\"setEpochRewardMultipler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalDepositCap\",\"type\":\"uint256\"}],\"name\":\"setTotalDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"setVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yaxPerBlock\",\"type\":\"uint256\"}],\"name\":\"setYaxPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"stakeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token3CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenYAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yaxRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/yAxisMetaVault.sol\":\"yAxisMetaVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/metavault/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x34677b3f7fc870d4738321e11c0395054e0c995100878ff628e681e41b7ce199\",\"license\":\"MIT\"},\"contracts/metavault/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external returns (uint dy);\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n}\\n\",\"keccak256\":\"0xb2ce7af2aadcccdaddfa43ad14bf581f6d6d2fc85e7eb6c415675e2b1e0d4cd9\",\"license\":\"MIT\"},\"contracts/metavault/IMetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IMetaVault {\\n    function balance() external view returns (uint);\\n    function setController(address _controller) external;\\n    function claimInsurance() external;\\n    function token() external view returns (address);\\n    function available() external view returns (uint);\\n    function withdrawFee(uint _amount) external view returns (uint);\\n    function earn() external;\\n    function calc_token_amount_deposit(uint[3] calldata amounts) external view returns (uint);\\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\\n    function convert_rate(address _input, uint _amount) external view returns (uint);\\n    function deposit(uint _amount, address _input, uint _min_mint_amount, bool _isStake) external;\\n    function harvest(address reserve, uint amount) external;\\n    function withdraw(uint _shares, address _output) external;\\n    function want() external view returns (address);\\n    function getPricePerFullShare() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x6694e831055aef785b2ea8df8123f1dd549bc79ee24f0eb1538543fb79ca928e\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/yAxisMetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IConverter.sol\\\";\\nimport \\\"./IMetaVault.sol\\\";\\n\\n// @dev This metavault will pay YAX incentive for depositors and stakers\\n// It does not need minter key of YAX. Governance multisig will mint total of 34000 YAX and send into the vault in the beginning\\ncontract yAxisMetaVault is ERC20, IMetaVault {\\n    using Address for address;\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20[4] public inputTokens; // DAI, USDC, USDT, 3Crv\\n\\n    IERC20 public token3CRV;\\n    IERC20 public tokenYAX;\\n\\n    uint public min = 9500;\\n    uint public constant max = 10000;\\n\\n    uint public earnLowerlimit = 5 ether; // minimum to invest is 5 3CRV\\n    uint public totalDepositCap = 10000000 ether; // initial cap set at 10 million dollar\\n\\n    address public governance;\\n    address public controller;\\n    uint public insurance;\\n    IVaultManager public vaultManager;\\n    IConverter public converter;\\n\\n    bool public acceptContractDepositor = false; // dont accept contract at beginning\\n\\n    struct UserInfo {\\n        uint amount;\\n        uint yaxRewardDebt;\\n        uint accEarned;\\n    }\\n\\n    uint public lastRewardBlock;\\n    uint public accYaxPerShare;\\n\\n    uint public yaxPerBlock;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    address public treasuryWallet = 0x362Db1c17db4C79B51Fe6aD2d73165b1fe9BaB4a;\\n\\n    uint public constant BLOCKS_PER_WEEK = 46500;\\n\\n    // Block number when each epoch ends.\\n    uint[5] public epochEndBlocks;\\n\\n    // Reward multipler for each of 5 epoches (epochIndex: reward multipler)\\n    uint[6] public epochRewardMultiplers = [86000, 64000, 43000, 21000, 10000, 1];\\n\\n    event Deposit(address indexed user, uint amount);\\n    event Withdraw(address indexed user, uint amount);\\n    event RewardPaid(address indexed user, uint reward);\\n\\n    constructor (IERC20 _tokenDAI, IERC20 _tokenUSDC, IERC20 _tokenUSDT, IERC20 _token3CRV, IERC20 _tokenYAX,\\n        uint _yaxPerBlock, uint _startBlock) public ERC20(\\\"yAxis.io:MetaVault:3CRV\\\", \\\"MVLT\\\") {\\n        inputTokens[0] = _tokenDAI;\\n        inputTokens[1] = _tokenUSDC;\\n        inputTokens[2] = _tokenUSDT;\\n        inputTokens[3] = _token3CRV;\\n        token3CRV = _token3CRV;\\n        tokenYAX = _tokenYAX;\\n        yaxPerBlock = _yaxPerBlock; // supposed to be 0.000001 YAX (1000000000000 = 1e12 wei)\\n        lastRewardBlock = (_startBlock > block.number) ? _startBlock : block.number; // supposed to be 11,163,000 (Sat Oct 31 2020 06:30:00 GMT+0)\\n        epochEndBlocks[0] = lastRewardBlock + BLOCKS_PER_WEEK * 2; // weeks 1-2\\n        epochEndBlocks[1] = epochEndBlocks[0] + BLOCKS_PER_WEEK * 2; // weeks 3-4\\n        epochEndBlocks[2] = epochEndBlocks[1] + BLOCKS_PER_WEEK * 4; // month 2\\n        epochEndBlocks[3] = epochEndBlocks[2] + BLOCKS_PER_WEEK * 8; // month 3-4\\n        epochEndBlocks[4] = epochEndBlocks[3] + BLOCKS_PER_WEEK * 8; // month 5-6\\n        governance = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by a contract and we are not allowing.\\n     */\\n    modifier checkContract() {\\n        if (!acceptContractDepositor) {\\n            require(!address(msg.sender).isContract() && msg.sender == tx.origin, \\\"Sorry we do not accept contract!\\\");\\n        }\\n        _;\\n    }\\n\\n    // Ignore insurance fund for balance calculations\\n    function balance() public override view returns (uint) {\\n        uint bal = token3CRV.balanceOf(address(this));\\n        if (controller != address(0)) bal = bal.add(IController(controller).balanceOf(address(token3CRV)));\\n        return bal.sub(insurance);\\n    }\\n\\n    function setMin(uint _min) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        min = _min;\\n    }\\n\\n    function setGovernance(address _governance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setController(address _controller) public override {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        controller = _controller;\\n    }\\n\\n    function setConverter(IConverter _converter) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_converter.token() == address(token3CRV), \\\"!token3CRV\\\");\\n        converter = _converter;\\n    }\\n\\n    function setVaultManager(IVaultManager _vaultManager) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        vaultManager = _vaultManager;\\n    }\\n\\n    function setEarnLowerlimit(uint _earnLowerlimit) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        earnLowerlimit = _earnLowerlimit;\\n    }\\n\\n    function setTotalDepositCap(uint _totalDepositCap) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        totalDepositCap = _totalDepositCap;\\n    }\\n\\n    function setAcceptContractDepositor(bool _acceptContractDepositor) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        acceptContractDepositor = _acceptContractDepositor;\\n    }\\n\\n    function setYaxPerBlock(uint _yaxPerBlock) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        updateReward();\\n        yaxPerBlock = _yaxPerBlock;\\n    }\\n\\n    function setEpochEndBlock(uint8 _index, uint256 _epochEndBlock) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_index < 5, \\\"_index out of range\\\");\\n        require(_epochEndBlock > block.number, \\\"Too late to update\\\");\\n        require(epochEndBlocks[_index] > block.number, \\\"Too late to update\\\");\\n        epochEndBlocks[_index] = _epochEndBlock;\\n    }\\n\\n    function setEpochRewardMultipler(uint8 _index, uint256 _epochRewardMultipler) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_index > 0 && _index < 6, \\\"Index out of range\\\");\\n        require(epochEndBlocks[_index - 1] > block.number, \\\"Too late to update\\\");\\n        epochRewardMultiplers[_index] = _epochRewardMultipler;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        for (uint8 epochId = 5; epochId >= 1; --epochId) {\\n            if (_to >= epochEndBlocks[epochId - 1]) {\\n                if (_from >= epochEndBlocks[epochId - 1]) return _to.sub(_from).mul(epochRewardMultiplers[epochId]);\\n                uint256 multiplier = _to.sub(epochEndBlocks[epochId - 1]).mul(epochRewardMultiplers[epochId]);\\n                if (epochId == 1) return multiplier.add(epochEndBlocks[0].sub(_from).mul(epochRewardMultiplers[0]));\\n                for (epochId = epochId - 1; epochId >= 1; --epochId) {\\n                    if (_from >= epochEndBlocks[epochId - 1]) return multiplier.add(epochEndBlocks[epochId].sub(_from).mul(epochRewardMultiplers[epochId]));\\n                    multiplier = multiplier.add(epochEndBlocks[epochId].sub(epochEndBlocks[epochId - 1]).mul(epochRewardMultiplers[epochId]));\\n                }\\n                return multiplier.add(epochEndBlocks[0].sub(_from).mul(epochRewardMultiplers[0]));\\n            }\\n        }\\n        return _to.sub(_from).mul(epochRewardMultiplers[0]);\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        treasuryWallet = _treasuryWallet;\\n    }\\n\\n    function claimInsurance() external override {\\n        // if claim by controller for auto-compounding (current insurance will stay to increase sharePrice)\\n        // otherwise send the fund to treasuryWallet\\n        if (msg.sender != controller) {\\n            // claim by governance for insurance\\n            require(msg.sender == governance, \\\"!governance\\\");\\n            token3CRV.safeTransfer(treasuryWallet, insurance);\\n        }\\n        insurance = 0;\\n    }\\n\\n    function token() public override view returns (address) {\\n        return address(token3CRV);\\n    }\\n\\n    // Custom logic in here for how much the vault allows to be borrowed\\n    // Sets minimum required on-hand to keep small withdrawals cheap\\n    function available() public override view returns (uint) {\\n        return token3CRV.balanceOf(address(this)).mul(min).div(max);\\n    }\\n\\n    function withdrawFee(uint _amount) public override view returns (uint) {\\n        return (controller == address(0)) ? 0 : IController(controller).withdrawFee(address(token3CRV), _amount);\\n    }\\n\\n    function earn() public override {\\n        if (controller != address(0)) {\\n            IController _contrl = IController(controller);\\n            if (_contrl.investEnabled()) {\\n                uint _bal = available();\\n                token3CRV.safeTransfer(controller, _bal);\\n                _contrl.earn(address(token3CRV), _bal);\\n            }\\n        }\\n    }\\n\\n    function calc_token_amount_deposit(uint[3] calldata amounts) external override view returns (uint) {\\n        return converter.calc_token_amount(amounts, true);\\n    }\\n\\n    function calc_token_amount_withdraw(uint _shares, address _output) external override view returns (uint) {\\n        uint _withdrawFee = withdrawFee(_shares);\\n        if (_withdrawFee > 0) {\\n            _shares = _shares.mul(10000 - _withdrawFee).div(10000);\\n        }\\n        uint r = (balance().mul(_shares)).div(totalSupply());\\n        if (_output == address(token3CRV)) {\\n            return r;\\n        }\\n        return converter.calc_token_amount_withdraw(r, _output);\\n    }\\n\\n    function convert_rate(address _input, uint _amount) external override view returns (uint) {\\n        return converter.convert_rate(_input, address(token3CRV), _amount);\\n    }\\n\\n    function deposit(uint _amount, address _input, uint _min_mint_amount, bool _isStake) external override checkContract {\\n        require(_amount > 0, \\\"!_amount\\\");\\n        uint _pool = balance();\\n        uint _before = token3CRV.balanceOf(address(this));\\n        if (_input == address(token3CRV)) {\\n            token3CRV.safeTransferFrom(msg.sender, address(this), _amount);\\n        } else if (converter.convert_rate(_input, address(token3CRV), _amount) > 0) {\\n            IERC20(_input).safeTransferFrom(msg.sender, address(converter), _amount);\\n            converter.convert(_input, address(token3CRV), _amount);\\n        }\\n        uint _after = token3CRV.balanceOf(address(this));\\n        require(totalDepositCap == 0 || _after <= totalDepositCap, \\\">totalDepositCap\\\");\\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\\n        require(_amount >= _min_mint_amount, \\\"slippage\\\");\\n        if (_amount > 0) {\\n            if (!_isStake) {\\n                _deposit(msg.sender, _pool, _amount);\\n            } else {\\n                uint _shares = _deposit(address(this), _pool, _amount);\\n                _stakeShares(_shares);\\n            }\\n        }\\n    }\\n\\n    // Transfers tokens of all kinds\\n    // 0: DAI, 1: USDT, 2: USDC, 3: 3CRV\\n    function depositAll(uint[4] calldata _amounts, uint _min_mint_amount, bool _isStake) external checkContract {\\n        uint _pool = balance();\\n        uint _before = token3CRV.balanceOf(address(this));\\n        bool hasStables = false;\\n        for (uint8 i = 0; i < 4; i++) {\\n            uint _inputAmount = _amounts[i];\\n            if (_inputAmount > 0) {\\n                if (i == 3) {\\n                    inputTokens[i].safeTransferFrom(msg.sender, address(this), _inputAmount);\\n                } else if (converter.convert_rate(address(inputTokens[i]), address(token3CRV), _inputAmount) > 0) {\\n                    inputTokens[i].safeTransferFrom(msg.sender, address(converter), _inputAmount);\\n                    hasStables = true;\\n                }\\n            }\\n        }\\n        if (hasStables) {\\n            uint[3] memory _stablesAmounts;\\n            _stablesAmounts[0] = _amounts[0];\\n            _stablesAmounts[1] = _amounts[1];\\n            _stablesAmounts[2] = _amounts[2];\\n            converter.convert_stables(_stablesAmounts);\\n        }\\n        uint _after = token3CRV.balanceOf(address(this));\\n        require(totalDepositCap == 0 || _after <= totalDepositCap, \\\">totalDepositCap\\\");\\n        uint _totalDepositAmount = _after.sub(_before); // Additional check for deflationary tokens\\n        require(_totalDepositAmount >= _min_mint_amount, \\\"slippage\\\");\\n        if (_totalDepositAmount > 0) {\\n            if (!_isStake) {\\n                _deposit(msg.sender, _pool, _totalDepositAmount);\\n            } else {\\n                uint _shares = _deposit(address(this), _pool, _totalDepositAmount);\\n                _stakeShares(_shares);\\n            }\\n        }\\n    }\\n\\n    function stakeShares(uint _shares) external {\\n        uint _before = balanceOf(address(this));\\n        IERC20(address(this)).transferFrom(msg.sender, address(this), _shares);\\n        uint _after = balanceOf(address(this));\\n        _shares = _after.sub(_before);\\n        // Additional check for deflationary tokens\\n        _stakeShares(_shares);\\n    }\\n\\n    function _deposit(address _mintTo, uint _pool, uint _amount) internal returns (uint _shares) {\\n        if (address(vaultManager) != address(0)) {\\n            // expected 0.1% of deposits go into an insurance fund (or auto-compounding if called by controller) in-case of negative profits to protect withdrawals\\n            // it is updated by governance (community vote)\\n            uint _insuranceFee = vaultManager.insuranceFee();\\n            if (_insuranceFee > 0) {\\n                uint _insurance = _amount.mul(_insuranceFee).div(10000);\\n                _amount = _amount.sub(_insurance);\\n                insurance = insurance.add(_insurance);\\n            }\\n        }\\n\\n        if (totalSupply() == 0) {\\n            _shares = _amount;\\n        } else {\\n            _shares = (_amount.mul(totalSupply())).div(_pool);\\n        }\\n        if (_shares > 0) {\\n            if (token3CRV.balanceOf(address(this)) > earnLowerlimit) {\\n                earn();\\n            }\\n            _mint(_mintTo, _shares);\\n        }\\n    }\\n\\n    function _stakeShares(uint _shares) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        updateReward();\\n        _getReward();\\n        user.amount = user.amount.add(_shares);\\n        user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12);\\n        emit Deposit(msg.sender, _shares);\\n    }\\n\\n    // View function to see pending YAXs on frontend.\\n    function pendingYax(address _account) public view returns (uint _pending) {\\n        UserInfo storage user = userInfo[_account];\\n        uint _accYaxPerShare = accYaxPerShare;\\n        uint lpSupply = balanceOf(address(this));\\n        if (block.number > lastRewardBlock && lpSupply != 0) {\\n            uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\\n            _accYaxPerShare = accYaxPerShare.add(_multiplier.mul(yaxPerBlock).mul(1e12).div(lpSupply));\\n        }\\n        _pending = user.amount.mul(_accYaxPerShare).div(1e12).sub(user.yaxRewardDebt);\\n    }\\n\\n    function updateReward() public {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n        uint lpSupply = balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\\n        accYaxPerShare = accYaxPerShare.add(_multiplier.mul(yaxPerBlock).mul(1e12).div(lpSupply));\\n        lastRewardBlock = block.number;\\n    }\\n\\n    function _getReward() internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint _pendingYax = user.amount.mul(accYaxPerShare).div(1e12).sub(user.yaxRewardDebt);\\n        if (_pendingYax > 0) {\\n            user.accEarned = user.accEarned.add(_pendingYax);\\n            safeYaxTransfer(msg.sender, _pendingYax);\\n            emit RewardPaid(msg.sender, _pendingYax);\\n        }\\n    }\\n\\n    function withdrawAll(address _output) external {\\n        unstake(userInfo[msg.sender].amount);\\n        withdraw(balanceOf(msg.sender), _output);\\n    }\\n\\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\\n    function harvest(address reserve, uint amount) external override {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(reserve != address(token3CRV), \\\"token3CRV\\\");\\n        IERC20(reserve).safeTransfer(controller, amount);\\n    }\\n\\n    // call unstake(0) for getting reward\\n    function unstake(uint _amount) public {\\n        updateReward();\\n        _getReward();\\n        UserInfo storage user = userInfo[msg.sender];\\n        if (_amount > 0) {\\n            require(user.amount >= _amount, \\\"stakedBal < _amount\\\");\\n            user.amount = user.amount.sub(_amount);\\n            IERC20(address(this)).transfer(msg.sender, _amount);\\n        }\\n        user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    // No rebalance implementation for lower fees and faster swaps\\n    function withdraw(uint _shares, address _output) public override {\\n        uint _userBal = balanceOf(msg.sender);\\n        if (_shares > _userBal) {\\n            uint _need = _shares.sub(_userBal);\\n            require(_need <= userInfo[msg.sender].amount, \\\"_userBal+staked < _shares\\\");\\n            unstake(_need);\\n        }\\n        uint r = (balance().mul(_shares)).div(totalSupply());\\n        _burn(msg.sender, _shares);\\n\\n        if (address(vaultManager) != address(0)) {\\n            // expected 0.1% of withdrawal go back to vault (for auto-compounding) to protect withdrawals\\n            // it is updated by governance (community vote)\\n            uint _withdrawalProtectionFee = vaultManager.withdrawalProtectionFee();\\n            if (_withdrawalProtectionFee > 0) {\\n                uint _withdrawalProtection = r.mul(_withdrawalProtectionFee).div(10000);\\n                r = r.sub(_withdrawalProtection);\\n            }\\n        }\\n\\n        // Check balance\\n        uint b = token3CRV.balanceOf(address(this));\\n        if (b < r) {\\n            uint _toWithdraw = r.sub(b);\\n            if (controller != address(0)) {\\n                IController(controller).withdraw(address(token3CRV), _toWithdraw);\\n            }\\n            uint _after = token3CRV.balanceOf(address(this));\\n            uint _diff = _after.sub(b);\\n            if (_diff < _toWithdraw) {\\n                r = b.add(_diff);\\n            }\\n        }\\n\\n        if (_output == address(token3CRV)) {\\n            token3CRV.safeTransfer(msg.sender, r);\\n        } else {\\n            require(converter.convert_rate(address(token3CRV), _output, r) > 0, \\\"rate=0\\\");\\n            token3CRV.safeTransfer(address(converter), r);\\n            uint _outputAmount = converter.convert(address(token3CRV), _output, r);\\n            IERC20(_output).safeTransfer(msg.sender, _outputAmount);\\n        }\\n    }\\n\\n    function want() external override view returns (address) {\\n        return address(token3CRV);\\n    }\\n\\n    function getPricePerFullShare() external override view returns (uint) {\\n        return balance().mul(1e18).div(totalSupply());\\n    }\\n\\n    // Safe YAX transfer, ensure we have enough balance.\\n    function safeYaxTransfer(address _to, uint _amount) internal {\\n        uint _tokenBal = tokenYAX.balanceOf(address(this));\\n        tokenYAX.safeTransfer(_to, (_tokenBal < _amount) ? _tokenBal : _amount);\\n    }\\n\\n    // Only allows to earn some extra yield from non-core tokens - and auto-compounding the bought 3CRV\\n    function earnExtra(address _token) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(address(_token) != address(token3CRV), \\\"3crv\\\");\\n        require(address(_token) != address(this), \\\"mlvt\\\");\\n        uint _amount = IERC20(_token).balanceOf(address(this));\\n        require(converter.convert_rate(_token, address(token3CRV), _amount) > 0, \\\"rate=0\\\");\\n        IERC20(_token).safeTransfer(address(converter), _amount);\\n        converter.convert(_token, address(token3CRV), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x85d1ec18755b1e9aa2897580ca3df07f02a1c2b2b9200acf29ce8896a1b4f1eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61251c600c55674563918244f40000600d556a084595161401484a000000600e556013805460ff60a01b19169055601880546001600160a01b03191673362db1c17db4c79b51fe6ad2d73165b1fe9bab4a17905561014060405262014ff0608090815261fa0060a05261a7f860c05261520860e052612710610100526001610120526200009190601e90600662000248565b503480156200009f57600080fd5b506040516200445838038062004458833981810160405260e0811015620000c557600080fd5b5080516020808301516040808501516060860151608087015160a088015160c09098015184518086018652601781527f79417869732e696f3a4d6574615661756c743a33435256000000000000000000818901908152865180880190975260048752631355931560e21b9887019890985280519899969894979396929592949193909291620001579160039162000292565b5080516200016d90600490602084019062000292565b50506005805460ff1916601217905550600680546001600160a01b03199081166001600160a01b038a811691909117909255600780548216898416179055600880548216888416179055600980548216878416908117909155600a805483169091179055600b80549091169185169190911790556016829055438111620001f55743620001f7565b805b601481905562016b4881016019556202d6908101601a556205ad208101601b55620b5a408101601c556211076001601d555050600f80546001600160a01b03191633179055506200031c9350505050565b826006810192821562000280579160200282015b8281111562000280578251829062ffffff169055916020019190600101906200025c565b506200028e92915062000305565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d557805160ff191683800117855562000280565b8280016001018555821562000280579182015b8281111562000280578251825591602001919060010190620002e8565b5b808211156200028e576000815560010162000306565b61412c806200032c6000396000f3fe608060405234801561001057600080fd5b50600436106103e55760003560e01c80638e087c781161020a578063b69ef8a811610125578063dfc1e7d6116100b8578063f889794511610087578063f889794514610ac9578063f88e12f914610ad1578063fa09e63014610af7578063fc0c546a14610620578063fc47e20914610b1d576103e5565b8063dfc1e7d614610a7f578063ebbf5c1714610a9c578063f36c0a7214610ab9578063f77c479114610ac1576103e5565b8063c33c4475116100f4578063c33c447514610a25578063ceae909d14610a2d578063d389800f14610a49578063dd62ed3e14610a51576103e5565b8063b69ef8a8146109f0578063b774e0c3146109f8578063bd38837b14610a00578063be35761614610a08576103e5565b8063a75ac6081161019d578063ab033ea91161016c578063ab033ea914610952578063ae2841c714610978578063b19337a4146109a4578063b543503e146109ca576103e5565b8063a75ac608146108f0578063a8602fea146108f8578063a9059cbb1461091e578063a9f8d1811461094a576103e5565b806399be90dc116101d957806399be90dc1461088e578063a3d7c749146108b4578063a457c2d7146108bc578063a488680f146108e8576103e5565b80638e087c781461083b578063909d3f4c1461084357806392eefe9b1461086057806395d89b4114610886576103e5565b8063395093511161030557806367f4527e1161029857806370cf7f6f1161026757806370cf7f6f146107da57806377c7b8fc1461080057806389cf3204146108085780638a4adf24146108105780638dbb1e3a14610818576103e5565b806367f4527e146107855780636ac5db191461078d578063706557c01461079557806370a08231146107b4576103e5565b806348a0d754116102d457806348a0d75414610750578063569c426b146107585780635aa6e675146107755780635db88e851461077d576103e5565b806339509351146106e25780633fd500011461070e57806345dc3dd81461072b5780634626402b14610748576103e5565b806318160ddd1161037d5780632e17de781161034c5780632e17de781461065e578063313ce5671461067b57806336ef5eb41461069957806338b7f2cb146106b6576103e5565b806318160ddd146105c25780631959a002146105dc5780631f1fcd511461062057806323b872dd14610628576103e5565b8063095ea7b3116103b9578063095ea7b3146104fb5780630cc9fff31461053b5780630edc63dc146105635780631494f1d71461059c576103e5565b8062f714ce146103ea578063018ee9b71461041857806306aaa1c81461044457806306fdde031461047e575b600080fd5b6104166004803603604081101561040057600080fd5b50803590602001356001600160a01b0316610b25565b005b6104166004803603604081101561042e57600080fd5b506001600160a01b038135169060200135611011565b6104166004803603608081101561045a57600080fd5b508035906001600160a01b03602082013516906040810135906060013515156110cb565b6104866114d8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104c05781810151838201526020016104a8565b50505050905090810190601f1680156104ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105276004803603604081101561051157600080fd5b506001600160a01b03813516906020013561156e565b604080519115158252519081900360200190f35b610416600480360360c081101561055157600080fd5b50608081013560a0820135151561158c565b6105806004803603602081101561057957600080fd5b50356119f2565b604080516001600160a01b039092168252519081900360200190f35b610416600480360360408110156105b257600080fd5b5060ff8135169060200135611a0f565b6105ca611b64565b60408051918252519081900360200190f35b610602600480360360208110156105f257600080fd5b50356001600160a01b0316611b6a565b60408051938452602084019290925282820152519081900360600190f35b610580611b8b565b6105276004803603606081101561063e57600080fd5b506001600160a01b03813581169160208101359091169060400135611b9a565b6104166004803603602081101561067457600080fd5b5035611c22565b610683611d6c565b6040805160ff9092168252519081900360200190f35b610416600480360360208110156106af57600080fd5b5035611d75565b6105ca600480360360408110156106cc57600080fd5b506001600160a01b038135169060200135611dcf565b610527600480360360408110156106f857600080fd5b506001600160a01b038135169060200135611e65565b6105ca6004803603602081101561072457600080fd5b5035611eb3565b6104166004803603602081101561074157600080fd5b5035611ec7565b610580611f19565b6105ca611f28565b6104166004803603602081101561076e57600080fd5b5035611fbc565b61058061206d565b6105ca61207c565b610580612082565b6105ca612091565b610416600480360360208110156107ab57600080fd5b50351515612097565b6105ca600480360360208110156107ca57600080fd5b50356001600160a01b0316612102565b610416600480360360408110156107f057600080fd5b5060ff813516906020013561211d565b6105ca612234565b6105ca612255565b61058061225b565b6105ca6004803603604081101561082e57600080fd5b508035906020013561226a565b6105ca61241a565b6104166004803603602081101561085957600080fd5b5035612420565b6104166004803603602081101561087657600080fd5b50356001600160a01b0316612472565b6104866124e1565b610416600480360360208110156108a457600080fd5b50356001600160a01b0316612542565b610527612814565b610527600480360360408110156108d257600080fd5b506001600160a01b038135169060200135612824565b61058061288c565b61041661289b565b6104166004803603602081101561090e57600080fd5b50356001600160a01b0316612922565b6105276004803603604081101561093457600080fd5b506001600160a01b038135169060200135612991565b6105ca6129a5565b6104166004803603602081101561096857600080fd5b50356001600160a01b03166129ab565b6105ca6004803603604081101561098e57600080fd5b50803590602001356001600160a01b0316612a1a565b610416600480360360208110156109ba57600080fd5b50356001600160a01b0316612b07565b610416600480360360208110156109e057600080fd5b50356001600160a01b0316612c33565b6105ca612ca2565b6105ca612dd1565b610580612dd7565b6105ca60048036036020811015610a1e57600080fd5b5035612de6565b6105ca612e8a565b6105ca60048036036060811015610a4357600080fd5b50612e90565b610416612f2f565b6105ca60048036036040811015610a6757600080fd5b506001600160a01b038135811691602001351661304e565b6105ca60048036036020811015610a9557600080fd5b5035613079565b61041660048036036020811015610ab257600080fd5b5035613086565b6104166130d8565b61058061314b565b6105ca61315a565b6105ca60048036036020811015610ae757600080fd5b50356001600160a01b0316613160565b61041660048036036020811015610b0d57600080fd5b50356001600160a01b031661320c565b6105ca613237565b6000610b3033612102565b905080831115610bb8576000610b46848361323d565b33600090815260176020526040902054909150811115610bad576040805162461bcd60e51b815260206004820152601960248201527f5f7573657242616c2b7374616b6564203c205f73686172657300000000000000604482015290519081900360640190fd5b610bb681611c22565b505b6000610bdd610bc5611b64565b610bd786610bd1612ca2565b9061327f565b906132d8565b9050610be9338561331a565b6012546001600160a01b031615610c975760125460408051638251390960e01b815290516000926001600160a01b0316916382513909916004808301926020929190829003018186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b505190508015610c95576000610c85612710610bd7858561327f565b9050610c91838261323d565b9250505b505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d6020811015610d0c57600080fd5b5051905081811015610e49576000610d24838361323d565b6010549091506001600160a01b031615610da957601054600a546040805163f3fef3a360e01b81526001600160a01b039283166004820152602481018590529051919092169163f3fef3a391604480830192600092919082900301818387803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b505050505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d6020811015610e1e57600080fd5b505190506000610e2e828561323d565b905082811015610e4557610e428482613416565b94505b5050505b600a546001600160a01b0385811691161415610e7b57600a54610e76906001600160a01b03163384613470565b61100a565b601354600a5460408051630db3e24f60e21b81526001600160a01b039283166004820152878316602482015260448101869052905160009392909216916336cf893c91606480820192602092909190829003018186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d6020811015610f0857600080fd5b505111610f45576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b601354600a54610f62916001600160a01b03918216911684613470565b601354600a546040805163248391ff60e01b81526001600160a01b0392831660048201528783166024820152604481018690529051600093929092169163248391ff9160648082019260209290919082900301818787803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b505050506040513d6020811015610ff057600080fd5b505190506110086001600160a01b0386163383613470565b505b5050505050565b6010546001600160a01b0316331461105e576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b600a546001600160a01b03838116911614156110ad576040805162461bcd60e51b81526020600482015260096024820152683a37b5b2b719a1a92b60b91b604482015290519081900360640190fd5b6010546110c7906001600160a01b03848116911683613470565b5050565b601354600160a01b900460ff16611142576110e5336134c2565b1580156110f157503332145b611142576040805162461bcd60e51b815260206004820181905260248201527f536f72727920776520646f206e6f742061636365707420636f6e747261637421604482015290519081900360640190fd5b60008411611182576040805162461bcd60e51b81526020600482015260086024820152670857d85b5bdd5b9d60c21b604482015290519081900360640190fd5b600061118c612ca2565b600a54604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d602081101561120757600080fd5b5051600a549091506001600160a01b038681169116141561123f57600a5461123a906001600160a01b03163330896134c8565b61137e565b601354600a5460408051630db3e24f60e21b81526001600160a01b0389811660048301529283166024820152604481018a9052905160009392909216916336cf893c91606480820192602092909190829003018186803b1580156112a257600080fd5b505afa1580156112b6573d6000803e3d6000fd5b505050506040513d60208110156112cc57600080fd5b5051111561137e576013546112f0906001600160a01b0387811691339116896134c8565b601354600a546040805163248391ff60e01b81526001600160a01b0389811660048301529283166024820152604481018a90529051919092169163248391ff9160648083019260209291908290030181600087803b15801561135157600080fd5b505af1158015611365573d6000803e3d6000fd5b505050506040513d602081101561137b57600080fd5b50505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156113c957600080fd5b505afa1580156113dd573d6000803e3d6000fd5b505050506040513d60208110156113f357600080fd5b5051600e5490915015806114095750600e548111155b61144d576040805162461bcd60e51b815260206004820152601060248201526f03e746f74616c4465706f7369744361760841b604482015290519081900360640190fd5b611457818361323d565b965084871015611499576040805162461bcd60e51b8152602060048201526008602482015267736c69707061676560c01b604482015290519081900360640190fd5b86156114cf57836114b5576114af338489613522565b506114cf565b60006114c230858a613522565b90506114cd816136a8565b505b50505050505050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156115645780601f1061153957610100808354040283529160200191611564565b820191906000526020600020905b81548152906001019060200180831161154757829003601f168201915b5050505050905090565b600061158261157b61372d565b8484613731565b5060015b92915050565b601354600160a01b900460ff16611603576115a6336134c2565b1580156115b257503332145b611603576040805162461bcd60e51b815260206004820181905260248201527f536f72727920776520646f206e6f742061636365707420636f6e747261637421604482015290519081900360640190fd5b600061160d612ca2565b600a54604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561165e57600080fd5b505afa158015611672573d6000803e3d6000fd5b505050506040513d602081101561168857600080fd5b505190506000805b60048160ff1610156117d5576000878260ff16600481106116ad57fe5b6020020135905080156117cc578160ff16600314156116f4576116ef33308360068660ff16600481106116dc57fe5b01546001600160a01b03169291906134c8565b6117cc565b6013546000906001600160a01b03166336cf893c600660ff86166004811061171857fe5b0154600a546040805160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201869052516064808301926020929190829003018186803b15801561177257600080fd5b505afa158015611786573d6000803e3d6000fd5b505050506040513d602081101561179c57600080fd5b505111156117cc576013546117c79033906001600160a01b031683600660ff8716600481106116dc57fe5b600192505b50600101611690565b508015611896576117e4613f23565b8635815260208088013590820152604080880135818301526013549051635bd88e2f60e11b81526001600160a01b039091169063b7b11c5e9083906004018082606080838360005b8381101561184457818101518382015260200161182c565b50505050905001915050602060405180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050506040513d602081101561189257600080fd5b5050505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d602081101561190b57600080fd5b5051600e5490915015806119215750600e548111155b611965576040805162461bcd60e51b815260206004820152601060248201526f03e746f74616c4465706f7369744361760841b604482015290519081900360640190fd5b6000611971828561323d565b9050868110156119b3576040805162461bcd60e51b8152602060048201526008602482015267736c69707061676560c01b604482015290519081900360640190fd5b80156114cd57856119cf576119c9338683613522565b506114cd565b60006119dc308784613522565b90506119e7816136a8565b505050505050505050565b600681600481106119ff57fe5b01546001600160a01b0316905081565b600f546001600160a01b03163314611a5c576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b60058260ff1610611aaa576040805162461bcd60e51b81526020600482015260136024820152725f696e646578206f7574206f662072616e676560681b604482015290519081900360640190fd5b438111611af3576040805162461bcd60e51b8152602060048201526012602482015271546f6f206c61746520746f2075706461746560701b604482015290519081900360640190fd5b4360198360ff1660058110611b0457fe5b015411611b4d576040805162461bcd60e51b8152602060048201526012602482015271546f6f206c61746520746f2075706461746560701b604482015290519081900360640190fd5b8060198360ff1660058110611b5e57fe5b01555050565b60025490565b60176020526000908152604090208054600182015460029092015490919083565b600a546001600160a01b031690565b6000611ba784848461381d565b611c1784611bb361372d565b611c1285604051806060016040528060288152602001614016602891396001600160a01b038a16600090815260016020526040812090611bf161372d565b6001600160a01b031681526020810191909152604001600020549190613978565b613731565b5060015b9392505050565b611c2a6130d8565b611c32613a0f565b3360009081526017602052604090208115611d14578054821115611c93576040805162461bcd60e51b81526020600482015260136024820152721cdd185ad95910985b080f0817d85b5bdd5b9d606a1b604482015290519081900360640190fd5b8054611c9f908361323d565b81556040805163a9059cbb60e01b8152336004820152602481018490529051309163a9059cbb9160448083019260209291908290030181600087803b158015611ce757600080fd5b505af1158015611cfb573d6000803e3d6000fd5b505050506040513d6020811015611d1157600080fd5b50505b6015548154611d2d9164e8d4a5100091610bd79161327f565b600182015560408051838152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050565b60055460ff1690565b600f546001600160a01b03163314611dc2576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611dca6130d8565b601655565b601354600a5460408051630db3e24f60e21b81526001600160a01b038681166004830152928316602482015260448101859052905160009392909216916336cf893c91606480820192602092909190829003018186803b158015611e3257600080fd5b505afa158015611e46573d6000803e3d6000fd5b505050506040513d6020811015611e5c57600080fd5b50519392505050565b6000611582611e7261372d565b84611c128560016000611e8361372d565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490613416565b60198160058110611ec057fe5b0154905081565b600f546001600160a01b03163314611f14576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600c55565b6018546001600160a01b031681565b600c54600a54604080516370a0823160e01b81523060048201529051600093611fb79361271093610bd7936001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b50519061327f565b905090565b6000611fc730612102565b604080516323b872dd60e01b8152336004820152306024820181905260448201869052915192935090916323b872dd916064808201926020929091908290030181600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506040513d602081101561204357600080fd5b506000905061205130612102565b905061205d818361323d565b9250612068836136a8565b505050565b600f546001600160a01b031681565b600e5481565b600b546001600160a01b031681565b61271081565b600f546001600160a01b031633146120e4576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b60138054911515600160a01b0260ff60a01b19909216919091179055565b6001600160a01b031660009081526020819052604090205490565b600f546001600160a01b0316331461216a576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b60008260ff16118015612180575060068260ff16105b6121c6576040805162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b604482015290519081900360640190fd5b4360196001840360ff16600581106121da57fe5b015411612223576040805162461bcd60e51b8152602060048201526012602482015271546f6f206c61746520746f2075706461746560701b604482015290519081900360640190fd5b80601e8360ff1660068110611b5e57fe5b6000611fb7612241611b64565b610bd7670de0b6b3a7640000610bd1612ca2565b60115481565b6012546001600160a01b031681565b600060055b60018160ff16106124085760196001820360ff166005811061228d57fe5b015483106123ff5760196001820360ff16600581106122a857fe5b015484106122d7576122cf601e8260ff16600681106122c357fe5b0154610bd1858761323d565b915050611586565b600061230d601e8360ff16600681106122ec57fe5b0154610bd160196001860360ff166005811061230457fe5b0154879061323d565b90508160ff166001141561234957612340612339601e60005b0154610bd188601960005b01549061323d565b8290613416565b92505050611586565b6001820391505b60018260ff16106123f05760196001830360ff166005811061236e57fe5b015485106123a257612340612339601e8460ff166006811061238c57fe5b0154610bd18860198760ff166005811061233157fe5b6123e2612339601e8460ff16600681106123b857fe5b0154610bd160196001870360ff16600581106123d057fe5b015460198760ff166005811061233157fe5b600019909201919050612350565b612340612339601e6000612326565b6000190161226f565b50601e54611c1b90610bd1848661323d565b600d5481565b600f546001600160a01b0316331461246d576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600d55565b600f546001600160a01b031633146124bf576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601080546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156115645780601f1061153957610100808354040283529160200191611564565b600f546001600160a01b0316331461258f576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600a546001600160a01b03828116911614156125db576040805162461bcd60e51b8152602060048083019190915260248201526319b1b93b60e11b604482015290519081900360640190fd5b6001600160a01b038116301415612622576040805162461bcd60e51b815260206004808301919091526024820152631b5b1d9d60e21b604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561267157600080fd5b505afa158015612685573d6000803e3d6000fd5b505050506040513d602081101561269b57600080fd5b5051601354600a5460408051630db3e24f60e21b81526001600160a01b038781166004830152928316602482015260448101859052905193945060009391909216916336cf893c916064808301926020929190829003018186803b15801561270257600080fd5b505afa158015612716573d6000803e3d6000fd5b505050506040513d602081101561272c57600080fd5b505111612769576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b601354612783906001600160a01b03848116911683613470565b601354600a546040805163248391ff60e01b81526001600160a01b0386811660048301529283166024820152604481018590529051919092169163248391ff9160648083019260209291908290030181600087803b1580156127e457600080fd5b505af11580156127f8573d6000803e3d6000fd5b505050506040513d602081101561280e57600080fd5b50505050565b601354600160a01b900460ff1681565b600061158261283161372d565b84611c12856040518060600160405280602581526020016140d2602591396001600061285b61372d565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190613978565b600a546001600160a01b031681565b6010546001600160a01b0316331461291b57600f546001600160a01b031633146128fa576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601854601154600a5461291b926001600160a01b0391821692911690613470565b6000601155565b600f546001600160a01b0316331461296f576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b0392909216919091179055565b600061158261299e61372d565b848461381d565b60145481565b600f546001600160a01b031633146129f8576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600080612a2684612de6565b90508015612a4357612a40612710610bd78684830361327f565b93505b6000612a5c612a50611b64565b610bd787610bd1612ca2565b600a549091506001600160a01b0385811691161415612a7e5791506115869050565b6013546040805163ae2841c760e01b8152600481018490526001600160a01b0387811660248301529151919092169163ae2841c7916044808301926020929190829003018186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6020811015612afc57600080fd5b505195945050505050565b600f546001600160a01b03163314612b54576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600a5460408051637e062a3560e11b815290516001600160a01b039283169284169163fc0c546a9160048083019260209291908290030181600087803b158015612b9d57600080fd5b505af1158015612bb1573d6000803e3d6000fd5b505050506040513d6020811015612bc757600080fd5b50516001600160a01b031614612c11576040805162461bcd60e51b815260206004820152600a60248201526910ba37b5b2b719a1a92b60b11b604482015290519081900360640190fd5b601380546001600160a01b0319166001600160a01b0392909216919091179055565b600f546001600160a01b03163314612c80576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601280546001600160a01b0319166001600160a01b0392909216919091179055565b600a54604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612cf257600080fd5b505afa158015612d06573d6000803e3d6000fd5b505050506040513d6020811015612d1c57600080fd5b50516010549091506001600160a01b031615612dbd57601054600a54604080516370a0823160e01b81526001600160a01b0392831660048201529051612dba9392909216916370a0823191602480820192602092909190829003018186803b158015612d8757600080fd5b505afa158015612d9b573d6000803e3d6000fd5b505050506040513d6020811015612db157600080fd5b50518290613416565b90505b601154612dcb90829061323d565b91505090565b60165481565b6013546001600160a01b031681565b6010546000906001600160a01b031615612e8257601054600a5460408051637ecdf29160e11b81526001600160a01b039283166004820152602481018690529051919092169163fd9be522916044808301926020929190829003018186803b158015612e5157600080fd5b505afa158015612e65573d6000803e3d6000fd5b505050506040513d6020811015612e7b57600080fd5b5051611586565b600092915050565b60155481565b601354604051633883e11960e01b81526000916001600160a01b031690633883e1199084906001906004018083606080828437600083820152931515601f909401601f19169091019283525050604051602080830193509181900382018186803b158015612efd57600080fd5b505afa158015612f11573d6000803e3d6000fd5b505050506040513d6020811015612f2757600080fd5b505192915050565b6010546001600160a01b03161561304c57601054604080516371f4f3fb60e01b815290516001600160a01b039092169182916371f4f3fb916004808301926020929190829003018186803b158015612f8657600080fd5b505afa158015612f9a573d6000803e3d6000fd5b505050506040513d6020811015612fb057600080fd5b50511561304a576000612fc1611f28565b601054600a54919250612fe1916001600160a01b03908116911683613470565b600a546040805163b02bf4b960e01b81526001600160a01b0392831660048201526024810184905290519184169163b02bf4b99160448082019260009290919082900301818387803b15801561303657600080fd5b505af1158015611008573d6000803e3d6000fd5b505b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b601e8160068110611ec057fe5b600f546001600160a01b031633146130d3576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600e55565b60145443116130e65761304c565b60006130f130612102565b90508061310257504360145561304c565b60006131106014544361226a565b905061314061313783610bd764e8d4a51000610bd16016548761327f90919063ffffffff16565b60155490613416565b601555505043601455565b6010546001600160a01b031681565b600c5481565b6001600160a01b03811660009081526017602052604081206015548261318530612102565b90506014544311801561319757508015155b156131d55760006131aa6014544361226a565b90506131d161313783610bd764e8d4a51000610bd16016548761327f90919063ffffffff16565b9250505b61320383600101546131fd64e8d4a51000610bd786886000015461327f90919063ffffffff16565b9061323d565b95945050505050565b3360009081526017602052604090205461322590611c22565b61304a61323133612102565b82610b25565b61b5a481565b6000611c1b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613978565b60008261328e57506000611586565b8282028284828161329b57fe5b0414611c1b5760405162461bcd60e51b8152600401808060200182810382526021815260200180613ff56021913960400191505060405180910390fd5b6000611c1b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613aa5565b6001600160a01b03821661335f5760405162461bcd60e51b815260040180806020018281038252602181526020018061403e6021913960400191505060405180910390fd5b61336b82600083612068565b6133a881604051806060016040528060228152602001613f65602291396001600160a01b0385166000908152602081905260409020549190613978565b6001600160a01b0383166000908152602081905260409020556002546133ce908261323d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082820183811015611c1b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612068908490613b0a565b3b151590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261280e908590613b0a565b6012546000906001600160a01b0316156135e457601254604080516397c4fac760e01b815290516000926001600160a01b0316916397c4fac7916004808301926020929190829003018186803b15801561357b57600080fd5b505afa15801561358f573d6000803e3d6000fd5b505050506040513d60208110156135a557600080fd5b5051905080156135e25760006135c1612710610bd7868561327f565b90506135cd848261323d565b6011549094506135dd9082613416565b601155505b505b6135ec611b64565b6135f7575080613610565b61360d83610bd7613606611b64565b859061327f565b90505b8015611c1b57600d54600a54604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561366457600080fd5b505afa158015613678573d6000803e3d6000fd5b505050506040513d602081101561368e57600080fd5b5051111561369e5761369e612f2f565b611c1b8482613bbb565b3360009081526017602052604090206136bf6130d8565b6136c7613a0f565b80546136d39083613416565b8082556015546136ee9164e8d4a5100091610bd7919061327f565b600182015560408051838152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050565b3390565b6001600160a01b0383166137765760405162461bcd60e51b81526004018080602001828103825260248152602001806140846024913960400191505060405180910390fd5b6001600160a01b0382166137bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180613f876022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166138625760405162461bcd60e51b815260040180806020018281038252602581526020018061405f6025913960400191505060405180910390fd5b6001600160a01b0382166138a75760405162461bcd60e51b8152600401808060200182810382526023815260200180613f426023913960400191505060405180910390fd5b6138b2838383612068565b6138ef81604051806060016040528060268152602001613fa9602691396001600160a01b0386166000908152602081905260409020549190613978565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461391e9082613416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115613a075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139cc5781810151838201526020016139b4565b50505050905090810190601f1680156139f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b33600090815260176020526040812060018101546015548254929392613a4592916131fd9164e8d4a5100091610bd7919061327f565b905080156110c7576002820154613a5c9082613416565b6002830155613a6b3382613cab565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25050565b60008183613af45760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156139cc5781810151838201526020016139b4565b506000838581613b0057fe5b0495945050505050565b6060613b5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d4a9092919063ffffffff16565b80519091501561206857808060200190516020811015613b7e57600080fd5b50516120685760405162461bcd60e51b815260040180806020018281038252602a8152602001806140a8602a913960400191505060405180910390fd5b6001600160a01b038216613c16576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b613c2260008383612068565b600254613c2f9082613416565b6002556001600160a01b038216600090815260208190526040902054613c559082613416565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600b54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613cf657600080fd5b505afa158015613d0a573d6000803e3d6000fd5b505050506040513d6020811015613d2057600080fd5b5051905061206883838310613d355783613d37565b825b600b546001600160a01b03169190613470565b6060613d598484600085613d61565b949350505050565b606082471015613da25760405162461bcd60e51b8152600401808060200182810382526026815260200180613fcf6026913960400191505060405180910390fd5b613dab856134c2565b613dfc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613e3b5780518252601f199092019160209182019101613e1c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613e9d576040519150601f19603f3d011682016040523d82523d6000602084013e613ea2565b606091505b5091509150613eb2828286613ebd565b979650505050505050565b60608315613ecc575081611c1b565b825115613edc5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156139cc5781810151838201526020016139b4565b6040518060600160405280600390602082028036833750919291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122047da7e1d3e2b62988b886f90f77383367758696292ad065669615e08d883ca4164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103e55760003560e01c80638e087c781161020a578063b69ef8a811610125578063dfc1e7d6116100b8578063f889794511610087578063f889794514610ac9578063f88e12f914610ad1578063fa09e63014610af7578063fc0c546a14610620578063fc47e20914610b1d576103e5565b8063dfc1e7d614610a7f578063ebbf5c1714610a9c578063f36c0a7214610ab9578063f77c479114610ac1576103e5565b8063c33c4475116100f4578063c33c447514610a25578063ceae909d14610a2d578063d389800f14610a49578063dd62ed3e14610a51576103e5565b8063b69ef8a8146109f0578063b774e0c3146109f8578063bd38837b14610a00578063be35761614610a08576103e5565b8063a75ac6081161019d578063ab033ea91161016c578063ab033ea914610952578063ae2841c714610978578063b19337a4146109a4578063b543503e146109ca576103e5565b8063a75ac608146108f0578063a8602fea146108f8578063a9059cbb1461091e578063a9f8d1811461094a576103e5565b806399be90dc116101d957806399be90dc1461088e578063a3d7c749146108b4578063a457c2d7146108bc578063a488680f146108e8576103e5565b80638e087c781461083b578063909d3f4c1461084357806392eefe9b1461086057806395d89b4114610886576103e5565b8063395093511161030557806367f4527e1161029857806370cf7f6f1161026757806370cf7f6f146107da57806377c7b8fc1461080057806389cf3204146108085780638a4adf24146108105780638dbb1e3a14610818576103e5565b806367f4527e146107855780636ac5db191461078d578063706557c01461079557806370a08231146107b4576103e5565b806348a0d754116102d457806348a0d75414610750578063569c426b146107585780635aa6e675146107755780635db88e851461077d576103e5565b806339509351146106e25780633fd500011461070e57806345dc3dd81461072b5780634626402b14610748576103e5565b806318160ddd1161037d5780632e17de781161034c5780632e17de781461065e578063313ce5671461067b57806336ef5eb41461069957806338b7f2cb146106b6576103e5565b806318160ddd146105c25780631959a002146105dc5780631f1fcd511461062057806323b872dd14610628576103e5565b8063095ea7b3116103b9578063095ea7b3146104fb5780630cc9fff31461053b5780630edc63dc146105635780631494f1d71461059c576103e5565b8062f714ce146103ea578063018ee9b71461041857806306aaa1c81461044457806306fdde031461047e575b600080fd5b6104166004803603604081101561040057600080fd5b50803590602001356001600160a01b0316610b25565b005b6104166004803603604081101561042e57600080fd5b506001600160a01b038135169060200135611011565b6104166004803603608081101561045a57600080fd5b508035906001600160a01b03602082013516906040810135906060013515156110cb565b6104866114d8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104c05781810151838201526020016104a8565b50505050905090810190601f1680156104ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105276004803603604081101561051157600080fd5b506001600160a01b03813516906020013561156e565b604080519115158252519081900360200190f35b610416600480360360c081101561055157600080fd5b50608081013560a0820135151561158c565b6105806004803603602081101561057957600080fd5b50356119f2565b604080516001600160a01b039092168252519081900360200190f35b610416600480360360408110156105b257600080fd5b5060ff8135169060200135611a0f565b6105ca611b64565b60408051918252519081900360200190f35b610602600480360360208110156105f257600080fd5b50356001600160a01b0316611b6a565b60408051938452602084019290925282820152519081900360600190f35b610580611b8b565b6105276004803603606081101561063e57600080fd5b506001600160a01b03813581169160208101359091169060400135611b9a565b6104166004803603602081101561067457600080fd5b5035611c22565b610683611d6c565b6040805160ff9092168252519081900360200190f35b610416600480360360208110156106af57600080fd5b5035611d75565b6105ca600480360360408110156106cc57600080fd5b506001600160a01b038135169060200135611dcf565b610527600480360360408110156106f857600080fd5b506001600160a01b038135169060200135611e65565b6105ca6004803603602081101561072457600080fd5b5035611eb3565b6104166004803603602081101561074157600080fd5b5035611ec7565b610580611f19565b6105ca611f28565b6104166004803603602081101561076e57600080fd5b5035611fbc565b61058061206d565b6105ca61207c565b610580612082565b6105ca612091565b610416600480360360208110156107ab57600080fd5b50351515612097565b6105ca600480360360208110156107ca57600080fd5b50356001600160a01b0316612102565b610416600480360360408110156107f057600080fd5b5060ff813516906020013561211d565b6105ca612234565b6105ca612255565b61058061225b565b6105ca6004803603604081101561082e57600080fd5b508035906020013561226a565b6105ca61241a565b6104166004803603602081101561085957600080fd5b5035612420565b6104166004803603602081101561087657600080fd5b50356001600160a01b0316612472565b6104866124e1565b610416600480360360208110156108a457600080fd5b50356001600160a01b0316612542565b610527612814565b610527600480360360408110156108d257600080fd5b506001600160a01b038135169060200135612824565b61058061288c565b61041661289b565b6104166004803603602081101561090e57600080fd5b50356001600160a01b0316612922565b6105276004803603604081101561093457600080fd5b506001600160a01b038135169060200135612991565b6105ca6129a5565b6104166004803603602081101561096857600080fd5b50356001600160a01b03166129ab565b6105ca6004803603604081101561098e57600080fd5b50803590602001356001600160a01b0316612a1a565b610416600480360360208110156109ba57600080fd5b50356001600160a01b0316612b07565b610416600480360360208110156109e057600080fd5b50356001600160a01b0316612c33565b6105ca612ca2565b6105ca612dd1565b610580612dd7565b6105ca60048036036020811015610a1e57600080fd5b5035612de6565b6105ca612e8a565b6105ca60048036036060811015610a4357600080fd5b50612e90565b610416612f2f565b6105ca60048036036040811015610a6757600080fd5b506001600160a01b038135811691602001351661304e565b6105ca60048036036020811015610a9557600080fd5b5035613079565b61041660048036036020811015610ab257600080fd5b5035613086565b6104166130d8565b61058061314b565b6105ca61315a565b6105ca60048036036020811015610ae757600080fd5b50356001600160a01b0316613160565b61041660048036036020811015610b0d57600080fd5b50356001600160a01b031661320c565b6105ca613237565b6000610b3033612102565b905080831115610bb8576000610b46848361323d565b33600090815260176020526040902054909150811115610bad576040805162461bcd60e51b815260206004820152601960248201527f5f7573657242616c2b7374616b6564203c205f73686172657300000000000000604482015290519081900360640190fd5b610bb681611c22565b505b6000610bdd610bc5611b64565b610bd786610bd1612ca2565b9061327f565b906132d8565b9050610be9338561331a565b6012546001600160a01b031615610c975760125460408051638251390960e01b815290516000926001600160a01b0316916382513909916004808301926020929190829003018186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b505190508015610c95576000610c85612710610bd7858561327f565b9050610c91838261323d565b9250505b505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d6020811015610d0c57600080fd5b5051905081811015610e49576000610d24838361323d565b6010549091506001600160a01b031615610da957601054600a546040805163f3fef3a360e01b81526001600160a01b039283166004820152602481018590529051919092169163f3fef3a391604480830192600092919082900301818387803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b505050505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d6020811015610e1e57600080fd5b505190506000610e2e828561323d565b905082811015610e4557610e428482613416565b94505b5050505b600a546001600160a01b0385811691161415610e7b57600a54610e76906001600160a01b03163384613470565b61100a565b601354600a5460408051630db3e24f60e21b81526001600160a01b039283166004820152878316602482015260448101869052905160009392909216916336cf893c91606480820192602092909190829003018186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d6020811015610f0857600080fd5b505111610f45576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b601354600a54610f62916001600160a01b03918216911684613470565b601354600a546040805163248391ff60e01b81526001600160a01b0392831660048201528783166024820152604481018690529051600093929092169163248391ff9160648082019260209290919082900301818787803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b505050506040513d6020811015610ff057600080fd5b505190506110086001600160a01b0386163383613470565b505b5050505050565b6010546001600160a01b0316331461105e576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b600a546001600160a01b03838116911614156110ad576040805162461bcd60e51b81526020600482015260096024820152683a37b5b2b719a1a92b60b91b604482015290519081900360640190fd5b6010546110c7906001600160a01b03848116911683613470565b5050565b601354600160a01b900460ff16611142576110e5336134c2565b1580156110f157503332145b611142576040805162461bcd60e51b815260206004820181905260248201527f536f72727920776520646f206e6f742061636365707420636f6e747261637421604482015290519081900360640190fd5b60008411611182576040805162461bcd60e51b81526020600482015260086024820152670857d85b5bdd5b9d60c21b604482015290519081900360640190fd5b600061118c612ca2565b600a54604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d602081101561120757600080fd5b5051600a549091506001600160a01b038681169116141561123f57600a5461123a906001600160a01b03163330896134c8565b61137e565b601354600a5460408051630db3e24f60e21b81526001600160a01b0389811660048301529283166024820152604481018a9052905160009392909216916336cf893c91606480820192602092909190829003018186803b1580156112a257600080fd5b505afa1580156112b6573d6000803e3d6000fd5b505050506040513d60208110156112cc57600080fd5b5051111561137e576013546112f0906001600160a01b0387811691339116896134c8565b601354600a546040805163248391ff60e01b81526001600160a01b0389811660048301529283166024820152604481018a90529051919092169163248391ff9160648083019260209291908290030181600087803b15801561135157600080fd5b505af1158015611365573d6000803e3d6000fd5b505050506040513d602081101561137b57600080fd5b50505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156113c957600080fd5b505afa1580156113dd573d6000803e3d6000fd5b505050506040513d60208110156113f357600080fd5b5051600e5490915015806114095750600e548111155b61144d576040805162461bcd60e51b815260206004820152601060248201526f03e746f74616c4465706f7369744361760841b604482015290519081900360640190fd5b611457818361323d565b965084871015611499576040805162461bcd60e51b8152602060048201526008602482015267736c69707061676560c01b604482015290519081900360640190fd5b86156114cf57836114b5576114af338489613522565b506114cf565b60006114c230858a613522565b90506114cd816136a8565b505b50505050505050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156115645780601f1061153957610100808354040283529160200191611564565b820191906000526020600020905b81548152906001019060200180831161154757829003601f168201915b5050505050905090565b600061158261157b61372d565b8484613731565b5060015b92915050565b601354600160a01b900460ff16611603576115a6336134c2565b1580156115b257503332145b611603576040805162461bcd60e51b815260206004820181905260248201527f536f72727920776520646f206e6f742061636365707420636f6e747261637421604482015290519081900360640190fd5b600061160d612ca2565b600a54604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561165e57600080fd5b505afa158015611672573d6000803e3d6000fd5b505050506040513d602081101561168857600080fd5b505190506000805b60048160ff1610156117d5576000878260ff16600481106116ad57fe5b6020020135905080156117cc578160ff16600314156116f4576116ef33308360068660ff16600481106116dc57fe5b01546001600160a01b03169291906134c8565b6117cc565b6013546000906001600160a01b03166336cf893c600660ff86166004811061171857fe5b0154600a546040805160e085901b6001600160e01b03191681526001600160a01b03938416600482015292909116602483015260448201869052516064808301926020929190829003018186803b15801561177257600080fd5b505afa158015611786573d6000803e3d6000fd5b505050506040513d602081101561179c57600080fd5b505111156117cc576013546117c79033906001600160a01b031683600660ff8716600481106116dc57fe5b600192505b50600101611690565b508015611896576117e4613f23565b8635815260208088013590820152604080880135818301526013549051635bd88e2f60e11b81526001600160a01b039091169063b7b11c5e9083906004018082606080838360005b8381101561184457818101518382015260200161182c565b50505050905001915050602060405180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050506040513d602081101561189257600080fd5b5050505b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d602081101561190b57600080fd5b5051600e5490915015806119215750600e548111155b611965576040805162461bcd60e51b815260206004820152601060248201526f03e746f74616c4465706f7369744361760841b604482015290519081900360640190fd5b6000611971828561323d565b9050868110156119b3576040805162461bcd60e51b8152602060048201526008602482015267736c69707061676560c01b604482015290519081900360640190fd5b80156114cd57856119cf576119c9338683613522565b506114cd565b60006119dc308784613522565b90506119e7816136a8565b505050505050505050565b600681600481106119ff57fe5b01546001600160a01b0316905081565b600f546001600160a01b03163314611a5c576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b60058260ff1610611aaa576040805162461bcd60e51b81526020600482015260136024820152725f696e646578206f7574206f662072616e676560681b604482015290519081900360640190fd5b438111611af3576040805162461bcd60e51b8152602060048201526012602482015271546f6f206c61746520746f2075706461746560701b604482015290519081900360640190fd5b4360198360ff1660058110611b0457fe5b015411611b4d576040805162461bcd60e51b8152602060048201526012602482015271546f6f206c61746520746f2075706461746560701b604482015290519081900360640190fd5b8060198360ff1660058110611b5e57fe5b01555050565b60025490565b60176020526000908152604090208054600182015460029092015490919083565b600a546001600160a01b031690565b6000611ba784848461381d565b611c1784611bb361372d565b611c1285604051806060016040528060288152602001614016602891396001600160a01b038a16600090815260016020526040812090611bf161372d565b6001600160a01b031681526020810191909152604001600020549190613978565b613731565b5060015b9392505050565b611c2a6130d8565b611c32613a0f565b3360009081526017602052604090208115611d14578054821115611c93576040805162461bcd60e51b81526020600482015260136024820152721cdd185ad95910985b080f0817d85b5bdd5b9d606a1b604482015290519081900360640190fd5b8054611c9f908361323d565b81556040805163a9059cbb60e01b8152336004820152602481018490529051309163a9059cbb9160448083019260209291908290030181600087803b158015611ce757600080fd5b505af1158015611cfb573d6000803e3d6000fd5b505050506040513d6020811015611d1157600080fd5b50505b6015548154611d2d9164e8d4a5100091610bd79161327f565b600182015560408051838152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050565b60055460ff1690565b600f546001600160a01b03163314611dc2576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611dca6130d8565b601655565b601354600a5460408051630db3e24f60e21b81526001600160a01b038681166004830152928316602482015260448101859052905160009392909216916336cf893c91606480820192602092909190829003018186803b158015611e3257600080fd5b505afa158015611e46573d6000803e3d6000fd5b505050506040513d6020811015611e5c57600080fd5b50519392505050565b6000611582611e7261372d565b84611c128560016000611e8361372d565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490613416565b60198160058110611ec057fe5b0154905081565b600f546001600160a01b03163314611f14576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600c55565b6018546001600160a01b031681565b600c54600a54604080516370a0823160e01b81523060048201529051600093611fb79361271093610bd7936001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b50519061327f565b905090565b6000611fc730612102565b604080516323b872dd60e01b8152336004820152306024820181905260448201869052915192935090916323b872dd916064808201926020929091908290030181600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506040513d602081101561204357600080fd5b506000905061205130612102565b905061205d818361323d565b9250612068836136a8565b505050565b600f546001600160a01b031681565b600e5481565b600b546001600160a01b031681565b61271081565b600f546001600160a01b031633146120e4576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b60138054911515600160a01b0260ff60a01b19909216919091179055565b6001600160a01b031660009081526020819052604090205490565b600f546001600160a01b0316331461216a576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b60008260ff16118015612180575060068260ff16105b6121c6576040805162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b604482015290519081900360640190fd5b4360196001840360ff16600581106121da57fe5b015411612223576040805162461bcd60e51b8152602060048201526012602482015271546f6f206c61746520746f2075706461746560701b604482015290519081900360640190fd5b80601e8360ff1660068110611b5e57fe5b6000611fb7612241611b64565b610bd7670de0b6b3a7640000610bd1612ca2565b60115481565b6012546001600160a01b031681565b600060055b60018160ff16106124085760196001820360ff166005811061228d57fe5b015483106123ff5760196001820360ff16600581106122a857fe5b015484106122d7576122cf601e8260ff16600681106122c357fe5b0154610bd1858761323d565b915050611586565b600061230d601e8360ff16600681106122ec57fe5b0154610bd160196001860360ff166005811061230457fe5b0154879061323d565b90508160ff166001141561234957612340612339601e60005b0154610bd188601960005b01549061323d565b8290613416565b92505050611586565b6001820391505b60018260ff16106123f05760196001830360ff166005811061236e57fe5b015485106123a257612340612339601e8460ff166006811061238c57fe5b0154610bd18860198760ff166005811061233157fe5b6123e2612339601e8460ff16600681106123b857fe5b0154610bd160196001870360ff16600581106123d057fe5b015460198760ff166005811061233157fe5b600019909201919050612350565b612340612339601e6000612326565b6000190161226f565b50601e54611c1b90610bd1848661323d565b600d5481565b600f546001600160a01b0316331461246d576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600d55565b600f546001600160a01b031633146124bf576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601080546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156115645780601f1061153957610100808354040283529160200191611564565b600f546001600160a01b0316331461258f576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600a546001600160a01b03828116911614156125db576040805162461bcd60e51b8152602060048083019190915260248201526319b1b93b60e11b604482015290519081900360640190fd5b6001600160a01b038116301415612622576040805162461bcd60e51b815260206004808301919091526024820152631b5b1d9d60e21b604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561267157600080fd5b505afa158015612685573d6000803e3d6000fd5b505050506040513d602081101561269b57600080fd5b5051601354600a5460408051630db3e24f60e21b81526001600160a01b038781166004830152928316602482015260448101859052905193945060009391909216916336cf893c916064808301926020929190829003018186803b15801561270257600080fd5b505afa158015612716573d6000803e3d6000fd5b505050506040513d602081101561272c57600080fd5b505111612769576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b601354612783906001600160a01b03848116911683613470565b601354600a546040805163248391ff60e01b81526001600160a01b0386811660048301529283166024820152604481018590529051919092169163248391ff9160648083019260209291908290030181600087803b1580156127e457600080fd5b505af11580156127f8573d6000803e3d6000fd5b505050506040513d602081101561280e57600080fd5b50505050565b601354600160a01b900460ff1681565b600061158261283161372d565b84611c12856040518060600160405280602581526020016140d2602591396001600061285b61372d565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190613978565b600a546001600160a01b031681565b6010546001600160a01b0316331461291b57600f546001600160a01b031633146128fa576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601854601154600a5461291b926001600160a01b0391821692911690613470565b6000601155565b600f546001600160a01b0316331461296f576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b0392909216919091179055565b600061158261299e61372d565b848461381d565b60145481565b600f546001600160a01b031633146129f8576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600080612a2684612de6565b90508015612a4357612a40612710610bd78684830361327f565b93505b6000612a5c612a50611b64565b610bd787610bd1612ca2565b600a549091506001600160a01b0385811691161415612a7e5791506115869050565b6013546040805163ae2841c760e01b8152600481018490526001600160a01b0387811660248301529151919092169163ae2841c7916044808301926020929190829003018186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6020811015612afc57600080fd5b505195945050505050565b600f546001600160a01b03163314612b54576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600a5460408051637e062a3560e11b815290516001600160a01b039283169284169163fc0c546a9160048083019260209291908290030181600087803b158015612b9d57600080fd5b505af1158015612bb1573d6000803e3d6000fd5b505050506040513d6020811015612bc757600080fd5b50516001600160a01b031614612c11576040805162461bcd60e51b815260206004820152600a60248201526910ba37b5b2b719a1a92b60b11b604482015290519081900360640190fd5b601380546001600160a01b0319166001600160a01b0392909216919091179055565b600f546001600160a01b03163314612c80576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b601280546001600160a01b0319166001600160a01b0392909216919091179055565b600a54604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612cf257600080fd5b505afa158015612d06573d6000803e3d6000fd5b505050506040513d6020811015612d1c57600080fd5b50516010549091506001600160a01b031615612dbd57601054600a54604080516370a0823160e01b81526001600160a01b0392831660048201529051612dba9392909216916370a0823191602480820192602092909190829003018186803b158015612d8757600080fd5b505afa158015612d9b573d6000803e3d6000fd5b505050506040513d6020811015612db157600080fd5b50518290613416565b90505b601154612dcb90829061323d565b91505090565b60165481565b6013546001600160a01b031681565b6010546000906001600160a01b031615612e8257601054600a5460408051637ecdf29160e11b81526001600160a01b039283166004820152602481018690529051919092169163fd9be522916044808301926020929190829003018186803b158015612e5157600080fd5b505afa158015612e65573d6000803e3d6000fd5b505050506040513d6020811015612e7b57600080fd5b5051611586565b600092915050565b60155481565b601354604051633883e11960e01b81526000916001600160a01b031690633883e1199084906001906004018083606080828437600083820152931515601f909401601f19169091019283525050604051602080830193509181900382018186803b158015612efd57600080fd5b505afa158015612f11573d6000803e3d6000fd5b505050506040513d6020811015612f2757600080fd5b505192915050565b6010546001600160a01b03161561304c57601054604080516371f4f3fb60e01b815290516001600160a01b039092169182916371f4f3fb916004808301926020929190829003018186803b158015612f8657600080fd5b505afa158015612f9a573d6000803e3d6000fd5b505050506040513d6020811015612fb057600080fd5b50511561304a576000612fc1611f28565b601054600a54919250612fe1916001600160a01b03908116911683613470565b600a546040805163b02bf4b960e01b81526001600160a01b0392831660048201526024810184905290519184169163b02bf4b99160448082019260009290919082900301818387803b15801561303657600080fd5b505af1158015611008573d6000803e3d6000fd5b505b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b601e8160068110611ec057fe5b600f546001600160a01b031633146130d3576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600e55565b60145443116130e65761304c565b60006130f130612102565b90508061310257504360145561304c565b60006131106014544361226a565b905061314061313783610bd764e8d4a51000610bd16016548761327f90919063ffffffff16565b60155490613416565b601555505043601455565b6010546001600160a01b031681565b600c5481565b6001600160a01b03811660009081526017602052604081206015548261318530612102565b90506014544311801561319757508015155b156131d55760006131aa6014544361226a565b90506131d161313783610bd764e8d4a51000610bd16016548761327f90919063ffffffff16565b9250505b61320383600101546131fd64e8d4a51000610bd786886000015461327f90919063ffffffff16565b9061323d565b95945050505050565b3360009081526017602052604090205461322590611c22565b61304a61323133612102565b82610b25565b61b5a481565b6000611c1b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613978565b60008261328e57506000611586565b8282028284828161329b57fe5b0414611c1b5760405162461bcd60e51b8152600401808060200182810382526021815260200180613ff56021913960400191505060405180910390fd5b6000611c1b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613aa5565b6001600160a01b03821661335f5760405162461bcd60e51b815260040180806020018281038252602181526020018061403e6021913960400191505060405180910390fd5b61336b82600083612068565b6133a881604051806060016040528060228152602001613f65602291396001600160a01b0385166000908152602081905260409020549190613978565b6001600160a01b0383166000908152602081905260409020556002546133ce908261323d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082820183811015611c1b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612068908490613b0a565b3b151590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261280e908590613b0a565b6012546000906001600160a01b0316156135e457601254604080516397c4fac760e01b815290516000926001600160a01b0316916397c4fac7916004808301926020929190829003018186803b15801561357b57600080fd5b505afa15801561358f573d6000803e3d6000fd5b505050506040513d60208110156135a557600080fd5b5051905080156135e25760006135c1612710610bd7868561327f565b90506135cd848261323d565b6011549094506135dd9082613416565b601155505b505b6135ec611b64565b6135f7575080613610565b61360d83610bd7613606611b64565b859061327f565b90505b8015611c1b57600d54600a54604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561366457600080fd5b505afa158015613678573d6000803e3d6000fd5b505050506040513d602081101561368e57600080fd5b5051111561369e5761369e612f2f565b611c1b8482613bbb565b3360009081526017602052604090206136bf6130d8565b6136c7613a0f565b80546136d39083613416565b8082556015546136ee9164e8d4a5100091610bd7919061327f565b600182015560408051838152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050565b3390565b6001600160a01b0383166137765760405162461bcd60e51b81526004018080602001828103825260248152602001806140846024913960400191505060405180910390fd5b6001600160a01b0382166137bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180613f876022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166138625760405162461bcd60e51b815260040180806020018281038252602581526020018061405f6025913960400191505060405180910390fd5b6001600160a01b0382166138a75760405162461bcd60e51b8152600401808060200182810382526023815260200180613f426023913960400191505060405180910390fd5b6138b2838383612068565b6138ef81604051806060016040528060268152602001613fa9602691396001600160a01b0386166000908152602081905260409020549190613978565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461391e9082613416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115613a075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139cc5781810151838201526020016139b4565b50505050905090810190601f1680156139f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b33600090815260176020526040812060018101546015548254929392613a4592916131fd9164e8d4a5100091610bd7919061327f565b905080156110c7576002820154613a5c9082613416565b6002830155613a6b3382613cab565b60408051828152905133917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25050565b60008183613af45760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156139cc5781810151838201526020016139b4565b506000838581613b0057fe5b0495945050505050565b6060613b5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d4a9092919063ffffffff16565b80519091501561206857808060200190516020811015613b7e57600080fd5b50516120685760405162461bcd60e51b815260040180806020018281038252602a8152602001806140a8602a913960400191505060405180910390fd5b6001600160a01b038216613c16576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b613c2260008383612068565b600254613c2f9082613416565b6002556001600160a01b038216600090815260208190526040902054613c559082613416565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600b54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613cf657600080fd5b505afa158015613d0a573d6000803e3d6000fd5b505050506040513d6020811015613d2057600080fd5b5051905061206883838310613d355783613d37565b825b600b546001600160a01b03169190613470565b6060613d598484600085613d61565b949350505050565b606082471015613da25760405162461bcd60e51b8152600401808060200182810382526026815260200180613fcf6026913960400191505060405180910390fd5b613dab856134c2565b613dfc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613e3b5780518252601f199092019160209182019101613e1c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613e9d576040519150601f19603f3d011682016040523d82523d6000602084013e613ea2565b606091505b5091509150613eb2828286613ebd565b979650505050505050565b60608315613ecc575081611c1b565b825115613edc5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156139cc5781810151838201526020016139b4565b6040518060600160405280600390602082028036833750919291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122047da7e1d3e2b62988b886f90f77383367758696292ad065669615e08d883ca4164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 235,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 241,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 243,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 245,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 249,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 8571,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "inputTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_contract(IERC20)799)4_storage"
      },
      {
        "astId": 8573,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "token3CRV",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)799"
      },
      {
        "astId": 8575,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "tokenYAX",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)799"
      },
      {
        "astId": 8578,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "min",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8584,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "earnLowerlimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8587,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "totalDepositCap",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8589,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "governance",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 8591,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "controller",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 8593,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "insurance",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 8595,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "vaultManager",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IVaultManager)1992"
      },
      {
        "astId": 8597,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "converter",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IConverter)1647"
      },
      {
        "astId": 8600,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "acceptContractDepositor",
        "offset": 20,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 8609,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 8611,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "accYaxPerShare",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 8613,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "yaxPerBlock",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 8617,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "userInfo",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_struct(UserInfo)8607_storage)"
      },
      {
        "astId": 8620,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 8627,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "epochEndBlocks",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 8638,
        "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
        "label": "epochRewardMultiplers",
        "offset": 0,
        "slot": "30",
        "type": "t_array(t_uint256)6_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)799)4_storage": {
        "base": "t_contract(IERC20)799",
        "encoding": "inplace",
        "label": "contract IERC20[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)6_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[6]",
        "numberOfBytes": "192"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConverter)1647": {
        "encoding": "inplace",
        "label": "contract IConverter",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)799": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)1992": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)8607_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct yAxisMetaVault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)8607_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)8607_storage": {
        "encoding": "inplace",
        "label": "struct yAxisMetaVault.UserInfo",
        "members": [
          {
            "astId": 8602,
            "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8604,
            "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
            "label": "yaxRewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8606,
            "contract": "contracts/metavault/yAxisMetaVault.sol:yAxisMetaVault",
            "label": "accEarned",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}