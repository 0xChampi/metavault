{
  "address": "0xD8c60f2f75059ed6df66F7E978B9c5ADE747499c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cvx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coinCount",
          "type": "uint256"
        },
        {
          "internalType": "contract IConvexVault",
          "name": "_convexVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableSwapPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_routerArray",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexVault",
      "outputs": [
        {
          "internalType": "contract IConvexVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvRewards",
      "outputs": [
        {
          "internalType": "contract IConvexRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvxDepositLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decimalMultiples",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEstimates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMostPremium",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_estimates",
          "type": "uint256[]"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routerArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_routerIndex",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_routerArray",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokenArray",
          "type": "address[]"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
  "receipt": {
    "to": null,
    "from": "0x91019BAE8beD657A416e8B5B582F30c5Eef99132",
    "contractAddress": "0xD8c60f2f75059ed6df66F7E978B9c5ADE747499c",
    "transactionIndex": 1,
    "gasUsed": "4429202",
    "logsBloom": "0x
    "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d",
    "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x650eD5c61219EebCF9434d65cdC3003c07DaEe35",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x650eD5c61219EebCF9434d65cdC3003c07DaEe35",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x650eD5c61219EebCF9434d65cdC3003c07DaEe35",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x650eD5c61219EebCF9434d65cdC3003c07DaEe35",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0xb364c348CC4B9600c2b2C0C19f7425D4f469594c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000f0ccabb34899652efea9751616fd94a73e4bd501"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x2CB6c1b5f367b1c939E4f53E633c7eEE16F0A57c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000f0ccabb34899652efea9751616fd94a73e4bd501"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x540c8a922Cc7E186AA0fd63b0B6aEDd5B5F08007",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000eaf467bfa4299b1fa97513d952cc47af97929760"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x540c8a922Cc7E186AA0fd63b0B6aEDd5B5F08007",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000f0ccabb34899652efea9751616fd94a73e4bd501"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0xDB0E1fe102Be9c0fD355100271283dF18bA4797F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0xDB0E1fe102Be9c0fD355100271283dF18bA4797F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x3631944Bd99a426d628070d91CDC559ae4276a6d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 10,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x3631944Bd99a426d628070d91CDC559ae4276a6d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0xDB0E1fe102Be9c0fD355100271283dF18bA4797F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 12,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0xDB0E1fe102Be9c0fD355100271283dF18bA4797F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 13,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x3631944Bd99a426d628070d91CDC559ae4276a6d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 14,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28315591,
        "transactionHash": "0x0946c0faa63648fec187f9bd882129ca74096db5bd3015ddf3c953abfea996a9",
        "address": "0x3631944Bd99a426d628070d91CDC559ae4276a6d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d8c60f2f75059ed6df66f7e978b9c5ade747499c",
          "0x000000000000000000000000ff363bdcfbc52c0d0fa93f23416ae9a5e015d10f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 15,
        "blockHash": "0x9539b987f51ec5f547a6e62bfaff62391b3bb5ee33d4501cf1d373e4fe9f141d"
      }
    ],
    "blockNumber": 28315591,
    "cumulativeGasUsed": "4542449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Convex: LINKCRV",
    "0x540c8a922Cc7E186AA0fd63b0B6aEDd5B5F08007",
    "0xDB0E1fe102Be9c0fD355100271283dF18bA4797F",
    "0x3631944Bd99a426d628070d91CDC559ae4276a6d",
    "0x650eD5c61219EebCF9434d65cdC3003c07DaEe35",
    1,
    2,
    "0xeaf467BFa4299B1fA97513D952cc47AF97929760",
    "0xF0cCAbb34899652eFea9751616fd94A73E4bD501",
    "0x2998B1809115511A5856a74552a100E7599D282f",
    "0x17CA30093a09C821321feCb67eC9C5c152BAd1ec",
    [
      "0xff363bdCfbc52C0d0fA93F23416Ae9A5e015d10f",
      "0xff363bdCfbc52C0d0fA93F23416Ae9A5e015d10f"
    ]
  ],
  "solcInputHash": "188d4737eecfc6086b2d8c0c9cde542d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coinCount\",\"type\":\"uint256\"},{\"internalType\":\"contract IConvexVault\",\"name\":\"_convexVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexVault\",\"outputs\":[{\"internalType\":\"contract IConvexVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewards\",\"outputs\":[{\"internalType\":\"contract IConvexRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxDepositLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decimalMultiples\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEstimates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_estimates\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routerIndex\",\"type\":\"uint256\"}],\"name\":\"setDefaultRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenArray\",\"type\":\"address[]\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"constructor\":{\"params\":{\"_coinCount\":\"The number of coins in the pool\",\"_controller\":\"The address of the controller\",\"_convexVault\":\"The address of the convex vault\",\"_crv\":\"The address of CRV\",\"_cvx\":\"The address of CVX\",\"_manager\":\"The address of the manager\",\"_name\":\"The strategy name\",\"_pid\":\"The pool id of convex\",\"_routerArray\":\"The addresses of routers for swapping tokens\",\"_stableSwapPool\":\"The address of the stable swap pool\",\"_want\":\"The desired token of the strategy\",\"_weth\":\"The address of WETH\"}},\"setDefaultRouter(uint256)\":{\"params\":{\"_routerIndex\":\"Gets the address of the router from routerArray\"}},\"setRouter(address[],address[])\":{\"params\":{\"_routerArray\":\"The addresses of routers\",\"_tokenArray\":\"The addresses of tokens that need to be approved by the strategy\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest(uint256[])\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setDefaultRouter(uint256)\":{\"notice\":\"Sets the default ISwap-compatible router\"},\"setRouter(address[],address[])\":{\"notice\":\"Sets the address of the ISwap-compatible router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/strategies/GeneralConvexStrategy.sol\":\"GeneralConvexStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ExtendedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface ExtendedIERC20 {\\n    function decimals() external view returns (uint8);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4ba01563f54a2993c1491d32f777e3df1af02151bef35d87a138b6d8fb5819bd\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ICVXMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICVXMinter {\\n    function maxSupply() external view returns (uint256);\\n    function totalCliffs() external view returns (uint256);\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5e45902be54246d307cac94eb03f099302b86657f3127de243c3226cd7e02b54\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256[] calldata _estimates) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\",\"keccak256\":\"0x8ce01e149a62d561d025ba8671b7487d33090189d896dcfc0f5464870b85d38e\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IConvexVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IConvexVault {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lptoken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        bool stake\\n    ) external returns (bool);\\n\\n    function depositAll(uint256 pid, bool stake) external returns (bool);\\n\\n    function withdraw(uint256 pid, uint256 amount) external returns (bool);\\n\\n    function withdrawAll(uint256 pid) external returns (bool);\\n}\\n\\ninterface IConvexRewards {\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf41ae24f86e7866b7edae28b1462033c59b0ca459c4bd5984571227357b68728\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n    function slippage() external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2047997ad37599e5b472606ec5f1433b2086b3a7eec31c27bc88d1e9a27cd720\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addVault(address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getToken(address) external view returns (address);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeVault(address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7643ce13f4882cd5e4fef64c7e82ef6b7037af24afb88ca0e97922f93d52850d\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwap2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap2Pool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xff6805d3eb86f95d733145255a37da3eb8c157cd1165080a539e11f9438cb9a5\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function coins(uint) external view returns (address);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xdd55ae52354c1fe99d2f8aefec0867285b266e5aedfadcc0f31003013822f503\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwapPool {\\n    function coins(uint256) external view returns (address);\\n    function get_virtual_price() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x2176922f5f4cf945b3171d80a9fa74b2f0ceabaa64cdf05c3a49cee0e68c1a97\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256[] calldata) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\\ninterface IStrategyExtended {\\n    function getEstimates() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xd1929e523830a082079cd819f46345ee5c28d79a1f271b2b0d58683194133938\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x054e1fbb6e5fc879fcd57c1fe554fe9838dbae742d35df59541c200e50fc6b59\",\"license\":\"MIT\"},\"contracts/v3/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStableSwap3Pool.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable override weth;\\n    address public immutable controller;\\n    IManager public immutable override manager;\\n    string public override name;\\n    address[] public routerArray;\\n    ISwap public override router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _routerArray The addresses of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _controller,\\n        address _manager,\\n        address _want,\\n        address _weth,\\n        address[] memory _routerArray\\n    ) public {\\n        name = _name;\\n        want = _want;\\n        controller = _controller;\\n        manager = IManager(_manager);\\n        weth = _weth;\\n        require(_routerArray.length > 0, \\\"Must input at least one router\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        for(uint i = 0; i < _routerArray.length; i++) {\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), 0);\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), type(uint256).max);\\n        }\\n        \\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, 0);\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _routerArray The addresses of routers\\n     * @param _tokenArray The addresses of tokens that need to be approved by the strategy\\n     */\\n     function setRouter(\\n        address[] calldata _routerArray,\\n        address[] calldata _tokenArray\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        address _router;\\n        uint256 _routerLength = _routerArray.length;\\n        uint256 _tokenArrayLength = _tokenArray.length;\\n        for(uint i = 0; i < _routerLength; i++) {\\n            _router = _routerArray[i];\\n            IERC20(weth).safeApprove(_router, 0);\\n            IERC20(weth).safeApprove(_router, type(uint256).max);\\n            for(uint j = 0; j < _tokenArrayLength; j++) {\\n                IERC20(_tokenArray[j]).safeApprove(_router, 0);\\n                IERC20(_tokenArray[j]).safeApprove(_router, type(uint256).max);\\n            }\\n        }\\n\\n    }\\n    \\n    /**\\n     * @notice Sets the default ISwap-compatible router\\n     * @param _routerIndex Gets the address of the router from routerArray\\n     */\\n     function setDefaultRouter(\\n        uint256 _routerIndex\\n    )\\n        external\\n    {\\n    \\trequire(msg.sender == manager.governance(), \\\"!governance\\\");\\n    \\trouter = ISwap(routerArray[_routerIndex]);\\n    }\\n\\n    /**\\n     * CONTROLLER-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit()\\n        external\\n        override\\n        onlyController\\n    {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest(\\n        uint256[] calldata _estimates\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        _harvest(_estimates);\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim()\\n        external\\n        override\\n        onlyController\\n    {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        IERC20(want).safeTransfer(controller, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll()\\n        external\\n        override\\n        onlyController\\n    {\\n        _withdrawAll();\\n\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n\\n        IERC20(want).safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit()\\n        internal\\n        virtual;\\n\\n    function _harvest(\\n        uint256[] calldata _estimates\\n    )\\n        internal\\n        virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken,\\n        uint256 _estimatedWETH,\\n        uint256 _estimatedYAXIS,\\n        uint256 _routerIndex\\n    )\\n        internal\\n        returns (uint256 _wethBal)\\n    {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount, _estimatedWETH);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yaxis,\\n                address treasury,\\n                uint256 treasuryFee\\n            ) = manager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n\\n                _swapTokensWithRouterIndex(weth, yaxis, _fee, _estimatedYAXIS, _routerIndex);\\n                IERC20(yaxis).safeTransfer(treasury, IERC20(yaxis).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokensWithRouterIndex(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected,\\n        uint256 _routerIndex\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        ISwap(routerArray[_routerIndex]).swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n    \\n    function _swapTokens(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n\\n    function _withdraw(\\n        uint256 _amount\\n    )\\n        internal\\n        virtual;\\n\\n    function _withdrawAll()\\n        internal\\n        virtual;\\n\\n    function _withdrawSome(\\n        uint256 _amount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 _before = IERC20(want).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(want).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x20101a13ffab50bc82bf410f8dc1dccebab261dd22dde5f328a0e85e44357766\",\"license\":\"MIT\"},\"contracts/v3/strategies/GeneralConvexStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../interfaces/IConvexVault.sol';\\nimport '../interfaces/ExtendedIERC20.sol';\\nimport '../interfaces/IStableSwapPool.sol';\\nimport '../interfaces/IStableSwap2Pool.sol';\\nimport './BaseStrategy.sol';\\nimport '../interfaces/ICVXMinter.sol';\\nimport '../interfaces/IHarvester.sol';\\n\\ncontract GeneralConvexStrategy is BaseStrategy {\\n    using SafeMath for uint8;\\n\\n    address public immutable crv;\\n    address public immutable cvx;\\n\\n    uint256 public immutable pid;\\n    IConvexVault public immutable convexVault;\\n    address public immutable cvxDepositLP;\\n    IConvexRewards public immutable crvRewards;\\n    address public immutable stableSwapPool;\\n\\n    address[] public tokens;\\n    uint8[] public decimalMultiples;\\n\\n    /**\\n     * @param _name The strategy name\\n     * @param _want The desired token of the strategy\\n     * @param _crv The address of CRV\\n     * @param _cvx The address of CVX\\n     * @param _weth The address of WETH\\n     * @param _pid The pool id of convex\\n     * @param _coinCount The number of coins in the pool\\n     * @param _convexVault The address of the convex vault\\n     * @param _stableSwapPool The address of the stable swap pool\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _routerArray The addresses of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _want,\\n        address _crv,\\n        address _cvx,\\n        address _weth,\\n        uint256 _pid,\\n        uint256 _coinCount,\\n        IConvexVault _convexVault,\\n        address _stableSwapPool,\\n        address _controller,\\n        address _manager,\\n        address[] memory _routerArray // [1] should be set to Uniswap router\\n    ) public BaseStrategy(_name, _controller, _manager, _want, _weth, _routerArray) {\\n        require(_coinCount == 2 || _coinCount == 3, '_coinCount should be 2 or 3');\\n        require(address(_crv) != address(0), '!_crv');\\n        require(address(_cvx) != address(0), '!_cvx');\\n        require(address(_convexVault) != address(0), '!_convexVault');\\n        require(address(_stableSwapPool) != address(0), '!_stableSwapPool');\\n\\n        (, address _token, , address _crvRewards, , ) = _convexVault.poolInfo(_pid);\\n        crv = _crv;\\n        cvx = _cvx;\\n        pid = _pid;\\n        convexVault = _convexVault;\\n        cvxDepositLP = _token;\\n        crvRewards = IConvexRewards(_crvRewards);\\n        stableSwapPool = _stableSwapPool;\\n\\n        for (uint256 i = 0; i < _coinCount; i++) {\\n            tokens.push(IStableSwapPool(_stableSwapPool).coins(i));\\n            decimalMultiples.push(18 - ExtendedIERC20(tokens[i]).decimals());\\n            IERC20(tokens[i]).safeApprove(_stableSwapPool, type(uint256).max);\\n        }\\n\\n        IERC20(_want).safeApprove(address(_convexVault), type(uint256).max);\\n        IERC20(_want).safeApprove(address(_stableSwapPool), type(uint256).max);\\n        _setApprovals(_cvx, _crv, _routerArray);\\n    }\\n\\n    function _setApprovals(\\n    \\taddress _cvx,\\n    \\taddress _crv,\\n    \\taddress[] memory _routerArray\\n    ) internal {\\n    \\tuint _routerArrayLength = _routerArray.length;\\n        for(uint i=0; i<_routerArrayLength; i++) {\\n            address _router = _routerArray[i];\\n            IERC20(_crv).safeApprove(address(_router), 0);\\n            IERC20(_crv).safeApprove(address(_router), type(uint256).max);\\n            IERC20(_cvx).safeApprove(address(_router), 0);\\n            IERC20(_cvx).safeApprove(address(_router), type(uint256).max);\\t\\n    \\t}\\n    }\\t\\n    \\n    function _deposit() internal override {\\n        convexVault.depositAll(pid, true);\\n    }\\n\\n    function _claimReward() internal {\\n        crvRewards.getReward(address(this), true);\\n    }\\n\\n    function _addLiquidity(uint256 _estimate) internal {\\n        if (tokens.length == 2) {\\n            uint256[2] memory amounts;\\n            amounts[0] = IERC20(tokens[0]).balanceOf(address(this));\\n            amounts[1] = IERC20(tokens[1]).balanceOf(address(this));\\n            IStableSwap2Pool(stableSwapPool).add_liquidity(amounts, _estimate);\\n            return;\\n        }\\n\\n        uint256[3] memory amounts;\\n        amounts[0] = IERC20(tokens[0]).balanceOf(address(this));\\n        amounts[1] = IERC20(tokens[1]).balanceOf(address(this));\\n        amounts[2] = IERC20(tokens[2]).balanceOf(address(this));\\n        IStableSwap3Pool(stableSwapPool).add_liquidity(amounts, _estimate);\\n    }\\n\\n    function getMostPremium() public view returns (address, uint256) {\\n        uint256 balance0 = IStableSwap3Pool(stableSwapPool).balances(0).mul(\\n            10**(decimalMultiples[0])\\n        );\\n        uint256 balance1 = IStableSwap3Pool(stableSwapPool).balances(1).mul(\\n            10**(decimalMultiples[1])\\n        );\\n\\n        if (tokens.length == 2) {\\n            if (balance0 > balance1) {\\n                return (tokens[1], 1);\\n            }\\n\\n            return (tokens[0], 0);\\n        }\\n\\n        uint256 balance2 = IStableSwap3Pool(stableSwapPool).balances(2).mul(\\n            10**(decimalMultiples[2])\\n        );\\n\\n        if (balance0 < balance1 && balance0 < balance2) {\\n            return (tokens[0], 0);\\n        }\\n\\n        if (balance1 < balance0 && balance1 < balance2) {\\n            return (tokens[1], 1);\\n        }\\n\\n        if (balance2 < balance0 && balance2 < balance1) {\\n            return (tokens[2], 2);\\n        }\\n\\n        return (tokens[0], 0);\\n    }\\n\\n    function _harvest(uint256[] calldata _estimates) internal override {\\n        _claimReward();\\n        uint256 _cvxBalance = IERC20(cvx).balanceOf(address(this));\\n        if (_cvxBalance > 0) {\\n            _swapTokens(cvx, weth, _cvxBalance, _estimates[0]);\\n        }\\n\\n        uint256 _extraRewardsLength = crvRewards.extraRewardsLength();\\n        for (uint256 i = 0; i < _extraRewardsLength; i++) {\\n            address _rewardToken = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n            uint256 _extraRewardBalance = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_extraRewardBalance > 0) {\\n                _swapTokens(_rewardToken, weth, _extraRewardBalance, _estimates[i+1]);\\n            }\\n        }\\n\\t// RouterIndex 1 sets router to Uniswap to swap WETH->YAXIS\\n        uint256 _remainingWeth = _payHarvestFees(crv, _estimates[_extraRewardsLength + 2], _estimates[_extraRewardsLength + 3], 1);\\n        if (_remainingWeth > 0) {\\n            (address _targetCoin, ) = getMostPremium();\\n            _swapTokens(weth, _targetCoin, _remainingWeth, _estimates[_extraRewardsLength + 4]);\\n            _addLiquidity(_estimates[_extraRewardsLength + 5]);\\n\\n            if (balanceOfWant() > 0) {\\n                _deposit();\\n            }\\n        }\\n    }\\n\\n    function getEstimates() external view returns (uint256[] memory) {\\n    \\t\\n        uint rewardsLength = crvRewards.extraRewardsLength();\\n        uint256[] memory _estimates = new uint256[](rewardsLength.add(5));\\n        address[] memory _path = new address[](2);\\n        uint256[] memory _amounts;\\n        uint256 _notSlippage = ONE_HUNDRED_PERCENT.sub(IHarvester(manager.harvester()).slippage());\\n        uint256 wethAmount;\\n\\n        // Estimates for CVX -> WETH\\n        _path[0] = cvx;\\n        _path[1] = weth;\\n        _amounts = router.getAmountsOut(\\n            // Calculating CVX minted\\n            (crvRewards.earned(address(this)))\\n            .mul(ICVXMinter(cvx).totalCliffs().sub(ICVXMinter(cvx).maxSupply().div(ICVXMinter(cvx).reductionPerCliff())))\\n            .div(ICVXMinter(cvx).totalCliffs()),\\n            _path\\n        );\\n        _estimates[0]= _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        wethAmount += _estimates[0];\\n\\n        // Estimates for extra rewards -> WETH\\n        \\n        if (rewardsLength > 0) {\\n            for (uint256 i = 0; i < rewardsLength; i++) {\\n                _path[0] = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n                _path[1] = weth;\\n                _amounts = router.getAmountsOut(\\n                    IConvexRewards(crvRewards.extraRewards(i)).earned(address(this)),\\n                    _path\\n                );\\n                _estimates[i + 1] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n                wethAmount += _estimates[i + 1];\\n            }\\n        }\\n\\n        // Estimates for CRV -> WETH\\n        _path[0] = crv;\\n        _path[1] = weth;\\n        _amounts = router.getAmountsOut(\\n            crvRewards.earned(address(this)),\\n            _path\\n        );\\n        _estimates[rewardsLength + 1] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        wethAmount += _estimates[rewardsLength + 1];\\n\\n        // Estimates WETH -> YAXIS\\n        _path[0] = weth;\\n        _path[1] = manager.yaxis();\\n        _amounts = ISwap(routerArray[1]).getAmountsOut(wethAmount.mul(manager.treasuryFee()).div(ONE_HUNDRED_PERCENT), _path); // Set to UniswapV2 to calculate output for YAXIS\\n        _estimates[rewardsLength + 2] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n        \\n        // Estimates for WETH -> Target Coin\\n        (address _targetCoin,) = getMostPremium(); \\n        _path[0] = weth;\\n        _path[1] = _targetCoin;\\n        _amounts = router.getAmountsOut(\\n            wethAmount - _amounts[0],\\n            _path\\n        );\\n        _estimates[rewardsLength + 3] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        // Estimates for Target Coin -> CRV LP\\n        // Supports up to 18 decimals\\n        _estimates[rewardsLength + 4] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT).mul(10**(18-ExtendedIERC20(_targetCoin).decimals())).div(IStableSwapPool(stableSwapPool).get_virtual_price());\\n        \\n        return _estimates;\\n    }\\n\\n    function _withdrawAll() internal override {\\n        convexVault.withdrawAll(pid);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        convexVault.withdraw(pid, _amount);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return IERC20(cvxDepositLP).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x331d5264d426e80f023ffbd740648d1cb419398872d7c50f068bbec8cf6fc2e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b506040516200560c3803806200560c83398181016040526101808110156200003957600080fd5b81019080805160405193929190846401000000008211156200005a57600080fd5b9083019060208201858111156200007057600080fd5b82516401000000008111828201881017156200008b57600080fd5b82525081516020918201929091019080838360005b83811015620000ba578181015183820152602001620000a0565b50505050905090810190601f168015620000e85780820380516001836020036101000a031916815260200191505b5060408181526020830151908301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b0151610160909b018051999d989c979b969a95999498939792969195919491939291846401000000008211156200015657600080fd5b9083019060208201858111156200016c57600080fd5b82518660208202830111640100000000821117156200018a57600080fd5b82525081516020918201928201910280838360005b83811015620001b95781810151838201526020016200019f565b505050509050016040525050508b83838d8b858560009080519060200190620001e492919062000cb2565b506001600160601b0319606084811b821660805286811b821660c05285811b821660e05283901b1660a052805162000263576040805162461bcd60e51b815260206004820152601e60248201527f4d75737420696e707574206174206c65617374206f6e6520726f757465720000604482015290519081900360640190fd5b80516200027890600190602084019062000d37565b50806000815181106200028757fe5b6020026020010151600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060005b81518110156200034057620002fc828281518110620002d357fe5b60200260200101516000856001600160a01b0316620007cd60201b62002b95179092919060201c565b620003378282815181106200030d57fe5b6020026020010151600019856001600160a01b0316620007cd60201b62002b95179092919060201c565b600101620002b8565b505050505050508560021480620003575750856003145b620003a9576040805162461bcd60e51b815260206004820152601b60248201527f5f636f696e436f756e742073686f756c642062652032206f7220330000000000604482015290519081900360640190fd5b6001600160a01b038a16620003ed576040805162461bcd60e51b815260206004820152600560248201526410afb1b93b60d91b604482015290519081900360640190fd5b6001600160a01b03891662000431576040805162461bcd60e51b8152602060048201526005602482015264042bec6ecf60db1b604482015290519081900360640190fd5b6001600160a01b0385166200047d576040805162461bcd60e51b815260206004820152600d60248201526c0857d8dbdb9d995e15985d5b1d609a1b604482015290519081900360640190fd5b6001600160a01b038416620004cc576040805162461bcd60e51b815260206004820152601060248201526f0857dcdd18589b1954ddd85c141bdbdb60821b604482015290519081900360640190fd5b600080866001600160a01b0316631526fe278a6040518263ffffffff1660e01b81526004018082815260200191505060c06040518083038186803b1580156200051457600080fd5b505afa15801562000529573d6000803e3d6000fd5b505050506040513d60c08110156200054057600080fd5b5060208101516060918201516001600160601b03198f841b8116610100528e841b8116610120526101408d90528a841b81166101605282841b81166101805281841b81166101a0529289901b9092166101c0529250905060005b888110156200075d576003876001600160a01b031663c6610657836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015620005ea57600080fd5b505afa158015620005ff573d6000803e3d6000fd5b505050506040513d60208110156200061657600080fd5b505181546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790556003805460049190839081106200065d57fe5b600091825260209182902001546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b158015620006a757600080fd5b505afa158015620006bc573d6000803e3d6000fd5b505050506040513d6020811015620006d357600080fd5b505181546001810183556000928352602092839020928104909201805460ff6012939093038316601f9094166101000a938402929093021990921617905560038054620007549189916000199190859081106200072c57fe5b600091825260209182902001546001600160a01b031692919062002b95620007cd821b17901c565b6001016200059a565b5062000785876000198f6001600160a01b0316620007cd60201b62002b95179092919060201c565b620007ac866000198f6001600160a01b0316620007cd60201b62002b95179092919060201c565b620007b98b8d85620008f1565b505050505050505050505050505062000dd5565b80158062000857575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200082757600080fd5b505afa1580156200083c573d6000803e3d6000fd5b505050506040513d60208110156200085357600080fd5b5051155b620008945760405162461bcd60e51b8152600401808060200182810382526036815260200180620055d66036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620008ec918591620009c316565b505050565b805160005b81811015620009bc5760008382815181106200090e57fe5b602002602001015190506200093e816000876001600160a01b0316620007cd60201b62002b95179092919060201c565b6200096581600019876001600160a01b0316620007cd60201b62002b95179092919060201c565b6200098b816000886001600160a01b0316620007cd60201b62002b95179092919060201c565b620009b281600019886001600160a01b0316620007cd60201b62002b95179092919060201c565b50600101620008f6565b5050505050565b606062000a1f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662000a7f60201b62002ca8179092919060201c565b805190915015620008ec5780806020019051602081101562000a4057600080fd5b5051620008ec5760405162461bcd60e51b815260040180806020018281038252602a815260200180620055ac602a913960400191505060405180910390fd5b606062000a90848460008562000a9a565b90505b9392505050565b60608247101562000add5760405162461bcd60e51b8152600401808060200182810382526026815260200180620055866026913960400191505060405180910390fd5b62000ae88562000c02565b62000b3a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831062000b7b5780518252601f19909201916020918201910162000b5a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000bdf576040519150601f19603f3d011682016040523d82523d6000602084013e62000be4565b606091505b50909250905062000bf782828662000c08565b979650505050505050565b3b151590565b6060831562000c1957508162000a93565b82511562000c2a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000c7657818101518382015260200162000c5c565b50505050905090810190601f16801562000ca45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cf557805160ff191683800117855562000d25565b8280016001018555821562000d25579182015b8281111562000d2557825182559160200191906001019062000d08565b5062000d3392915062000d9d565b5090565b82805482825590600052602060002090810192821562000d8f579160200282015b8281111562000d8f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000d58565b5062000d3392915062000db4565b5b8082111562000d33576000815560010162000d9e565b5b8082111562000d335780546001600160a01b031916815560010162000db5565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c610140516101605160601c6101805160601c6101a05160601c6101c05160601c6145be62000fc860003980611a9c528061212552806121ac528061226c528061237e5280613f4352806141b05250806107155280610c305280610e625280610ff95280611338528061293c52806130b7528061314b528061391052508061067352806126f452508061271852806133eb52806134e05280613833525080612b40528061341a52806134a9528061386252508061091552806109d85280610a815280610b0e5280610b8852806128e75280612fb55280613059525080611280528061273c528061330e525080610815528061158b52806116815280611cd95280611ff752806121495280612a485280613be2525080611bf45280611c595280611f085280611fcc52806124ee5280612646528061267b528061278952806128bd52806129d85280612b645250806109635280610f8d52806112ce528061153d528061188f5280611e1d5280611e615280612101528061307a52806132cd528061337a5280613b1b5280613b615280613cae5280613d84525080611c8a5280611cb55280611faa528061255a52806127f5528061289b52806129625280612e585280612efe52506145be6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635f349a111161010f578063b6bff295116100a2578063ef9e237911610071578063ef9e237914610593578063f1068454146105c9578063f77c4791146105d1578063f887ea40146105d9576101e5565b8063b6bff29514610573578063c1a3d44c1461057b578063d0e30db014610583578063dd0081c71461058b576101e5565b8063722713f7116100de578063722713f714610528578063853828b614610530578063923c1d6114610538578063a128723a14610540576101e5565b80635f349a11146104f357806361c08ff614610510578063689538e7146105185780636a4874a114610520576101e5565b8063337da0fc1161018757806348677dbe1161015657806348677dbe146104175780634f64b2be1461044257806351cff8d91461045f5780635d14b06f14610485576101e5565b8063337da0fc146103e25780633fc8cef3146103ff5780634362c0d114610407578063481c6a751461040f576101e5565b80631dd19cb4116101c35780631dd19cb4146102d95780631f1fcd51146102e35780632d16c4e3146103075780632e1a7d4d146103c5576101e5565b806306fdde03146101ea5780631158808614610267578063185881ec14610281575b600080fd5b6101f26105e1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022c578181015183820152602001610214565b50505050905090810190601f1680156102595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026f61066f565b60408051918252519081900360200190f35b61028961070f565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c55781810151838201526020016102ad565b505050509050019250505060405180910390f35b6102e1611be9565b005b6102eb611cb3565b604080516001600160a01b039092168252519081900360200190f35b6102e16004803603604081101561031d57600080fd5b810190602081018135600160201b81111561033757600080fd5b82018360208201111561034957600080fd5b803590602001918460208302840111600160201b8311171561036a57600080fd5b919390929091602081019035600160201b81111561038757600080fd5b82018360208201111561039957600080fd5b803590602001918460208302840111600160201b831117156103ba57600080fd5b509092509050611cd7565b6102e1600480360360208110156103db57600080fd5b5035611efd565b6102e1600480360360208110156103f857600080fd5b5035611ff5565b6102eb6120ff565b6102eb612123565b6102eb612147565b61041f61216b565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102eb6004803603602081101561045857600080fd5b50356124bc565b6102e16004803603602081101561047557600080fd5b50356001600160a01b03166124e3565b6102e16004803603602081101561049b57600080fd5b810190602081018135600160201b8111156104b557600080fd5b8201836020820111156104c757600080fd5b803590602001918460208302840111600160201b831117156104e857600080fd5b509092509050612670565b6102eb6004803603602081101561050957600080fd5b50356126e5565b6102eb6126f2565b6102eb612716565b6102eb61273a565b61026f61275e565b6102e161277e565b6102eb6128e5565b61055d6004803603602081101561055657600080fd5b5035612909565b6040805160ff9092168252519081900360200190f35b6102eb61293a565b61026f61295e565b6102e16129cd565b61026f612a40565b6102e1600480360360608110156105a957600080fd5b506001600160a01b03813581169160208101359091169060400135612a46565b61026f612b3e565b6102eb612b62565b6102eb612b86565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b505050505081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d602081101561070857600080fd5b5051905090565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d602081101561079657600080fd5b5051905060606107a7826005612cc1565b67ffffffffffffffff811180156107bd57600080fd5b506040519080825280602002602001820160405280156107e7578160200160208202803683370190505b506040805160028082526060808301845293945090916020830190803683370190505090506060600061090f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b505160408051633e032a3b60e01b815290516001600160a01b0390921691633e032a3b91600480820192602092909190829003018186803b1580156108da57600080fd5b505afa1580156108ee573d6000803e3d6000fd5b505050506040513d602081101561090457600080fd5b505161271090612d24565b905060007f00000000000000000000000000000000000000000000000000000000000000008460008151811061094157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008460018151811061098f57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600260009054906101000a90046001600160a01b03166001600160a01b031663d06ca61f610cad7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b50516040805163553a731160e11b81529051610ca791610c1191610b86916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163aa74e62291600480820192602092909190829003018186803b158015610ac857600080fd5b505afa158015610adc573d6000803e3d6000fd5b505050506040513d6020811015610af257600080fd5b50516040805163d5abeb0160e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d5abeb01916004808301926020929190829003018186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d6020811015610b7e57600080fd5b505190612d66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bdf57600080fd5b505afa158015610bf3573d6000803e3d6000fd5b505050506040513d6020811015610c0957600080fd5b505190612d24565b604080516246613160e11b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691628cc262916024808301926020929190829003018186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d6020811015610c9f57600080fd5b505190612da8565b90612d66565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610d03578181015183820152602001610ceb565b50505050905001935050505060006040518083038186803b158015610d2757600080fd5b505afa158015610d3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d6457600080fd5b8101908080516040519392919084600160201b821115610d8357600080fd5b908301906020820185811115610d9857600080fd5b82518660208202830111600160201b82111715610db457600080fd5b82525081516020918201928201910280838360005b83811015610de1578181015183820152602001610dc9565b505050509050016040525050509250610e1d612710610ca78486600181518110610e0757fe5b6020026020010151612da890919063ffffffff16565b85600081518110610e2a57fe5b60200260200101818152505084600081518110610e4357fe5b602090810291909101015101851561127e5760005b8681101561127c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c35446826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ec457600080fd5b505afa158015610ed8573d6000803e3d6000fd5b505050506040513d6020811015610eee57600080fd5b50516040805163f7c618c160e01b815290516001600160a01b039092169163f7c618c191600480820192602092909190829003018186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6020811015610f5c57600080fd5b505185518690600090610f6b57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000085600181518110610fb957fe5b6001600160a01b0392831660209182029290920181019190915260025460408051632061aa2360e11b81526004810186905290519184169363d06ca61f937f0000000000000000000000000000000000000000000000000000000000000000909116926340c35446926024808201939291829003018186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d602081101561106857600080fd5b5051604080516246613160e11b815230600482015290516001600160a01b0390921691628cc26291602480820192602092909190829003018186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d60208110156110da57600080fd5b5051604080516001600160e01b031960e085901b16815260048101838152602482019283528a5160448301528a518b939192606401906020858101910280838360005b8381101561113557818101518382015260200161111d565b50505050905001935050505060006040518083038186803b15801561115957600080fd5b505afa15801561116d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561119657600080fd5b8101908080516040519392919084600160201b8211156111b557600080fd5b9083019060208201858111156111ca57600080fd5b82518660208202830111600160201b821117156111e657600080fd5b82525081516020918201928201910280838360005b838110156112135781810151838201526020016111fb565b505050509050016040525050509350611239612710610ca78587600181518110610e0757fe5b86826001018151811061124857fe5b60200260200101818152505085816001018151811061126357fe5b6020026020010151820191508080600101915050610e58565b505b7f0000000000000000000000000000000000000000000000000000000000000000846000815181106112ac57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000846001815181106112fa57fe5b6001600160a01b03928316602091820292909201810191909152600254604080516246613160e11b815230600482015290519184169363d06ca61f937f000000000000000000000000000000000000000000000000000000000000000090911692628cc262926024808201939291829003018186803b15801561137c57600080fd5b505afa158015611390573d6000803e3d6000fd5b505050506040513d60208110156113a657600080fd5b5051604080516001600160e01b031960e085901b16815260048101838152602482019283528951604483015289518a939192606401906020858101910280838360005b838110156114015781810151838201526020016113e9565b50505050905001935050505060006040518083038186803b15801561142557600080fd5b505afa158015611439573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561146257600080fd5b8101908080516040519392919084600160201b82111561148157600080fd5b90830190602082018581111561149657600080fd5b82518660208202830111600160201b821117156114b257600080fd5b82525081516020918201928201910280838360005b838110156114df5781810151838201526020016114c7565b505050509050016040525050509250611505612710610ca78486600181518110610e0757fe5b85876001018151811061151457fe5b60200260200101818152505084866001018151811061152f57fe5b6020026020010151810190507f00000000000000000000000000000000000000000000000000000000000000008460008151811061156957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f021b0e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d602081101561160c57600080fd5b505184518590600190811061161d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001808154811061164a57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663d06ca61f61170b612710610ca77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d602081101561170257600080fd5b50518690612da8565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611761578181015183820152602001611749565b50505050905001935050505060006040518083038186803b15801561178557600080fd5b505afa158015611799573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156117c257600080fd5b8101908080516040519392919084600160201b8211156117e157600080fd5b9083019060208201858111156117f657600080fd5b82518660208202830111600160201b8211171561181257600080fd5b82525081516020918201928201910280838360005b8381101561183f578181015183820152602001611827565b505050509050016040525050509250611865612710610ca78486600181518110610e0757fe5b85876002018151811061187457fe5b602002602001018181525050600061188a61216b565b5090507f0000000000000000000000000000000000000000000000000000000000000000856000815181106118bb57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106118e957fe5b6001600160a01b039283166020918202929092010152600254855191169063d06ca61f90869060009061191857fe5b60200260200101518403876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611978578181015183820152602001611960565b50505050905001935050505060006040518083038186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156119d957600080fd5b8101908080516040519392919084600160201b8211156119f857600080fd5b908301906020820185811115611a0d57600080fd5b82518660208202830111600160201b82111715611a2957600080fd5b82525081516020918201928201910280838360005b83811015611a56578181015183820152602001611a3e565b505050509050016040525050509350611a7c612710610ca78587600181518110610e0757fe5b868860030181518110611a8b57fe5b602002602001018181525050611bc37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015611af357600080fd5b505afa158015611b07573d6000803e3d6000fd5b505050506040513d6020811015611b1d57600080fd5b50516040805163313ce56760e01b81529051610ca7916001600160a01b0386169163313ce56791600480820192602092909190829003018186803b158015611b6457600080fd5b505afa158015611b78573d6000803e3d6000fd5b505050506040513d6020811015611b8e57600080fd5b5051875160129190910360ff908116600a0a1690611bbd9061271090610ca7908a908c906001908110610e0757fe5b90612da8565b868860040181518110611bd257fe5b602090810291909101015250939550505050505090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c54576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611cb17f0000000000000000000000000000000000000000000000000000000000000000611c8061295e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612e01565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3057600080fd5b505afa158015611d44573d6000803e3d6000fd5b505050506040513d6020811015611d5a57600080fd5b50516001600160a01b03163314611da6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611db260018585614423565b5083836000818110611dc057fe5b6002805460209290920293909301356001600160a01b03166001600160a01b0319909116179091555060008382825b82811015611ef357878782818110611e0357fe5b905060200201356001600160a01b03169350611e548460007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612b959092919063ffffffff16565b611e8a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685600019612b95565b60005b82811015611eea57611ecf856000898985818110611ea757fe5b905060200201356001600160a01b03166001600160a01b0316612b959092919063ffffffff16565b611ee285600019898985818110611ea757fe5b600101611e8d565b50600101611def565b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f68576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6000611f7261295e565b905081811015611f9d57611f8e611f898383612d24565b612e53565b9150611f9a8282612cc1565b91505b611ff16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612e01565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561204e57600080fd5b505afa158015612062573d6000803e3d6000fd5b505050506040513d602081101561207857600080fd5b50516001600160a01b031633146120c4576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600181815481106120d157fe5b600091825260209091200154600280546001600160a01b0319166001600160a01b0390921691909117905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600061220f600460008154811061218157fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16600a0a60ff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634903b0d160006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c7557600080fd5b905060006122ae600460018154811061222457fe5b6000918252602091829020828204015460408051634903b0d160e01b815260016004820152905160ff601f9094166101000a9092048316600a0a909216926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634903b0d19260248083019392829003018186803b158015610c7557600080fd5b6003549091506002141561232357808211156122f55760036001815481106122d257fe5b6000918252602090912001546001600160a01b03169350600192506124b8915050565b600360008154811061230357fe5b60009182526020822001546001600160a01b0316945092506124b8915050565b60006123c0600460028154811061233657fe5b6000918252602091829020828204015460408051634903b0d160e01b815260026004820152905160ff601f9094166101000a9092048316600a0a909216926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634903b0d19260248083019392829003018186803b158015610c7557600080fd5b905081831080156123d057508083105b156124045760036000815481106123e357fe5b60009182526020822001546001600160a01b0316955093506124b892505050565b828210801561241257508082105b1561244957600360018154811061242557fe5b6000918252602090912001546001600160a01b03169450600193506124b892505050565b828110801561245757508181105b1561248e57600360028154811061246a57fe5b6000918252602090912001546001600160a01b03169450600293506124b892505050565b600360008154811061249c57fe5b60009182526020822001546001600160a01b0316955093505050505b9091565b600381815481106124c957fe5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461254e576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614156125be576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561260957600080fd5b505afa15801561261d573d6000803e3d6000fd5b505050506040513d602081101561263357600080fd5b5051905061266b6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083612e01565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126db576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611ff18282612fa9565b600181815481106124c957fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061277961276b61066f565b61277361295e565b90612cc1565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146127e9576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6127f16133e9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561286057600080fd5b505afa158015612874573d6000803e3d6000fd5b505050506040513d602081101561288a57600080fd5b505190506128e26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e01565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004818154811061291657fe5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106de57600080fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612a38576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611cb1613499565b61271081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9f57600080fd5b505afa158015612ab3573d6000803e3d6000fd5b505050506040513d6020811015612ac957600080fd5b50516001600160a01b03163314612b15576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b612b2a6001600160a01b038416836000612b95565b61266b6001600160a01b0384168383612b95565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b801580612c1b575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d6020811015612c1757600080fd5b5051155b612c565760405162461bcd60e51b81526004018080602001828103825260368152602001806145536036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261266b908490613528565b6060612cb784846000856135d9565b90505b9392505050565b600082820183811015612d1b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000612d1b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613735565b6000612d1b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506137cc565b600082612db757506000612d1e565b82820282848281612dc457fe5b0414612d1b5760405162461bcd60e51b81526004018080602001828103825260218152602001806145086021913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261266b908490613528565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ec357600080fd5b505afa158015612ed7573d6000803e3d6000fd5b505050506040513d6020811015612eed57600080fd5b50519050612efa83613831565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f6957600080fd5b505afa158015612f7d573d6000803e3d6000fd5b505050506040513d6020811015612f9357600080fd5b50519050612fa18183612d24565b949350505050565b612fb16138e9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561302057600080fd5b505afa158015613034573d6000803e3d6000fd5b505050506040513d602081101561304a57600080fd5b5051905080156130b3576130b37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083868660008181106130a757fe5b90506020020135613958565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561310e57600080fd5b505afa158015613122573d6000803e3d6000fd5b505050506040513d602081101561313857600080fd5b5051905060005b818110156133065760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c35446836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156131ad57600080fd5b505afa1580156131c1573d6000803e3d6000fd5b505050506040513d60208110156131d757600080fd5b50516040805163f7c618c160e01b815290516001600160a01b039092169163f7c618c191600480820192602092909190829003018186803b15801561321b57600080fd5b505afa15801561322f573d6000803e3d6000fd5b505050506040513d602081101561324557600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561329357600080fd5b505afa1580156132a7573d6000803e3d6000fd5b505050506040513d60208110156132bd57600080fd5b5051905080156132fc576132fc827f0000000000000000000000000000000000000000000000000000000000000000838a8a886001018181106130a757fe5b505060010161313f565b5060006133607f000000000000000000000000000000000000000000000000000000000000000086868560020181811061333c57fe5b9050602002013587878660030181811061335257fe5b905060200201356001613a97565b905080156133e257600061337261216b565b5090506133aa7f000000000000000000000000000000000000000000000000000000000000000082848989886004018181106130a757fe5b6133c88686856005018181106133bc57fe5b90506020020135613e06565b60006133d261295e565b11156133e0576133e0613499565b505b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663958e2d317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561346f57600080fd5b505af1158015613483573d6000803e3d6000fd5b505050506040513d6020811015611ff157600080fd5b6040805163303acfe760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916360759fce9160448083019260209291908290030181600087803b15801561346f57600080fd5b606061357d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ca89092919063ffffffff16565b80519091501561266b5780806020019051602081101561359c57600080fd5b505161266b5760405162461bcd60e51b815260040180806020018281038252602a815260200180614529602a913960400191505060405180910390fd5b60608247101561361a5760405162461bcd60e51b81526004018080602001828103825260268152602001806144e26026913960400191505060405180910390fd5b6136238561423f565b613674576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136b35780518252601f199092019160209182019101613694565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613715576040519150601f19603f3d011682016040523d82523d6000602084013e61371a565b606091505b509150915061372a828286614245565b979650505050505050565b600081848411156137c45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613789578181015183820152602001613771565b50505050905090810190601f1680156137b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361381b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613789578181015183820152602001613771565b50600083858161382757fe5b0495945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663441a3e707f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156138bf57600080fd5b505af11580156138d3573d6000803e3d6000fd5b505050506040513d602081101561266b57600080fd5b60408051637050ccd960e01b81523060048201526001602482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691637050ccd99160448083019260209291908290030181600087803b15801561346f57600080fd5b6040805160028082526060808301845292602083019080368337019050509050848160008151811061398657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106139b457fe5b6001600160a01b039283166020918202929092018101919091526002546040516338ed173960e01b8152600481018781526024820187905230606483018190526402540be4006084840181905260a060448501908152885160a4860152885195909716966338ed1739968b968b968b96939260c490910191878201910280838360005b83811015613a4f578181015183820152602001613a37565b505050509050019650505050505050600060405180830381600087803b158015613a7857600080fd5b505af1158015613a8c573d6000803e3d6000fd5b505050505050505050565b600080856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613ae757600080fd5b505afa158015613afb573d6000803e3d6000fd5b505050506040513d6020811015613b1157600080fd5b50519050613b41867f00000000000000000000000000000000000000000000000000000000000000008388613958565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015613ba757600080fd5b505afa158015613bbb573d6000803e3d6000fd5b505050506040513d6020811015613bd157600080fd5b505191508115613dfd5760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da633d316040518163ffffffff1660e01b815260040160606040518083038186803b158015613c3957600080fd5b505afa158015613c4d573d6000803e3d6000fd5b505050506040513d6060811015613c6357600080fd5b5080516020820151604090920151909450909250905060008115801590613c9257506001600160a01b03831615155b15613d6457613ca7612710610ca78885612da8565b9050613cd67f000000000000000000000000000000000000000000000000000000000000000085838b8b6142ab565b613d6483856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613d2757600080fd5b505afa158015613d3b573d6000803e3d6000fd5b505050506040513d6020811015613d5157600080fd5b50516001600160a01b0387169190612e01565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015613dca57600080fd5b505afa158015613dde573d6000803e3d6000fd5b505050506040513d6020811015613df457600080fd5b50519550505050505b50949350505050565b60035460021415613fe557613e19614486565b6003600081548110613e2757fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b158015613e7657600080fd5b505afa158015613e8a573d6000803e3d6000fd5b505050506040513d6020811015613ea057600080fd5b50518152600380546001908110613eb357fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b158015613f0257600080fd5b505afa158015613f16573d6000803e3d6000fd5b505050506040513d6020811015613f2c57600080fd5b5051602082015260408051630b4c7e4d60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691630b4c7e4d9184918691600401908190849080838360005b83811015613f9c578181015183820152602001613f84565b5050505090500182815260200192505050600060405180830381600087803b158015613fc757600080fd5b505af1158015613fdb573d6000803e3d6000fd5b50505050506128e2565b613fed6144a4565b6003600081548110613ffb57fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561404a57600080fd5b505afa15801561405e573d6000803e3d6000fd5b505050506040513d602081101561407457600080fd5b5051815260038054600190811061408757fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156140d657600080fd5b505afa1580156140ea573d6000803e3d6000fd5b505050506040513d602081101561410057600080fd5b5051602082015260038054600290811061411657fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561416557600080fd5b505afa158015614179573d6000803e3d6000fd5b505050506040513d602081101561418f57600080fd5b50518160026020020152604051634515cef360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390839085906004018083606080838360005b838110156142005781810151838201526020016141e8565b5050505090500182815260200192505050600060405180830381600087803b15801561422b57600080fd5b505af11580156133e0573d6000803e3d6000fd5b3b151590565b60608315614254575081612cba565b8251156142645782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315613789578181015183820152602001613771565b604080516002808252606080830184529260208301908036833701905050905085816000815181106142d957fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061430757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001828154811061433457fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166338ed1739858584306402540be4006040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156143da5781810151838201526020016143c2565b505050509050019650505050505050600060405180830381600087803b15801561440357600080fd5b505af1158015614417573d6000803e3d6000fd5b50505050505050505050565b828054828255906000526020600020908101928215614476579160200282015b828111156144765781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614443565b506144829291506144c2565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b5b808211156144825780546001600160a01b03191681556001016144c356fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220e738d29d8a4856a11d1a3bc7bb76f27b2801771f7dddc3b4d59a0960512caf8164736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80635f349a111161010f578063b6bff295116100a2578063ef9e237911610071578063ef9e237914610593578063f1068454146105c9578063f77c4791146105d1578063f887ea40146105d9576101e5565b8063b6bff29514610573578063c1a3d44c1461057b578063d0e30db014610583578063dd0081c71461058b576101e5565b8063722713f7116100de578063722713f714610528578063853828b614610530578063923c1d6114610538578063a128723a14610540576101e5565b80635f349a11146104f357806361c08ff614610510578063689538e7146105185780636a4874a114610520576101e5565b8063337da0fc1161018757806348677dbe1161015657806348677dbe146104175780634f64b2be1461044257806351cff8d91461045f5780635d14b06f14610485576101e5565b8063337da0fc146103e25780633fc8cef3146103ff5780634362c0d114610407578063481c6a751461040f576101e5565b80631dd19cb4116101c35780631dd19cb4146102d95780631f1fcd51146102e35780632d16c4e3146103075780632e1a7d4d146103c5576101e5565b806306fdde03146101ea5780631158808614610267578063185881ec14610281575b600080fd5b6101f26105e1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022c578181015183820152602001610214565b50505050905090810190601f1680156102595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026f61066f565b60408051918252519081900360200190f35b61028961070f565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c55781810151838201526020016102ad565b505050509050019250505060405180910390f35b6102e1611be9565b005b6102eb611cb3565b604080516001600160a01b039092168252519081900360200190f35b6102e16004803603604081101561031d57600080fd5b810190602081018135600160201b81111561033757600080fd5b82018360208201111561034957600080fd5b803590602001918460208302840111600160201b8311171561036a57600080fd5b919390929091602081019035600160201b81111561038757600080fd5b82018360208201111561039957600080fd5b803590602001918460208302840111600160201b831117156103ba57600080fd5b509092509050611cd7565b6102e1600480360360208110156103db57600080fd5b5035611efd565b6102e1600480360360208110156103f857600080fd5b5035611ff5565b6102eb6120ff565b6102eb612123565b6102eb612147565b61041f61216b565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102eb6004803603602081101561045857600080fd5b50356124bc565b6102e16004803603602081101561047557600080fd5b50356001600160a01b03166124e3565b6102e16004803603602081101561049b57600080fd5b810190602081018135600160201b8111156104b557600080fd5b8201836020820111156104c757600080fd5b803590602001918460208302840111600160201b831117156104e857600080fd5b509092509050612670565b6102eb6004803603602081101561050957600080fd5b50356126e5565b6102eb6126f2565b6102eb612716565b6102eb61273a565b61026f61275e565b6102e161277e565b6102eb6128e5565b61055d6004803603602081101561055657600080fd5b5035612909565b6040805160ff9092168252519081900360200190f35b6102eb61293a565b61026f61295e565b6102e16129cd565b61026f612a40565b6102e1600480360360608110156105a957600080fd5b506001600160a01b03813581169160208101359091169060400135612a46565b61026f612b3e565b6102eb612b62565b6102eb612b86565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b505050505081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d602081101561070857600080fd5b5051905090565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d602081101561079657600080fd5b5051905060606107a7826005612cc1565b67ffffffffffffffff811180156107bd57600080fd5b506040519080825280602002602001820160405280156107e7578160200160208202803683370190505b506040805160028082526060808301845293945090916020830190803683370190505090506060600061090f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b505160408051633e032a3b60e01b815290516001600160a01b0390921691633e032a3b91600480820192602092909190829003018186803b1580156108da57600080fd5b505afa1580156108ee573d6000803e3d6000fd5b505050506040513d602081101561090457600080fd5b505161271090612d24565b905060007f00000000000000000000000000000000000000000000000000000000000000008460008151811061094157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008460018151811061098f57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600260009054906101000a90046001600160a01b03166001600160a01b031663d06ca61f610cad7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b50516040805163553a731160e11b81529051610ca791610c1191610b86916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163aa74e62291600480820192602092909190829003018186803b158015610ac857600080fd5b505afa158015610adc573d6000803e3d6000fd5b505050506040513d6020811015610af257600080fd5b50516040805163d5abeb0160e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d5abeb01916004808301926020929190829003018186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d6020811015610b7e57600080fd5b505190612d66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bdf57600080fd5b505afa158015610bf3573d6000803e3d6000fd5b505050506040513d6020811015610c0957600080fd5b505190612d24565b604080516246613160e11b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691628cc262916024808301926020929190829003018186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d6020811015610c9f57600080fd5b505190612da8565b90612d66565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610d03578181015183820152602001610ceb565b50505050905001935050505060006040518083038186803b158015610d2757600080fd5b505afa158015610d3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d6457600080fd5b8101908080516040519392919084600160201b821115610d8357600080fd5b908301906020820185811115610d9857600080fd5b82518660208202830111600160201b82111715610db457600080fd5b82525081516020918201928201910280838360005b83811015610de1578181015183820152602001610dc9565b505050509050016040525050509250610e1d612710610ca78486600181518110610e0757fe5b6020026020010151612da890919063ffffffff16565b85600081518110610e2a57fe5b60200260200101818152505084600081518110610e4357fe5b602090810291909101015101851561127e5760005b8681101561127c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c35446826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ec457600080fd5b505afa158015610ed8573d6000803e3d6000fd5b505050506040513d6020811015610eee57600080fd5b50516040805163f7c618c160e01b815290516001600160a01b039092169163f7c618c191600480820192602092909190829003018186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6020811015610f5c57600080fd5b505185518690600090610f6b57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000085600181518110610fb957fe5b6001600160a01b0392831660209182029290920181019190915260025460408051632061aa2360e11b81526004810186905290519184169363d06ca61f937f0000000000000000000000000000000000000000000000000000000000000000909116926340c35446926024808201939291829003018186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d602081101561106857600080fd5b5051604080516246613160e11b815230600482015290516001600160a01b0390921691628cc26291602480820192602092909190829003018186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d60208110156110da57600080fd5b5051604080516001600160e01b031960e085901b16815260048101838152602482019283528a5160448301528a518b939192606401906020858101910280838360005b8381101561113557818101518382015260200161111d565b50505050905001935050505060006040518083038186803b15801561115957600080fd5b505afa15801561116d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561119657600080fd5b8101908080516040519392919084600160201b8211156111b557600080fd5b9083019060208201858111156111ca57600080fd5b82518660208202830111600160201b821117156111e657600080fd5b82525081516020918201928201910280838360005b838110156112135781810151838201526020016111fb565b505050509050016040525050509350611239612710610ca78587600181518110610e0757fe5b86826001018151811061124857fe5b60200260200101818152505085816001018151811061126357fe5b6020026020010151820191508080600101915050610e58565b505b7f0000000000000000000000000000000000000000000000000000000000000000846000815181106112ac57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000846001815181106112fa57fe5b6001600160a01b03928316602091820292909201810191909152600254604080516246613160e11b815230600482015290519184169363d06ca61f937f000000000000000000000000000000000000000000000000000000000000000090911692628cc262926024808201939291829003018186803b15801561137c57600080fd5b505afa158015611390573d6000803e3d6000fd5b505050506040513d60208110156113a657600080fd5b5051604080516001600160e01b031960e085901b16815260048101838152602482019283528951604483015289518a939192606401906020858101910280838360005b838110156114015781810151838201526020016113e9565b50505050905001935050505060006040518083038186803b15801561142557600080fd5b505afa158015611439573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561146257600080fd5b8101908080516040519392919084600160201b82111561148157600080fd5b90830190602082018581111561149657600080fd5b82518660208202830111600160201b821117156114b257600080fd5b82525081516020918201928201910280838360005b838110156114df5781810151838201526020016114c7565b505050509050016040525050509250611505612710610ca78486600181518110610e0757fe5b85876001018151811061151457fe5b60200260200101818152505084866001018151811061152f57fe5b6020026020010151810190507f00000000000000000000000000000000000000000000000000000000000000008460008151811061156957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f021b0e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d602081101561160c57600080fd5b505184518590600190811061161d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001808154811061164a57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663d06ca61f61170b612710610ca77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d602081101561170257600080fd5b50518690612da8565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611761578181015183820152602001611749565b50505050905001935050505060006040518083038186803b15801561178557600080fd5b505afa158015611799573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156117c257600080fd5b8101908080516040519392919084600160201b8211156117e157600080fd5b9083019060208201858111156117f657600080fd5b82518660208202830111600160201b8211171561181257600080fd5b82525081516020918201928201910280838360005b8381101561183f578181015183820152602001611827565b505050509050016040525050509250611865612710610ca78486600181518110610e0757fe5b85876002018151811061187457fe5b602002602001018181525050600061188a61216b565b5090507f0000000000000000000000000000000000000000000000000000000000000000856000815181106118bb57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106118e957fe5b6001600160a01b039283166020918202929092010152600254855191169063d06ca61f90869060009061191857fe5b60200260200101518403876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611978578181015183820152602001611960565b50505050905001935050505060006040518083038186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156119d957600080fd5b8101908080516040519392919084600160201b8211156119f857600080fd5b908301906020820185811115611a0d57600080fd5b82518660208202830111600160201b82111715611a2957600080fd5b82525081516020918201928201910280838360005b83811015611a56578181015183820152602001611a3e565b505050509050016040525050509350611a7c612710610ca78587600181518110610e0757fe5b868860030181518110611a8b57fe5b602002602001018181525050611bc37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015611af357600080fd5b505afa158015611b07573d6000803e3d6000fd5b505050506040513d6020811015611b1d57600080fd5b50516040805163313ce56760e01b81529051610ca7916001600160a01b0386169163313ce56791600480820192602092909190829003018186803b158015611b6457600080fd5b505afa158015611b78573d6000803e3d6000fd5b505050506040513d6020811015611b8e57600080fd5b5051875160129190910360ff908116600a0a1690611bbd9061271090610ca7908a908c906001908110610e0757fe5b90612da8565b868860040181518110611bd257fe5b602090810291909101015250939550505050505090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c54576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611cb17f0000000000000000000000000000000000000000000000000000000000000000611c8061295e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612e01565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3057600080fd5b505afa158015611d44573d6000803e3d6000fd5b505050506040513d6020811015611d5a57600080fd5b50516001600160a01b03163314611da6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611db260018585614423565b5083836000818110611dc057fe5b6002805460209290920293909301356001600160a01b03166001600160a01b0319909116179091555060008382825b82811015611ef357878782818110611e0357fe5b905060200201356001600160a01b03169350611e548460007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612b959092919063ffffffff16565b611e8a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685600019612b95565b60005b82811015611eea57611ecf856000898985818110611ea757fe5b905060200201356001600160a01b03166001600160a01b0316612b959092919063ffffffff16565b611ee285600019898985818110611ea757fe5b600101611e8d565b50600101611def565b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f68576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6000611f7261295e565b905081811015611f9d57611f8e611f898383612d24565b612e53565b9150611f9a8282612cc1565b91505b611ff16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612e01565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561204e57600080fd5b505afa158015612062573d6000803e3d6000fd5b505050506040513d602081101561207857600080fd5b50516001600160a01b031633146120c4576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600181815481106120d157fe5b600091825260209091200154600280546001600160a01b0319166001600160a01b0390921691909117905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600061220f600460008154811061218157fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16600a0a60ff167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634903b0d160006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c7557600080fd5b905060006122ae600460018154811061222457fe5b6000918252602091829020828204015460408051634903b0d160e01b815260016004820152905160ff601f9094166101000a9092048316600a0a909216926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634903b0d19260248083019392829003018186803b158015610c7557600080fd5b6003549091506002141561232357808211156122f55760036001815481106122d257fe5b6000918252602090912001546001600160a01b03169350600192506124b8915050565b600360008154811061230357fe5b60009182526020822001546001600160a01b0316945092506124b8915050565b60006123c0600460028154811061233657fe5b6000918252602091829020828204015460408051634903b0d160e01b815260026004820152905160ff601f9094166101000a9092048316600a0a909216926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634903b0d19260248083019392829003018186803b158015610c7557600080fd5b905081831080156123d057508083105b156124045760036000815481106123e357fe5b60009182526020822001546001600160a01b0316955093506124b892505050565b828210801561241257508082105b1561244957600360018154811061242557fe5b6000918252602090912001546001600160a01b03169450600193506124b892505050565b828110801561245757508181105b1561248e57600360028154811061246a57fe5b6000918252602090912001546001600160a01b03169450600293506124b892505050565b600360008154811061249c57fe5b60009182526020822001546001600160a01b0316955093505050505b9091565b600381815481106124c957fe5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461254e576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614156125be576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561260957600080fd5b505afa15801561261d573d6000803e3d6000fd5b505050506040513d602081101561263357600080fd5b5051905061266b6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083612e01565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126db576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611ff18282612fa9565b600181815481106124c957fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061277961276b61066f565b61277361295e565b90612cc1565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146127e9576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6127f16133e9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561286057600080fd5b505afa158015612874573d6000803e3d6000fd5b505050506040513d602081101561288a57600080fd5b505190506128e26001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e01565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004818154811061291657fe5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106de57600080fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612a38576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611cb1613499565b61271081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9f57600080fd5b505afa158015612ab3573d6000803e3d6000fd5b505050506040513d6020811015612ac957600080fd5b50516001600160a01b03163314612b15576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b612b2a6001600160a01b038416836000612b95565b61266b6001600160a01b0384168383612b95565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b801580612c1b575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d6020811015612c1757600080fd5b5051155b612c565760405162461bcd60e51b81526004018080602001828103825260368152602001806145536036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261266b908490613528565b6060612cb784846000856135d9565b90505b9392505050565b600082820183811015612d1b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000612d1b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613735565b6000612d1b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506137cc565b600082612db757506000612d1e565b82820282848281612dc457fe5b0414612d1b5760405162461bcd60e51b81526004018080602001828103825260218152602001806145086021913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261266b908490613528565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ec357600080fd5b505afa158015612ed7573d6000803e3d6000fd5b505050506040513d6020811015612eed57600080fd5b50519050612efa83613831565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f6957600080fd5b505afa158015612f7d573d6000803e3d6000fd5b505050506040513d6020811015612f9357600080fd5b50519050612fa18183612d24565b949350505050565b612fb16138e9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561302057600080fd5b505afa158015613034573d6000803e3d6000fd5b505050506040513d602081101561304a57600080fd5b5051905080156130b3576130b37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083868660008181106130a757fe5b90506020020135613958565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561310e57600080fd5b505afa158015613122573d6000803e3d6000fd5b505050506040513d602081101561313857600080fd5b5051905060005b818110156133065760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c35446836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156131ad57600080fd5b505afa1580156131c1573d6000803e3d6000fd5b505050506040513d60208110156131d757600080fd5b50516040805163f7c618c160e01b815290516001600160a01b039092169163f7c618c191600480820192602092909190829003018186803b15801561321b57600080fd5b505afa15801561322f573d6000803e3d6000fd5b505050506040513d602081101561324557600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561329357600080fd5b505afa1580156132a7573d6000803e3d6000fd5b505050506040513d60208110156132bd57600080fd5b5051905080156132fc576132fc827f0000000000000000000000000000000000000000000000000000000000000000838a8a886001018181106130a757fe5b505060010161313f565b5060006133607f000000000000000000000000000000000000000000000000000000000000000086868560020181811061333c57fe5b9050602002013587878660030181811061335257fe5b905060200201356001613a97565b905080156133e257600061337261216b565b5090506133aa7f000000000000000000000000000000000000000000000000000000000000000082848989886004018181106130a757fe5b6133c88686856005018181106133bc57fe5b90506020020135613e06565b60006133d261295e565b11156133e0576133e0613499565b505b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663958e2d317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561346f57600080fd5b505af1158015613483573d6000803e3d6000fd5b505050506040513d6020811015611ff157600080fd5b6040805163303acfe760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916360759fce9160448083019260209291908290030181600087803b15801561346f57600080fd5b606061357d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ca89092919063ffffffff16565b80519091501561266b5780806020019051602081101561359c57600080fd5b505161266b5760405162461bcd60e51b815260040180806020018281038252602a815260200180614529602a913960400191505060405180910390fd5b60608247101561361a5760405162461bcd60e51b81526004018080602001828103825260268152602001806144e26026913960400191505060405180910390fd5b6136238561423f565b613674576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136b35780518252601f199092019160209182019101613694565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613715576040519150601f19603f3d011682016040523d82523d6000602084013e61371a565b606091505b509150915061372a828286614245565b979650505050505050565b600081848411156137c45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613789578181015183820152602001613771565b50505050905090810190601f1680156137b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361381b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613789578181015183820152602001613771565b50600083858161382757fe5b0495945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663441a3e707f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156138bf57600080fd5b505af11580156138d3573d6000803e3d6000fd5b505050506040513d602081101561266b57600080fd5b60408051637050ccd960e01b81523060048201526001602482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691637050ccd99160448083019260209291908290030181600087803b15801561346f57600080fd5b6040805160028082526060808301845292602083019080368337019050509050848160008151811061398657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106139b457fe5b6001600160a01b039283166020918202929092018101919091526002546040516338ed173960e01b8152600481018781526024820187905230606483018190526402540be4006084840181905260a060448501908152885160a4860152885195909716966338ed1739968b968b968b96939260c490910191878201910280838360005b83811015613a4f578181015183820152602001613a37565b505050509050019650505050505050600060405180830381600087803b158015613a7857600080fd5b505af1158015613a8c573d6000803e3d6000fd5b505050505050505050565b600080856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613ae757600080fd5b505afa158015613afb573d6000803e3d6000fd5b505050506040513d6020811015613b1157600080fd5b50519050613b41867f00000000000000000000000000000000000000000000000000000000000000008388613958565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015613ba757600080fd5b505afa158015613bbb573d6000803e3d6000fd5b505050506040513d6020811015613bd157600080fd5b505191508115613dfd5760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da633d316040518163ffffffff1660e01b815260040160606040518083038186803b158015613c3957600080fd5b505afa158015613c4d573d6000803e3d6000fd5b505050506040513d6060811015613c6357600080fd5b5080516020820151604090920151909450909250905060008115801590613c9257506001600160a01b03831615155b15613d6457613ca7612710610ca78885612da8565b9050613cd67f000000000000000000000000000000000000000000000000000000000000000085838b8b6142ab565b613d6483856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613d2757600080fd5b505afa158015613d3b573d6000803e3d6000fd5b505050506040513d6020811015613d5157600080fd5b50516001600160a01b0387169190612e01565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015613dca57600080fd5b505afa158015613dde573d6000803e3d6000fd5b505050506040513d6020811015613df457600080fd5b50519550505050505b50949350505050565b60035460021415613fe557613e19614486565b6003600081548110613e2757fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b158015613e7657600080fd5b505afa158015613e8a573d6000803e3d6000fd5b505050506040513d6020811015613ea057600080fd5b50518152600380546001908110613eb357fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b158015613f0257600080fd5b505afa158015613f16573d6000803e3d6000fd5b505050506040513d6020811015613f2c57600080fd5b5051602082015260408051630b4c7e4d60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691630b4c7e4d9184918691600401908190849080838360005b83811015613f9c578181015183820152602001613f84565b5050505090500182815260200192505050600060405180830381600087803b158015613fc757600080fd5b505af1158015613fdb573d6000803e3d6000fd5b50505050506128e2565b613fed6144a4565b6003600081548110613ffb57fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561404a57600080fd5b505afa15801561405e573d6000803e3d6000fd5b505050506040513d602081101561407457600080fd5b5051815260038054600190811061408757fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b1580156140d657600080fd5b505afa1580156140ea573d6000803e3d6000fd5b505050506040513d602081101561410057600080fd5b5051602082015260038054600290811061411657fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561416557600080fd5b505afa158015614179573d6000803e3d6000fd5b505050506040513d602081101561418f57600080fd5b50518160026020020152604051634515cef360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390839085906004018083606080838360005b838110156142005781810151838201526020016141e8565b5050505090500182815260200192505050600060405180830381600087803b15801561422b57600080fd5b505af11580156133e0573d6000803e3d6000fd5b3b151590565b60608315614254575081612cba565b8251156142645782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315613789578181015183820152602001613771565b604080516002808252606080830184529260208301908036833701905050905085816000815181106142d957fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061430757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001828154811061433457fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166338ed1739858584306402540be4006040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156143da5781810151838201526020016143c2565b505050509050019650505050505050600060405180830381600087803b15801561440357600080fd5b505af1158015614417573d6000803e3d6000fd5b50505050505050505050565b828054828255906000526020600020908101928215614476579160200282015b828111156144765781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614443565b506144829291506144c2565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b5b808211156144825780546001600160a01b03191681556001016144c356fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220e738d29d8a4856a11d1a3bc7bb76f27b2801771f7dddc3b4d59a0960512caf8164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "constructor": {
        "params": {
          "_coinCount": "The number of coins in the pool",
          "_controller": "The address of the controller",
          "_convexVault": "The address of the convex vault",
          "_crv": "The address of CRV",
          "_cvx": "The address of CVX",
          "_manager": "The address of the manager",
          "_name": "The strategy name",
          "_pid": "The pool id of convex",
          "_routerArray": "The addresses of routers for swapping tokens",
          "_stableSwapPool": "The address of the stable swap pool",
          "_want": "The desired token of the strategy",
          "_weth": "The address of WETH"
        }
      },
      "setDefaultRouter(uint256)": {
        "params": {
          "_routerIndex": "Gets the address of the router from routerArray"
        }
      },
      "setRouter(address[],address[])": {
        "params": {
          "_routerArray": "The addresses of routers",
          "_tokenArray": "The addresses of tokens that need to be approved by the strategy"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest(uint256[])": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setDefaultRouter(uint256)": {
        "notice": "Sets the default ISwap-compatible router"
      },
      "setRouter(address[],address[])": {
        "notice": "Sets the address of the ISwap-compatible router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18003,
        "contract": "contracts/v3/strategies/GeneralConvexStrategy.sol:GeneralConvexStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 18006,
        "contract": "contracts/v3/strategies/GeneralConvexStrategy.sol:GeneralConvexStrategy",
        "label": "routerArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18009,
        "contract": "contracts/v3/strategies/GeneralConvexStrategy.sol:GeneralConvexStrategy",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwap)17361"
      },
      {
        "astId": 20679,
        "contract": "contracts/v3/strategies/GeneralConvexStrategy.sol:GeneralConvexStrategy",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 20682,
        "contract": "contracts/v3/strategies/GeneralConvexStrategy.sol:GeneralConvexStrategy",
        "label": "decimalMultiples",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint8)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISwap)17361": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}