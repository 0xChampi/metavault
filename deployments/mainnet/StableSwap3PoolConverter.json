{
  "address": "0xe9aeB4482c846e48Ca021a75A3E2f492485e881e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenDAI",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenUSDC",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenUSDT",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token3CRV",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "_stableSwap3Pool",
          "type": "address"
        },
        {
          "internalType": "contract IVaultManager",
          "name": "_vaultManager",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3PoolOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PRECISION_MUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calc_token_amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        }
      ],
      "name": "calc_token_amount_withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        }
      ],
      "name": "convert_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "convert_stables",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getExpected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IStableSwap3PoolOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap3Pool",
      "outputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token3CRV",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x672fd0ef9590f35bd79bffa6b36167a63782c4064fbc6bd0f2559425b0f18256",
  "receipt": {
    "to": null,
    "from": "0x65F84A48e640a908d0DF7B6f00B871352F77022D",
    "contractAddress": "0xe9aeB4482c846e48Ca021a75A3E2f492485e881e",
    "transactionIndex": 72,
    "gasUsed": "2255131",
    "logsBloom": "0x
    "blockHash": "0xe5bd3bd20aafab2bcf2bd4c0880f91bce050d2cb47c0487302e259b3b1cedf77",
    "transactionHash": "0x672fd0ef9590f35bd79bffa6b36167a63782c4064fbc6bd0f2559425b0f18256",
    "logs": [
      {
        "transactionIndex": 72,
        "blockNumber": 11922542,
        "transactionHash": "0x672fd0ef9590f35bd79bffa6b36167a63782c4064fbc6bd0f2559425b0f18256",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e9aeb4482c846e48ca021a75a3e2f492485e881e",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 145,
        "blockHash": "0xe5bd3bd20aafab2bcf2bd4c0880f91bce050d2cb47c0487302e259b3b1cedf77"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 11922542,
        "transactionHash": "0x672fd0ef9590f35bd79bffa6b36167a63782c4064fbc6bd0f2559425b0f18256",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e9aeb4482c846e48ca021a75a3e2f492485e881e",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 146,
        "blockHash": "0xe5bd3bd20aafab2bcf2bd4c0880f91bce050d2cb47c0487302e259b3b1cedf77"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 11922542,
        "transactionHash": "0x672fd0ef9590f35bd79bffa6b36167a63782c4064fbc6bd0f2559425b0f18256",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e9aeb4482c846e48ca021a75a3e2f492485e881e",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 147,
        "blockHash": "0xe5bd3bd20aafab2bcf2bd4c0880f91bce050d2cb47c0487302e259b3b1cedf77"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 11922542,
        "transactionHash": "0x672fd0ef9590f35bd79bffa6b36167a63782c4064fbc6bd0f2559425b0f18256",
        "address": "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e9aeb4482c846e48ca021a75a3e2f492485e881e",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 148,
        "blockHash": "0xe5bd3bd20aafab2bcf2bd4c0880f91bce050d2cb47c0487302e259b3b1cedf77"
      }
    ],
    "blockNumber": 11922542,
    "cumulativeGasUsed": "8252026",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
    "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7",
    "0x443ed48F975E02eA67CA0d2be0B4d4806d1E31F2",
    "0x2a09392a6FbE7C5b9cA686a5f89387CD0045ea35"
  ],
  "solcInputHash": "c715f81b598dd8c3d93b2941748f27c6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenDAI\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token3CRV\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"contract IVaultManager\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3PoolOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRECISION_MUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calc_token_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"calc_token_amount_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"convert_stables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"getExpected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IStableSwap3PoolOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token3CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"calc_token_amount(uint256[3],bool)\":{\"details\":\"0: DAI, 1: USDC, 2: USDT\",\"params\":{\"amounts\":\"Array of token amounts\",\"deposit\":\"Flag for depositing LP tokens\"}},\"calc_token_amount_withdraw(uint256,address)\":{\"params\":{\"_output\":\"The address of the output token\",\"_shares\":\"The amount of 3CRV\"}},\"constructor\":{\"params\":{\"_oracle\":\"The address of the StableSwap3PoolOracle\",\"_stableSwap3Pool\":\"The address of 3Pool\",\"_token3CRV\":\"The address of the 3CRV token\",\"_tokenDAI\":\"The address of the DAI token\",\"_tokenUSDC\":\"The address of the USDC token\",\"_tokenUSDT\":\"The address of the USDT token\",\"_vaultManager\":\"The address of the Vault Manager\"}},\"convert(address,address,uint256)\":{\"params\":{\"_input\":\"The address of the token being converted\",\"_inputAmount\":\"The input amount of tokens that are being converted\",\"_output\":\"The address of the token to be converted to\"}},\"convert_rate(address,address,uint256)\":{\"params\":{\"_input\":\"The address of the token being converted\",\"_inputAmount\":\"The input amount of tokens that are being converted\",\"_output\":\"The address of the token to be converted to\"}},\"convert_stables(uint256[3])\":{\"details\":\"0: DAI, 1: USDC, 2: USDT\",\"params\":{\"amounts\":\"Array of token amounts\"}},\"getExpected(uint256)\":{\"params\":{\"_inputAmount\":\"The input amount of tokens that are being converted\"}},\"governanceRecoverUnsupported(address,uint256,address)\":{\"details\":\"This contract should never have any tokens in it at the end of a transaction\",\"params\":{\"_amount\":\"The amount to withdraw\",\"_to\":\"The address to receive the tokens\",\"_token\":\"The address of the token\"}},\"setStrategy(address,bool)\":{\"params\":{\"_status\":\"The bool flag allowing or disallowing use of the converter by the strategy\",\"_strategy\":\"The address of the strategy\"}}},\"title\":\"StableSwap3PoolConverter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Called by Governance to approve a token address to be spent by an address\"},\"calc_token_amount(uint256[3],bool)\":{\"notice\":\"Checks the amount of 3CRV given for the amounts\"},\"calc_token_amount_withdraw(uint256,address)\":{\"notice\":\"Checks the amount of an output token given for 3CRV\"},\"convert(address,address,uint256)\":{\"notice\":\"Converts the amount of input tokens to output tokens\"},\"convert_rate(address,address,uint256)\":{\"notice\":\"Checks the amount of input tokens to output tokens\"},\"convert_stables(uint256[3])\":{\"notice\":\"Converts stables of the 3Pool to 3CRV\"},\"getExpected(uint256)\":{\"notice\":\"Returns the expected amount of tokens for a given amount by querying the latest data from Chainlink\"},\"governanceRecoverUnsupported(address,uint256,address)\":{\"notice\":\"Allows Governance to withdraw tokens from the converter\"},\"setStrategy(address,bool)\":{\"notice\":\"Called by Governance to enable or disable a strategy to use the converter\"},\"token()\":{\"notice\":\"Returns the address of the 3CRV token\"}},\"notice\":\"The StableSwap3PoolConverter is used to convert funds on Curve's 3Pool. It is backed by Chainlink's price feeds to be secure against attackers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/StableSwap3PoolConverter.sol\":\"StableSwap3PoolConverter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/metavault/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external view returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n    function setStrategy(address _strategy, bool _status) external;\\n}\\n\",\"keccak256\":\"0xbdf43c56d62b78ff4da12b51896b6232392485a49d046b67ab5daed80d2011c9\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x913b50315c2ef2d41e44e36802e2db0e11a664e76cc232f5496da7d4efde4e5b\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3PoolOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface IStableSwap3PoolOracle {\\n    function getEthereumPrice() external view returns (uint256);\\n    function getPrices() external view returns (uint256, uint256);\\n    function getSafeAnswer(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x555e4172962b1633e69ecc6a12f5a8f98ae84c44840f2b0cb3d1148b2891d300\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/StableSwap3PoolConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./IConverter.sol\\\";\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IStableSwap3Pool.sol\\\";\\nimport \\\"./IStableSwap3PoolOracle.sol\\\";\\n\\n/**\\n * @title StableSwap3PoolConverter\\n * @notice The StableSwap3PoolConverter is used to convert funds on Curve's 3Pool.\\n * It is backed by Chainlink's price feeds to be secure against attackers.\\n */\\ncontract StableSwap3PoolConverter is IConverter {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    IVaultManager public immutable vaultManager;\\n    IStableSwap3PoolOracle public immutable oracle;\\n    IStableSwap3Pool public immutable stableSwap3Pool;\\n    IERC20 public immutable token3CRV; // 3Crv\\n\\n    uint256[3] public PRECISION_MUL = [1, 1e12, 1e12];\\n    IERC20[3] public tokens; // DAI, USDC, USDT\\n\\n    mapping(address => bool) public strategies;\\n\\n    /**\\n     * @param _tokenDAI The address of the DAI token\\n     * @param _tokenUSDC The address of the USDC token\\n     * @param _tokenUSDT The address of the USDT token\\n     * @param _token3CRV The address of the 3CRV token\\n     * @param _stableSwap3Pool The address of 3Pool\\n     * @param _vaultManager The address of the Vault Manager\\n     * @param _oracle The address of the StableSwap3PoolOracle\\n     */\\n    constructor(\\n        IERC20 _tokenDAI,\\n        IERC20 _tokenUSDC,\\n        IERC20 _tokenUSDT,\\n        IERC20 _token3CRV,\\n        IStableSwap3Pool _stableSwap3Pool,\\n        IVaultManager _vaultManager,\\n        IStableSwap3PoolOracle _oracle\\n    ) public {\\n        tokens[0] = _tokenDAI;\\n        tokens[1] = _tokenUSDC;\\n        tokens[2] = _tokenUSDT;\\n        token3CRV = _token3CRV;\\n        stableSwap3Pool = _stableSwap3Pool;\\n        tokens[0].safeApprove(address(_stableSwap3Pool), type(uint256).max);\\n        tokens[1].safeApprove(address(_stableSwap3Pool), type(uint256).max);\\n        tokens[2].safeApprove(address(_stableSwap3Pool), type(uint256).max);\\n        _token3CRV.safeApprove(address(_stableSwap3Pool), type(uint256).max);\\n        vaultManager = _vaultManager;\\n        oracle = _oracle;\\n    }\\n\\n    /**\\n     * @notice Called by Governance to enable or disable a strategy to use the converter\\n     * @param _strategy The address of the strategy\\n     * @param _status The bool flag allowing or disallowing use of the converter by the strategy\\n     */\\n    function setStrategy(address _strategy, bool _status) external override onlyGovernance {\\n        strategies[_strategy] = _status;\\n    }\\n\\n    /**\\n     * @notice Called by Governance to approve a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) external onlyGovernance {\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the 3CRV token\\n     */\\n    function token() external view override returns (address) {\\n        return address(token3CRV);\\n    }\\n\\n    /**\\n     * @notice Returns the expected amount of tokens for a given amount by querying\\n     * the latest data from Chainlink\\n     * @param _inputAmount The input amount of tokens that are being converted\\n     */\\n    function getExpected(uint256 _inputAmount) public view returns (uint256 _min, uint256 _max) {\\n        ( _min, _max ) = oracle.getPrices();\\n        uint256 _eth = oracle.getEthereumPrice();\\n        _min = _inputAmount.mul(_eth).mul(_min).div(1e18).div(1e18);\\n        _max = _inputAmount.mul(_eth).mul(_max).div(1e18).div(1e18);\\n    }\\n\\n    /**\\n     * @notice Converts the amount of input tokens to output tokens\\n     * @param _input The address of the token being converted\\n     * @param _output The address of the token to be converted to\\n     * @param _inputAmount The input amount of tokens that are being converted\\n     */\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external override onlyAuthorized returns (uint256 _outputAmount) {\\n        if (_output == address(token3CRV)) { // convert to 3CRV\\n            uint256[3] memory amounts;\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_input == address(tokens[i])) {\\n                    ( uint256 _min, uint256 _max ) = getExpected(_inputAmount.mul(PRECISION_MUL[i]));\\n                    amounts[i] = _inputAmount;\\n                    uint256 _before = token3CRV.balanceOf(address(this));\\n                    stableSwap3Pool.add_liquidity(amounts, _min);\\n                    uint256 _after = token3CRV.balanceOf(address(this));\\n                    _outputAmount = _after.sub(_before);\\n                    require(_outputAmount <= _max, \\\">_max\\\");\\n                    token3CRV.safeTransfer(msg.sender, _outputAmount);\\n                    return _outputAmount;\\n                }\\n            }\\n        } else if (_input == address(token3CRV)) { // convert from 3CRV\\n            ( uint256 _min, uint256 _max ) = getExpected(_inputAmount);\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_output == address(tokens[i])) {\\n                    uint256 _before = tokens[i].balanceOf(address(this));\\n                    stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, i, _min.div(PRECISION_MUL[i]));\\n                    uint256 _after = tokens[i].balanceOf(address(this));\\n                    _outputAmount = _after.sub(_before);\\n                    require(_outputAmount <= _max, \\\">_max\\\");\\n                    tokens[i].safeTransfer(msg.sender, _outputAmount);\\n                    return _outputAmount;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Checks the amount of input tokens to output tokens\\n     * @param _input The address of the token being converted\\n     * @param _output The address of the token to be converted to\\n     * @param _inputAmount The input amount of tokens that are being converted\\n     */\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external override view returns (uint256) {\\n        if (_output == address(token3CRV)) { // convert to 3CRV\\n            uint256[3] memory amounts;\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_input == address(tokens[i])) {\\n                    amounts[i] = _inputAmount;\\n                    return stableSwap3Pool.calc_token_amount(amounts, true);\\n                }\\n            }\\n        } else if (_input == address(token3CRV)) { // convert from 3CRV\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_output == address(tokens[i])) {\\n                    // @dev this is for UI reference only, the actual share price\\n                    // (stable/CRV) will be re-calculated on-chain when we do convert()\\n                    return stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, i);\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Converts stables of the 3Pool to 3CRV\\n     * @dev 0: DAI, 1: USDC, 2: USDT\\n     * @param amounts Array of token amounts\\n     */\\n    function convert_stables(\\n        uint256[3] calldata amounts\\n    ) external override onlyAuthorized returns (uint256 _shareAmount) {\\n        uint256 _sum;\\n        for (uint8 i; i < 3; i++) {\\n            _sum = _sum.add(amounts[i].mul(PRECISION_MUL[i]));\\n        }\\n        ( uint256 _min, uint256 _max ) = getExpected(_sum);\\n        uint256 _before = token3CRV.balanceOf(address(this));\\n        stableSwap3Pool.add_liquidity(amounts, _min);\\n        uint256 _after = token3CRV.balanceOf(address(this));\\n        _shareAmount = _after.sub(_before);\\n        require(_shareAmount <= _max, \\\">_max\\\");\\n        token3CRV.safeTransfer(msg.sender, _shareAmount);\\n    }\\n\\n    /**\\n     * @notice Checks the amount of 3CRV given for the amounts\\n     * @dev 0: DAI, 1: USDC, 2: USDT\\n     * @param amounts Array of token amounts\\n     * @param deposit Flag for depositing LP tokens\\n     */\\n    function calc_token_amount(\\n        uint256[3] calldata amounts,\\n        bool deposit\\n    ) external override view returns (uint256 _shareAmount) {\\n        _shareAmount = stableSwap3Pool.calc_token_amount(amounts, deposit);\\n    }\\n\\n    /**\\n     * @notice Checks the amount of an output token given for 3CRV\\n     * @param _shares The amount of 3CRV\\n     * @param _output The address of the output token\\n     */\\n    function calc_token_amount_withdraw(\\n        uint256 _shares,\\n        address _output\\n    ) external override view returns (uint256) {\\n        for (uint8 i = 0; i < 3; i++) {\\n            if (_output == address(tokens[i])) {\\n                return stableSwap3Pool.calc_withdraw_one_coin(_shares, i);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Allows Governance to withdraw tokens from the converter\\n     * @dev This contract should never have any tokens in it at the end of a transaction\\n     * @param _token The address of the token\\n     * @param _amount The amount to withdraw\\n     * @param _to The address to receive the tokens\\n     */\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyGovernance {\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Throws if not called by a vault, controller, strategy, or governance\\n     */\\n    modifier onlyAuthorized() {\\n        require(vaultManager.vaults(msg.sender)\\n            || vaultManager.controllers(msg.sender)\\n            || strategies[msg.sender]\\n            || msg.sender == vaultManager.governance(),\\n            \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if not called by a controller or governance\\n     */\\n    modifier onlyGovernance() {\\n        require(vaultManager.controllers(msg.sender)\\n            || msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xaee2288d52356557573296d906e2c51d902eaf24c57bda18fcaa9537a9272242\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637dc0d1d0116100a2578063b7b11c5e11610071578063b7b11c5e14610306578063baa82a3414610322578063dd0081c714610350578063ef9e237914610358578063fc0c546a1461038e57610116565b80637dc0d1d0146102c25780638a4adf24146102ca578063a488680f146102d2578063ae2841c7146102da57610116565b806339ebf823116100e957806339ebf823146101f25780634f64b2be1461022c57806354575af4146102655780635a3874ac1461029d5780637dafa364146102a557610116565b8063187c5f581461011b578063248391ff1461015157806336cf893c146101995780633883e119146101cf575b600080fd5b6101386004803603602081101561013157600080fd5b5035610396565b6040805192835260208301919091528051918290030190f35b6101876004803603606081101561016757600080fd5b506001600160a01b03813581169160208101359091169060400135610506565b60408051918252519081900360200190f35b610187600480360360608110156101af57600080fd5b506001600160a01b03813581169160208101359091169060400135610d2f565b610187600480360360808110156101e557600080fd5b5060608101351515610fb2565b6102186004803603602081101561020857600080fd5b50356001600160a01b031661106f565b604080519115158252519081900360200190f35b6102496004803603602081101561024257600080fd5b5035611084565b604080516001600160a01b039092168252519081900360200190f35b61029b6004803603606081101561027b57600080fd5b506001600160a01b038135811691602081013591604090910135166110a1565b005b610249611222565b610187600480360360208110156102bb57600080fd5b5035611246565b61024961125a565b61024961127e565b6102496112a2565b610187600480360360408110156102f057600080fd5b50803590602001356001600160a01b03166112c6565b6101876004803603606081101561031c57600080fd5b506113b3565b61029b6004803603604081101561033857600080fd5b506001600160a01b038135169060200135151561189d565b610187611a30565b61029b6004803603606081101561036e57600080fd5b506001600160a01b03813581169160208101359091169060400135611a36565b610249611bb2565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd9a548b6040518163ffffffff1660e01b8152600401604080518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d604081101561041b57600080fd5b50805160209182015160408051639bddd05f60e01b815290519295509093506000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639bddd05f926004808201939291829003018186803b15801561048a57600080fd5b505afa15801561049e573d6000803e3d6000fd5b505050506040513d60208110156104b457600080fd5b505190506104e0670de0b6b3a76400006104da8181876104d48a88611d00565b90611d00565b90611d59565b92506104fe670de0b6b3a76400006104da8181866104d48a88611d00565b915050915091565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561057557600080fd5b505afa158015610589573d6000803e3d6000fd5b505050506040513d602081101561059f57600080fd5b50518061063a575060408051636d46114f60e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163da8c229e916024808301926020929190829003018186803b15801561060d57600080fd5b505afa158015610621573d6000803e3d6000fd5b505050506040513d602081101561063757600080fd5b50515b8061065457503360009081526006602052604090205460ff165b806106eb57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b357600080fd5b505afa1580156106c7573d6000803e3d6000fd5b505050506040513d60208110156106dd57600080fd5b50516001600160a01b031633145b61072a576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610a605761076c6121fe565b60005b60038160ff161015610a595760038160ff166003811061078b57fe5b01546001600160a01b0387811691161415610a51576000806107c76107c260008560ff16600381106107b957fe5b01548890611d00565b610396565b9150915085848460ff16600381106107db57fe5b60200201818152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561085357600080fd5b505afa158015610867573d6000803e3d6000fd5b505050506040513d602081101561087d57600080fd5b5051604051634515cef360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390879086906004018083606080838360005b838110156108e95781810151838201526020016108d1565b5050505090500182815260200192505050600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d60208110156109c557600080fd5b505190506109d38183611d9b565b965082871115610a12576040805162461bcd60e51b815260206004820152600560248201526407cbedac2f60db1b604482015290519081900360640190fd5b610a466001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163389611ddd565b505050505050610d28565b60010161076f565b5050610d24565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415610d2457600080610aa684610396565b9150915060005b60038160ff161015610d205760038160ff1660038110610ac957fe5b01546001600160a01b0387811691161415610d1857600060038260ff1660038110610af057fe5b0154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d6020811015610b6457600080fd5b505190506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631a4d01d28784610bb5600060ff831660038110610bac57fe5b01548990611d59565b6040518463ffffffff1660e01b8152600401808481526020018360ff1681526020018281526020019350505050600060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b50505050600060038360ff1660038110610c2657fe5b0154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d6020811015610c9a57600080fd5b50519050610ca88183611d9b565b955083861115610ce7576040805162461bcd60e51b815260206004820152600560248201526407cbedac2f60db1b604482015290519081900360640190fd5b610d0e338760038660ff1660038110610cfc57fe5b01546001600160a01b03169190611ddd565b5050505050610d28565b600101610aad565b5050505b5060005b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610e8d57610d736121fe565b60005b60038160ff161015610a595760038160ff1660038110610d9257fe5b01546001600160a01b0387811691161415610e855783828260ff1660038110610db757fe5b6020020152604051633883e11960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633883e1199084906001906004018083606080838360005b83811015610e24578181015183820152602001610e0c565b5050505090500182151581526020019250505060206040518083038186803b158015610e4f57600080fd5b505afa158015610e63573d6000803e3d6000fd5b505050506040513d6020811015610e7957600080fd5b50519250610d28915050565b600101610d76565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415610d245760005b60038160ff161015610fa75760038160ff1660038110610ee657fe5b01546001600160a01b0385811691161415610f9f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc2b27d784836040518363ffffffff1660e01b8152600401808381526020018260ff1681526020019250505060206040518083038186803b158015610f6a57600080fd5b505afa158015610f7e573d6000803e3d6000fd5b505050506040513d6020811015610f9457600080fd5b50519150610d289050565b600101610eca565b505060009392505050565b604051633883e11960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633883e11990859085906004018083606080828437600083820152931515601f909401601f19169091019283525050604051602080830193509181900382018186803b15801561103c57600080fd5b505afa158015611050573d6000803e3d6000fd5b505050506040513d602081101561106657600080fd5b50519392505050565b60066020526000908152604090205460ff1681565b6003816003811061109157fe5b01546001600160a01b0316905081565b60408051636d46114f60e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163da8c229e916024808301926020929190829003018186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d602081101561113157600080fd5b5051806111ca57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561119257600080fd5b505afa1580156111a6573d6000803e3d6000fd5b505050506040513d60208110156111bc57600080fd5b50516001600160a01b031633145b611209576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b61121d6001600160a01b0384168284611ddd565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816003811061125357fe5b0154905081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000805b60038160ff1610156113a75760038160ff16600381106112e657fe5b01546001600160a01b038481169116141561139f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc2b27d785836040518363ffffffff1660e01b8152600401808381526020018260ff1681526020019250505060206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d602081101561139457600080fd5b505191506113ad9050565b6001016112ca565b50600090505b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a622ee7c336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561142257600080fd5b505afa158015611436573d6000803e3d6000fd5b505050506040513d602081101561144c57600080fd5b5051806114e7575060408051636d46114f60e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163da8c229e916024808301926020929190829003018186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d60208110156114e457600080fd5b50515b8061150157503360009081526006602052604090205460ff165b8061159857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561156057600080fd5b505afa158015611574573d6000803e3d6000fd5b505050506040513d602081101561158a57600080fd5b50516001600160a01b031633145b6115d7576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6000805b60038160ff16101561162a5761162061161960008360ff16600381106115fd57fe5b0154868460ff166003811061160e57fe5b602002013590611d00565b8390611e2f565b91506001016115db565b5060008061163783610396565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116aa57600080fd5b505afa1580156116be573d6000803e3d6000fd5b505050506040513d60208110156116d457600080fd5b5051604051634515cef360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390889086906004018083606080828437600081840152601f19601f82011690508083019250505082815260200192505050600060405180830381600087803b15801561176157600080fd5b505af1158015611775573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d602081101561181257600080fd5b505190506118208183611d9b565b95508286111561185f576040805162461bcd60e51b815260206004820152600560248201526407cbedac2f60db1b604482015290519081900360640190fd5b6118936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163388611ddd565b5050505050919050565b60408051636d46114f60e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163da8c229e916024808301926020929190829003018186803b15801561190357600080fd5b505afa158015611917573d6000803e3d6000fd5b505050506040513d602081101561192d57600080fd5b5051806119c657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561198e57600080fd5b505afa1580156119a2573d6000803e3d6000fd5b505050506040513d60208110156119b857600080fd5b50516001600160a01b031633145b611a05576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b61271081565b60408051636d46114f60e11b815233600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163da8c229e916024808301926020929190829003018186803b158015611a9c57600080fd5b505afa158015611ab0573d6000803e3d6000fd5b505050506040513d6020811015611ac657600080fd5b505180611b5f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2757600080fd5b505afa158015611b3b573d6000803e3d6000fd5b505050506040513d6020811015611b5157600080fd5b50516001600160a01b031633145b611b9e576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b61121d6001600160a01b0384168383611bd6565b7f000000000000000000000000000000000000000000000000000000000000000090565b801580611c5c575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611c2e57600080fd5b505afa158015611c42573d6000803e3d6000fd5b505050506040513d6020811015611c5857600080fd5b5051155b611c975760405162461bcd60e51b815260040180806020018281038252603681526020018061228e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261121d908490611e89565b6060611cf88484600085611f3a565b949350505050565b600082611d0f575060006113ad565b82820282848281611d1c57fe5b0414610d285760405162461bcd60e51b81526004018080602001828103825260218152602001806122436021913960400191505060405180910390fd5b6000610d2883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612096565b6000610d2883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612138565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261121d908490611e89565b600082820183811015610d28576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6060611ede826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ce99092919063ffffffff16565b80519091501561121d57808060200190516020811015611efd57600080fd5b505161121d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612264602a913960400191505060405180910390fd5b606082471015611f7b5760405162461bcd60e51b815260040180806020018281038252602681526020018061221d6026913960400191505060405180910390fd5b611f8485612192565b611fd5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106120145780518252601f199092019160209182019101611ff5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612076576040519150601f19603f3d011682016040523d82523d6000602084013e61207b565b606091505b509150915061208b828286612198565b979650505050505050565b600081836121225760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120e75781810151838201526020016120cf565b50505050905090810190601f1680156121145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161212e57fe5b0495945050505050565b6000818484111561218a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156120e75781810151838201526020016120cf565b505050900390565b3b151590565b606083156121a7575081610d28565b8251156121b75782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156120e75781810151838201526020016120cf565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220fe335690db00c2c07235dcf69cf9d0c4f8b4a116b20f3fb0f9e0bb2ef86645d864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "calc_token_amount(uint256[3],bool)": {
        "details": "0: DAI, 1: USDC, 2: USDT",
        "params": {
          "amounts": "Array of token amounts",
          "deposit": "Flag for depositing LP tokens"
        }
      },
      "calc_token_amount_withdraw(uint256,address)": {
        "params": {
          "_output": "The address of the output token",
          "_shares": "The amount of 3CRV"
        }
      },
      "constructor": {
        "params": {
          "_oracle": "The address of the StableSwap3PoolOracle",
          "_stableSwap3Pool": "The address of 3Pool",
          "_token3CRV": "The address of the 3CRV token",
          "_tokenDAI": "The address of the DAI token",
          "_tokenUSDC": "The address of the USDC token",
          "_tokenUSDT": "The address of the USDT token",
          "_vaultManager": "The address of the Vault Manager"
        }
      },
      "convert(address,address,uint256)": {
        "params": {
          "_input": "The address of the token being converted",
          "_inputAmount": "The input amount of tokens that are being converted",
          "_output": "The address of the token to be converted to"
        }
      },
      "convert_rate(address,address,uint256)": {
        "params": {
          "_input": "The address of the token being converted",
          "_inputAmount": "The input amount of tokens that are being converted",
          "_output": "The address of the token to be converted to"
        }
      },
      "convert_stables(uint256[3])": {
        "details": "0: DAI, 1: USDC, 2: USDT",
        "params": {
          "amounts": "Array of token amounts"
        }
      },
      "getExpected(uint256)": {
        "params": {
          "_inputAmount": "The input amount of tokens that are being converted"
        }
      },
      "governanceRecoverUnsupported(address,uint256,address)": {
        "details": "This contract should never have any tokens in it at the end of a transaction",
        "params": {
          "_amount": "The amount to withdraw",
          "_to": "The address to receive the tokens",
          "_token": "The address of the token"
        }
      },
      "setStrategy(address,bool)": {
        "params": {
          "_status": "The bool flag allowing or disallowing use of the converter by the strategy",
          "_strategy": "The address of the strategy"
        }
      }
    },
    "title": "StableSwap3PoolConverter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Called by Governance to approve a token address to be spent by an address"
      },
      "calc_token_amount(uint256[3],bool)": {
        "notice": "Checks the amount of 3CRV given for the amounts"
      },
      "calc_token_amount_withdraw(uint256,address)": {
        "notice": "Checks the amount of an output token given for 3CRV"
      },
      "convert(address,address,uint256)": {
        "notice": "Converts the amount of input tokens to output tokens"
      },
      "convert_rate(address,address,uint256)": {
        "notice": "Checks the amount of input tokens to output tokens"
      },
      "convert_stables(uint256[3])": {
        "notice": "Converts stables of the 3Pool to 3CRV"
      },
      "getExpected(uint256)": {
        "notice": "Returns the expected amount of tokens for a given amount by querying the latest data from Chainlink"
      },
      "governanceRecoverUnsupported(address,uint256,address)": {
        "notice": "Allows Governance to withdraw tokens from the converter"
      },
      "setStrategy(address,bool)": {
        "notice": "Called by Governance to enable or disable a strategy to use the converter"
      },
      "token()": {
        "notice": "Returns the address of the 3CRV token"
      }
    },
    "notice": "The StableSwap3PoolConverter is used to convert funds on Curve's 3Pool. It is backed by Chainlink's price feeds to be secure against attackers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2543,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "PRECISION_MUL",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 2547,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IERC20)799)3_storage"
      },
      {
        "astId": 2551,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "strategies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)799)3_storage": {
        "base": "t_contract(IERC20)799",
        "encoding": "inplace",
        "label": "contract IERC20[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)799": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}