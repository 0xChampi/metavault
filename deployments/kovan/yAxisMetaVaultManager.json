{
  "address": "0x15885dE7737B179968B216275b6531f3a668E4E9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yax",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHarvestFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setControllerStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "setHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_insuranceFee",
          "type": "uint256"
        }
      ],
      "name": "setInsuranceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        }
      ],
      "name": "setInsurancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_insurancePoolFee",
          "type": "uint256"
        }
      ],
      "name": "setInsurancePoolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        }
      ],
      "name": "setStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingPoolShareFee",
          "type": "uint256"
        }
      ],
      "name": "setStakingPoolShareFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_treasuryBalance",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_treasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setVaultStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalProtectionFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalProtectionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yax",
          "type": "address"
        }
      ],
      "name": "setYax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolShareFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalProtectionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yax",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc74eb2ef356a7c72de8eac1c7d0dd02e8e8bf93607fa35ba81a065ef751b3ae8",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x15885dE7737B179968B216275b6531f3a668E4E9",
    "transactionIndex": 6,
    "gasUsed": "1099043",
    "logsBloom": "0x
    "blockHash": "0x8a478c066b7d1688efef30857d17a77bee767bc3ddc5f4b70caed1155b0bc531",
    "transactionHash": "0xc74eb2ef356a7c72de8eac1c7d0dd02e8e8bf93607fa35ba81a065ef751b3ae8",
    "logs": [],
    "blockNumber": 23062920,
    "cumulativeGasUsed": "4092922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x29a0d41ad9069861976aFA6F3e6B0b5eC2381096"
  ],
  "solcInputHash": "0dafef0f9d3baf21ab7d835401fdfdba",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yax\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setControllerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_insuranceFee\",\"type\":\"uint256\"}],\"name\":\"setInsuranceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"}],\"name\":\"setInsurancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_insurancePoolFee\",\"type\":\"uint256\"}],\"name\":\"setInsurancePoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPoolShareFee\",\"type\":\"uint256\"}],\"name\":\"setStakingPoolShareFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryBalance\",\"type\":\"uint256\"}],\"name\":\"setTreasuryBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setVaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalProtectionFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalProtectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yax\",\"type\":\"address\"}],\"name\":\"setYax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalProtectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_yax\":\"The address of the YAX token\"}},\"governanceRecoverUnsupported(address,uint256,address)\":{\"params\":{\"_amount\":\"The amount to withdraw\",\"_to\":\"The address to send to\",\"_token\":\"The address of the token\"}},\"setControllerStatus(address,bool)\":{\"params\":{\"_controller\":\"The address of the controller\",\"_status\":\"The status of the controller\"}},\"setGovernance(address)\":{\"params\":{\"_governance\":\"The address of the governance\"}},\"setHarvester(address)\":{\"params\":{\"_harvester\":\"The address of the harvester\"}},\"setInsuranceFee(uint256)\":{\"details\":\"Throws if setting fee over 1%\",\"params\":{\"_insuranceFee\":\"The value for the insurance fee\"}},\"setInsurancePool(address)\":{\"params\":{\"_insurancePool\":\"The address of the insurance pool\"}},\"setInsurancePoolFee(uint256)\":{\"details\":\"Throws if setting fee over 20%\",\"params\":{\"_insurancePoolFee\":\"The value for the insurance pool fee\"}},\"setStakingPool(address)\":{\"params\":{\"_stakingPool\":\"The address of the staking pool\"}},\"setStakingPoolShareFee(uint256)\":{\"details\":\"Throws if setting fee over 50%\",\"params\":{\"_stakingPoolShareFee\":\"The value for the staking pool fee\"}},\"setStrategist(address)\":{\"params\":{\"_strategist\":\"The address of the strategist\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"The address of the treasury\"}},\"setTreasuryBalance(uint256)\":{\"details\":\"Strategies will read this value to determine whether or not to give the treasury the treasuryFee\",\"params\":{\"_treasuryBalance\":\"The maximum balance of the treasury\"}},\"setTreasuryFee(uint256)\":{\"details\":\"Throws if setting fee over 20%\",\"params\":{\"_treasuryFee\":\"The value for the treasury fee\"}},\"setVaultStatus(address,bool)\":{\"params\":{\"_status\":\"The status of the vault\",\"_vault\":\"The address of the vault\"}},\"setWithdrawalProtectionFee(uint256)\":{\"details\":\"Throws if setting fee over 1%\",\"params\":{\"_withdrawalProtectionFee\":\"The value for the withdrawal protection fee\"}},\"setYax(address)\":{\"params\":{\"_yax\":\"The address of the YAX token\"}}},\"title\":\"yAxisMetaVaultManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHarvestFeeInfo()\":{\"notice\":\"Returns a tuple of:     YAX token,     Staking pool address,     Staking pool share fee,     Treasury address,     Checks the balance of the treasury and returns the treasury fee         if below the treasuryBalance, or 0 if above\"},\"governanceRecoverUnsupported(address,uint256,address)\":{\"notice\":\"Allows governance to pull tokens out of this contract (it should never hold tokens)\"},\"insuranceFee()\":{\"notice\":\"The following fees are all mutable.  They are updated by governance (community vote).\"},\"setControllerStatus(address,bool)\":{\"notice\":\"Sets the status for a controller\"},\"setGovernance(address)\":{\"notice\":\"Sets the governance address\"},\"setHarvester(address)\":{\"notice\":\"Sets the harvester address\"},\"setInsuranceFee(uint256)\":{\"notice\":\"Sets the insurance fee\"},\"setInsurancePool(address)\":{\"notice\":\"Sets the insurance pool address\"},\"setInsurancePoolFee(uint256)\":{\"notice\":\"Sets the insurance pool fee\"},\"setStakingPool(address)\":{\"notice\":\"Sets the staking pool address\"},\"setStakingPoolShareFee(uint256)\":{\"notice\":\"Sets the staking pool share fee\"},\"setStrategist(address)\":{\"notice\":\"Sets the strategist address\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury address\"},\"setTreasuryBalance(uint256)\":{\"notice\":\"Sets the maximum treasury balance\"},\"setTreasuryFee(uint256)\":{\"notice\":\"Sets the treasury fee\"},\"setVaultStatus(address,bool)\":{\"notice\":\"Sets the status for a vault\"},\"setWithdrawalProtectionFee(uint256)\":{\"notice\":\"Sets the withdrawal protection fee\"},\"setYax(address)\":{\"notice\":\"Sets the YAX address\"}},\"notice\":\"This contract serves as the central point for governance-voted variables. Fees and permissioned addresses are stored and referenced in this contract only.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/yAxisMetaVaultManager.sol\":\"yAxisMetaVaultManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/yAxisMetaVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVaultManager.sol\\\";\\n\\n/**\\n * @title yAxisMetaVaultManager\\n * @notice This contract serves as the central point for governance-voted\\n * variables. Fees and permissioned addresses are stored and referenced in\\n * this contract only.\\n */\\ncontract yAxisMetaVaultManager is IVaultManager { // solhint-disable-line contract-name-camelcase\\n    address public override governance;\\n    address public override harvester;\\n    address public override insurancePool;\\n    address public override stakingPool;\\n    address public override strategist;\\n    address public override treasury;\\n    address public override yax;\\n\\n    /**\\n     *  The following fees are all mutable.\\n     *  They are updated by governance (community vote).\\n     */\\n    uint256 public override insuranceFee;\\n    uint256 public override insurancePoolFee;\\n    uint256 public override stakingPoolShareFee;\\n    uint256 public override treasuryBalance;\\n    uint256 public override treasuryFee;\\n    uint256 public override withdrawalProtectionFee;\\n\\n    mapping(address => bool) public override vaults;\\n    mapping(address => bool) public override controllers;\\n\\n    /**\\n     * @param _yax The address of the YAX token\\n     */\\n    constructor(address _yax) public {\\n        yax = _yax;\\n        governance = msg.sender;\\n        strategist = msg.sender;\\n        harvester = msg.sender;\\n        stakingPoolShareFee = 2000;\\n        treasuryBalance = 20000e18;\\n        treasuryFee = 500;\\n        withdrawalProtectionFee = 10;\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Allows governance to pull tokens out of this contract\\n     * (it should never hold tokens)\\n     * @param _token The address of the token\\n     * @param _amount The amount to withdraw\\n     * @param _to The address to send to\\n     */\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _token.transfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the governance address\\n     * @param _governance The address of the governance\\n     */\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    /**\\n     * @notice Sets the insurance fee\\n     * @dev Throws if setting fee over 1%\\n     * @param _insuranceFee The value for the insurance fee\\n     */\\n    function setInsuranceFee(uint256 _insuranceFee) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_insuranceFee <= 100, \\\"_insuranceFee over 1%\\\");\\n        insuranceFee = _insuranceFee;\\n    }\\n\\n    /**\\n     * @notice Sets the insurance pool address\\n     * @param _insurancePool The address of the insurance pool\\n     */\\n    function setInsurancePool(address _insurancePool) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        insurancePool = _insurancePool;\\n    }\\n\\n    /**\\n     * @notice Sets the insurance pool fee\\n     * @dev Throws if setting fee over 20%\\n     * @param _insurancePoolFee The value for the insurance pool fee\\n     */\\n    function setInsurancePoolFee(uint256 _insurancePoolFee) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_insurancePoolFee <= 2000, \\\"_insurancePoolFee over 20%\\\");\\n        insurancePoolFee = _insurancePoolFee;\\n    }\\n\\n    /**\\n     * @notice Sets the staking pool address\\n     * @param _stakingPool The address of the staking pool\\n     */\\n    function setStakingPool(address _stakingPool) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        stakingPool = _stakingPool;\\n    }\\n\\n    /**\\n     * @notice Sets the staking pool share fee\\n     * @dev Throws if setting fee over 50%\\n     * @param _stakingPoolShareFee The value for the staking pool fee\\n     */\\n    function setStakingPoolShareFee(uint256 _stakingPoolShareFee) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_stakingPoolShareFee <= 5000, \\\"_stakingPoolShareFee over 50%\\\");\\n        stakingPoolShareFee = _stakingPoolShareFee;\\n    }\\n\\n    /**\\n     * @notice Sets the strategist address\\n     * @param _strategist The address of the strategist\\n     */\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @param _treasury The address of the treasury\\n     */\\n    function setTreasury(address _treasury) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Sets the maximum treasury balance\\n     * @dev Strategies will read this value to determine whether or not\\n     * to give the treasury the treasuryFee\\n     * @param _treasuryBalance The maximum balance of the treasury\\n     */\\n    function setTreasuryBalance(uint256 _treasuryBalance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        treasuryBalance = _treasuryBalance;\\n    }\\n\\n    /**\\n     * @notice Sets the treasury fee\\n     * @dev Throws if setting fee over 20%\\n     * @param _treasuryFee The value for the treasury fee\\n     */\\n    function setTreasuryFee(uint256 _treasuryFee) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_treasuryFee <= 2000, \\\"_treasuryFee over 20%\\\");\\n        treasuryFee = _treasuryFee;\\n    }\\n\\n    /**\\n     * @notice Sets the withdrawal protection fee\\n     * @dev Throws if setting fee over 1%\\n     * @param _withdrawalProtectionFee The value for the withdrawal protection fee\\n     */\\n    function setWithdrawalProtectionFee(uint256 _withdrawalProtectionFee) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_withdrawalProtectionFee <= 100, \\\"_withdrawalProtectionFee over 1%\\\");\\n        withdrawalProtectionFee = _withdrawalProtectionFee;\\n    }\\n\\n    /**\\n     * @notice Sets the YAX address\\n     * @param _yax The address of the YAX token\\n     */\\n    function setYax(address _yax) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        yax = _yax;\\n    }\\n\\n    /**\\n     * (GOVERNANCE|STRATEGIST)-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Sets the status for a controller\\n     * @param _controller The address of the controller\\n     * @param _status The status of the controller\\n     */\\n    function setControllerStatus(address _controller, bool _status) external {\\n        require(msg.sender == strategist || msg.sender == governance, \\\"!strategist\\\");\\n        controllers[_controller] = _status;\\n    }\\n\\n    /**\\n     * @notice Sets the harvester address\\n     * @param _harvester The address of the harvester\\n     */\\n    function setHarvester(address _harvester) external {\\n        require(msg.sender == strategist || msg.sender == governance, \\\"!strategist\\\");\\n        harvester = _harvester;\\n    }\\n\\n    /**\\n     * @notice Sets the status for a vault\\n     * @param _vault The address of the vault\\n     * @param _status The status of the vault\\n     */\\n    function setVaultStatus(address _vault, bool _status) external {\\n        require(msg.sender == strategist || msg.sender == governance, \\\"!strategist\\\");\\n        vaults[_vault] = _status;\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns a tuple of:\\n     *     YAX token,\\n     *     Staking pool address,\\n     *     Staking pool share fee,\\n     *     Treasury address,\\n     *     Checks the balance of the treasury and returns the treasury fee\\n     *         if below the treasuryBalance, or 0 if above\\n     */\\n    function getHarvestFeeInfo()\\n        external\\n        view\\n        override\\n        returns (address, address, uint256, address, uint256, address, uint256)\\n    {\\n        return (\\n            yax,\\n            stakingPool,\\n            stakingPoolShareFee,\\n            treasury,\\n            IERC20(yax).balanceOf(treasury) >= treasuryBalance ? 0 : treasuryFee,\\n            insurancePool,\\n            insurancePoolFee\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xae7f97c70ef6875c44494efbe5395d50da85ee2f3929a0952796bf1dedc9feee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_yax": "The address of the YAX token"
        }
      },
      "governanceRecoverUnsupported(address,uint256,address)": {
        "params": {
          "_amount": "The amount to withdraw",
          "_to": "The address to send to",
          "_token": "The address of the token"
        }
      },
      "setControllerStatus(address,bool)": {
        "params": {
          "_controller": "The address of the controller",
          "_status": "The status of the controller"
        }
      },
      "setGovernance(address)": {
        "params": {
          "_governance": "The address of the governance"
        }
      },
      "setHarvester(address)": {
        "params": {
          "_harvester": "The address of the harvester"
        }
      },
      "setInsuranceFee(uint256)": {
        "details": "Throws if setting fee over 1%",
        "params": {
          "_insuranceFee": "The value for the insurance fee"
        }
      },
      "setInsurancePool(address)": {
        "params": {
          "_insurancePool": "The address of the insurance pool"
        }
      },
      "setInsurancePoolFee(uint256)": {
        "details": "Throws if setting fee over 20%",
        "params": {
          "_insurancePoolFee": "The value for the insurance pool fee"
        }
      },
      "setStakingPool(address)": {
        "params": {
          "_stakingPool": "The address of the staking pool"
        }
      },
      "setStakingPoolShareFee(uint256)": {
        "details": "Throws if setting fee over 50%",
        "params": {
          "_stakingPoolShareFee": "The value for the staking pool fee"
        }
      },
      "setStrategist(address)": {
        "params": {
          "_strategist": "The address of the strategist"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "The address of the treasury"
        }
      },
      "setTreasuryBalance(uint256)": {
        "details": "Strategies will read this value to determine whether or not to give the treasury the treasuryFee",
        "params": {
          "_treasuryBalance": "The maximum balance of the treasury"
        }
      },
      "setTreasuryFee(uint256)": {
        "details": "Throws if setting fee over 20%",
        "params": {
          "_treasuryFee": "The value for the treasury fee"
        }
      },
      "setVaultStatus(address,bool)": {
        "params": {
          "_status": "The status of the vault",
          "_vault": "The address of the vault"
        }
      },
      "setWithdrawalProtectionFee(uint256)": {
        "details": "Throws if setting fee over 1%",
        "params": {
          "_withdrawalProtectionFee": "The value for the withdrawal protection fee"
        }
      },
      "setYax(address)": {
        "params": {
          "_yax": "The address of the YAX token"
        }
      }
    },
    "title": "yAxisMetaVaultManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getHarvestFeeInfo()": {
        "notice": "Returns a tuple of:     YAX token,     Staking pool address,     Staking pool share fee,     Treasury address,     Checks the balance of the treasury and returns the treasury fee         if below the treasuryBalance, or 0 if above"
      },
      "governanceRecoverUnsupported(address,uint256,address)": {
        "notice": "Allows governance to pull tokens out of this contract (it should never hold tokens)"
      },
      "insuranceFee()": {
        "notice": "The following fees are all mutable.  They are updated by governance (community vote)."
      },
      "setControllerStatus(address,bool)": {
        "notice": "Sets the status for a controller"
      },
      "setGovernance(address)": {
        "notice": "Sets the governance address"
      },
      "setHarvester(address)": {
        "notice": "Sets the harvester address"
      },
      "setInsuranceFee(uint256)": {
        "notice": "Sets the insurance fee"
      },
      "setInsurancePool(address)": {
        "notice": "Sets the insurance pool address"
      },
      "setInsurancePoolFee(uint256)": {
        "notice": "Sets the insurance pool fee"
      },
      "setStakingPool(address)": {
        "notice": "Sets the staking pool address"
      },
      "setStakingPoolShareFee(uint256)": {
        "notice": "Sets the staking pool share fee"
      },
      "setStrategist(address)": {
        "notice": "Sets the strategist address"
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury address"
      },
      "setTreasuryBalance(uint256)": {
        "notice": "Sets the maximum treasury balance"
      },
      "setTreasuryFee(uint256)": {
        "notice": "Sets the treasury fee"
      },
      "setVaultStatus(address,bool)": {
        "notice": "Sets the status for a vault"
      },
      "setWithdrawalProtectionFee(uint256)": {
        "notice": "Sets the withdrawal protection fee"
      },
      "setYax(address)": {
        "notice": "Sets the YAX address"
      }
    },
    "notice": "This contract serves as the central point for governance-voted variables. Fees and permissioned addresses are stored and referenced in this contract only.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12323,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12326,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "harvester",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12329,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "insurancePool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12332,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12335,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "strategist",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12338,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12341,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "yax",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12345,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "insuranceFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12348,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "insurancePoolFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12351,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "stakingPoolShareFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12354,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "treasuryBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 12357,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12360,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "withdrawalProtectionFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12365,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "vaults",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12370,
        "contract": "contracts/metavault/yAxisMetaVaultManager.sol:yAxisMetaVaultManager",
        "label": "controllers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}