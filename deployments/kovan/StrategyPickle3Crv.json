{
  "address": "0xc93a219331527d035f30444FFB83C5B67c30A034",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_p3crv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pickle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_t3crv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "_stableSwap3Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p3crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickleJar",
      "outputs": [
        {
          "internalType": "contract PickleJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickleMasterChef",
      "outputs": [
        {
          "internalType": "contract PickleMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PickleMasterChef",
          "name": "_pickleMasterChef",
          "type": "address"
        }
      ],
      "name": "setPickleMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "setPoolId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableForAddLiquidity",
          "type": "address"
        }
      ],
      "name": "setStableForLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableForAddLiquidity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap3Pool",
      "outputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "t3crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa712c432e5f6985e58c3fad126a46d63f122c5aab3e5fe81a0e284b916603f98",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0xc93a219331527d035f30444FFB83C5B67c30A034",
    "transactionIndex": 6,
    "gasUsed": "3271813",
    "logsBloom": "0x
    "blockHash": "0xef58b3855d5486c29f195bbdfe6e0d46cc4f0c311cf18b89e593d7beb6671302",
    "transactionHash": "0xa712c432e5f6985e58c3fad126a46d63f122c5aab3e5fe81a0e284b916603f98",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 22972829,
        "transactionHash": "0xa712c432e5f6985e58c3fad126a46d63f122c5aab3e5fe81a0e284b916603f98",
        "address": "0x76530B1D5851B35b6fe85c5FC70a7Ee743ca99D0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c93a219331527d035f30444ffb83c5b67c30a034",
          "0x00000000000000000000000043824fbfec887a62592eb52c39752e162d2eff05"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0xef58b3855d5486c29f195bbdfe6e0d46cc4f0c311cf18b89e593d7beb6671302"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 22972829,
        "transactionHash": "0xa712c432e5f6985e58c3fad126a46d63f122c5aab3e5fe81a0e284b916603f98",
        "address": "0x54f37AE099c0417146CE57615D4D39fB0D666bed",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c93a219331527d035f30444ffb83c5b67c30a034",
          "0x000000000000000000000000c76329638725931392c356a2088a4be8c16b9890"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0xef58b3855d5486c29f195bbdfe6e0d46cc4f0c311cf18b89e593d7beb6671302"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 22972829,
        "transactionHash": "0xa712c432e5f6985e58c3fad126a46d63f122c5aab3e5fe81a0e284b916603f98",
        "address": "0xC76329638725931392C356a2088A4Be8C16b9890",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c93a219331527d035f30444ffb83c5b67c30a034",
          "0x000000000000000000000000bd17b1ce622d73bd438b9e658aca5996dc394b0d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0xef58b3855d5486c29f195bbdfe6e0d46cc4f0c311cf18b89e593d7beb6671302"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 22972829,
        "transactionHash": "0xa712c432e5f6985e58c3fad126a46d63f122c5aab3e5fe81a0e284b916603f98",
        "address": "0x39923ca790d0Af8b18dfa265eB39efb7F8434fbc",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c93a219331527d035f30444ffb83c5b67c30a034",
          "0x00000000000000000000000043824fbfec887a62592eb52c39752e162d2eff05"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0xef58b3855d5486c29f195bbdfe6e0d46cc4f0c311cf18b89e593d7beb6671302"
      }
    ],
    "blockNumber": 22972829,
    "cumulativeGasUsed": "4834091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x54f37AE099c0417146CE57615D4D39fB0D666bed",
    "0xC76329638725931392C356a2088A4Be8C16b9890",
    "0x39923ca790d0Af8b18dfa265eB39efb7F8434fbc",
    "0x76530B1D5851B35b6fe85c5FC70a7Ee743ca99D0",
    "0x54f37AE099c0417146CE57615D4D39fB0D666bed",
    "0x2B383417F6859a96a5fB3C28Ea0e7fa1887fA70d",
    "0x2640F74f8586b84D95bE5b48CA96eFC90320D30E",
    "0xda6E4647bD6f98A41292434277B466d654c52b75",
    "0x914CB8f93Fb649406618FdEC9fd328Cc3d1c5644",
    "0xbf6985d14f74E9D0A3aaF40444Ab80e3CA198f12",
    "0x2Fe58c52Dbb2F5F934B677823F3151d0663C6D56",
    "0x43824FBFeC887A62592eb52C39752E162d2eff05"
  ],
  "solcInputHash": "29c097734f195176561e60c2670ea13c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_p3crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pickle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t3crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickleJar\",\"outputs\":[{\"internalType\":\"contract PickleJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickleMasterChef\",\"outputs\":[{\"internalType\":\"contract PickleMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PickleMasterChef\",\"name\":\"_pickleMasterChef\",\"type\":\"address\"}],\"name\":\"setPickleMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"setPoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableForAddLiquidity\",\"type\":\"address\"}],\"name\":\"setStableForLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableForAddLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"setController(address)\":{\"params\":{\"_controller\":\"The address of the controller\"}},\"setRouter(address)\":{\"params\":{\"_router\":\"The address of the router\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest()\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setController(address)\":{\"notice\":\"Sets the address of the controller\"},\"setRouter(address)\":{\"notice\":\"Sets the address of the ISwap-compatible router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/strategies/StrategyPickle3Crv.sol\":\"StrategyPickle3Crv\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/interfaces/PickleJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface PickleJar {\\n    function balanceOf(address account) external view returns (uint);\\n    function balance() external view returns (uint);\\n    function available() external view returns (uint);\\n    function depositAll() external;\\n    function deposit(uint _amount) external;\\n    function withdrawAll() external;\\n    function withdraw(uint _shares) external;\\n    function getRatio() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x52df03835714812f6fa6fd0e371ba6a7123f744a0211bccbd7433c034daadf99\",\"license\":\"MIT\"},\"contracts/interfaces/PickleMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface PickleMasterChef {\\n    function deposit(uint _poolId, uint _amount) external;\\n    function withdraw(uint _poolId, uint _amount) external;\\n    function pendingPickle(uint _pid, address _user) external view returns (uint);\\n    function userInfo(uint _pid, address _user) external view returns (uint amount, uint rewardDebt);\\n    function emergencyWithdraw(uint _pid) external;\\n}\\n\",\"keccak256\":\"0xec04110b208102558763f66f83e4fe1a436db9170d21fef5176976735aff85b8\",\"license\":\"MIT\"},\"contracts/metavault/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x34677b3f7fc870d4738321e11c0395054e0c995100878ff628e681e41b7ce199\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x913b50315c2ef2d41e44e36802e2db0e11a664e76cc232f5496da7d4efde4e5b\",\"license\":\"MIT\"},\"contracts/metavault/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest() external;\\n    function skim() external;\\n    function want() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf4c1f571434bfcb0929b1890e7838f8427395d03057e553d63108e71a1ca5fd3\",\"license\":\"MIT\"},\"contracts/metavault/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n}\\n\",\"keccak256\":\"0x008a41c285e92105e22384cfa3b438c734c431a0d48e2c1920a339de9807809a\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../IStableSwap3Pool.sol\\\";\\nimport \\\"../ISwap.sol\\\";\\nimport \\\"../IVaultManager.sol\\\";\\nimport \\\"../IStrategy.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable weth;\\n    address public controller;\\n    IVaultManager public vaultManager;\\n    ISwap public router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _vaultManager The address of the vaultManager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _router The address of the router for swapping tokens\\n     */\\n    constructor(\\n        address _controller,\\n        address _vaultManager,\\n        address _want,\\n        address _weth,\\n        address _router\\n    ) public {\\n        want = _want;\\n        controller = _controller;\\n        vaultManager = IVaultManager(_vaultManager);\\n        weth = _weth;\\n        router = ISwap(_router);\\n        IERC20(_weth).safeApprove(address(_router), type(uint256).max);\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(IERC20 _token, address _spender, uint256 _amount) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the controller\\n     * @param _controller The address of the controller\\n     */\\n    function setController(address _controller) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _router The address of the router\\n     */\\n    function setRouter(address _router) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        router = ISwap(_router);\\n    }\\n\\n    /**\\n     * AUTHORIZED-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit() external override onlyAuthorized {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest() external override onlyAuthorized {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim() external override onlyAuthorized {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(address _asset) external override onlyAuthorized {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external override onlyAuthorized {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        address _token = _vaultWant();\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll() external override onlyAuthorized returns (uint256 _balance) {\\n        _withdrawAll();\\n\\n        address _token = _vaultWant();\\n        _balance = IERC20(_token).balanceOf(address(this));\\n\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf() external override view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool() public view override virtual returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant() public view override returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit() internal virtual;\\n\\n    function _harvest() internal virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken\\n    ) internal returns (uint256 _wethBal) {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yax,\\n                address stakingPool,\\n                uint256 stakingPoolShareFee,\\n                address treasury,\\n                uint256 treasuryFee,\\n                address insurance,\\n                uint256 insurancePoolFee\\n            ) = vaultManager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the staking pool with YAX\\n            if (stakingPoolShareFee > 0 && stakingPool != address(0)) {\\n                _fee = _wethBal.mul(stakingPoolShareFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(stakingPool, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(treasury, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the insurance pool with YAX\\n            if (insurancePoolFee > 0 && insurance != address(0)) {\\n                _fee = _wethBal.mul(insurancePoolFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(insurance, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokens(address _input, address _output, uint256 _amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            1,\\n            path,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp.add(1800)\\n        );\\n    }\\n\\n    function _vaultWant() internal returns (address) {\\n        return IController(controller).strategyTokens(address(this));\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _withdrawAll() internal virtual;\\n\\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\\n        address _token = _vaultWant();\\n        uint256 _before = IERC20(_token).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(_token).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == controller\\n             || msg.sender == vaultManager.strategist()\\n             || msg.sender == vaultManager.governance(),\\n             \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd2a623dd7ec39072eecbe2d178f40cbe6237ac06f5b113389118b7a696094707\",\"license\":\"MIT\"},\"contracts/metavault/strategies/StrategyPickle3Crv.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IStableSwap3Pool.sol\\\";\\n\\nimport \\\"../../interfaces/PickleJar.sol\\\";\\nimport \\\"../../interfaces/PickleMasterChef.sol\\\";\\n\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyPickle3Crv is BaseStrategy {\\n    address public p3crv = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\\n\\n    // used for pickle -> weth -> [stableForAddLiquidity] -> 3crv route\\n    address public pickle = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\\n    address public t3crv = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n    // for add_liquidity via curve.fi to get back 3CRV\\n    // (set stableForAddLiquidity for the best stable coin used in the route)\\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    address public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    PickleJar public pickleJar;\\n    PickleMasterChef public pickleMasterChef = PickleMasterChef(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\\n    uint public poolId = 14;\\n\\n    IStableSwap3Pool public stableSwap3Pool;\\n    address public stableForAddLiquidity;\\n\\n    constructor(\\n        address _want,\\n        address _p3crv,\\n        address _pickle,\\n        address _weth,\\n        address _t3crv,\\n        address _dai,\\n        address _usdc,\\n        address _usdt,\\n        IStableSwap3Pool _stableSwap3Pool,\\n        address _controller,\\n        address _vaultManager,\\n        address _router\\n    )\\n        public\\n        BaseStrategy(_controller, _vaultManager, _want, _weth, _router)\\n    {\\n        p3crv = _p3crv;\\n        pickle = _pickle;\\n        t3crv = _t3crv;\\n        dai = _dai;\\n        usdc = _usdc;\\n        usdt = _usdt;\\n        stableSwap3Pool = _stableSwap3Pool;\\n        pickleJar = PickleJar(_p3crv);\\n        IERC20(_want).safeApprove(_p3crv, type(uint256).max);\\n        IERC20(_p3crv).safeApprove(address(pickleMasterChef), type(uint256).max);\\n        IERC20(_pickle).safeApprove(address(_router), type(uint256).max);\\n    }\\n\\n    function setStableForLiquidity(address _stableForAddLiquidity) external onlyAuthorized {\\n        stableForAddLiquidity = _stableForAddLiquidity;\\n    }\\n\\n    function setPickleMasterChef(PickleMasterChef _pickleMasterChef) external onlyAuthorized {\\n        pickleMasterChef = _pickleMasterChef;\\n        IERC20(p3crv).safeApprove(address(pickleMasterChef), type(uint256).max);\\n    }\\n\\n    function setPoolId(uint _poolId) external onlyAuthorized {\\n        poolId = _poolId;\\n    }\\n\\n    function _deposit() internal override {\\n        uint _wantBal = balanceOfWant();\\n        if (_wantBal > 0) {\\n            // deposit 3crv to pickleJar\\n            pickleJar.depositAll();\\n        }\\n\\n        uint _p3crvBal = IERC20(p3crv).balanceOf(address(this));\\n        if (_p3crvBal > 0) {\\n            // stake p3crv to pickleMasterChef\\n            pickleMasterChef.deposit(poolId, _p3crvBal);\\n        }\\n    }\\n\\n    function _claimReward() internal {\\n        pickleMasterChef.withdraw(poolId, 0);\\n    }\\n\\n    function _withdrawAll() internal override {\\n        (uint amount,) = pickleMasterChef.userInfo(poolId, address(this));\\n        pickleMasterChef.withdraw(poolId, amount);\\n        pickleJar.withdrawAll();\\n    }\\n\\n    // to get back want (3CRV)\\n    function _addLiquidity() internal {\\n        // 0: DAI, 1: USDC, 2: USDT\\n        uint[3] memory amounts;\\n        amounts[0] = IERC20(dai).balanceOf(address(this));\\n        amounts[1] = IERC20(usdc).balanceOf(address(this));\\n        amounts[2] = IERC20(usdt).balanceOf(address(this));\\n        // add_liquidity(uint[3] calldata amounts, uint min_mint_amount)\\n        stableSwap3Pool.add_liquidity(amounts, 1);\\n    }\\n\\n    function _harvest() internal override {\\n        _claimReward();\\n        uint256 _remainingWeth = _payHarvestFees(pickle);\\n\\n        if (_remainingWeth > 0) {\\n            _swapTokens(weth, stableForAddLiquidity, _remainingWeth);\\n            _addLiquidity();\\n\\n            if (balanceOfWant() > 0) {\\n                _deposit(); // auto re-invest\\n            }\\n        }\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        // unstake p3crv from pickleMasterChef\\n        uint _ratio = pickleJar.getRatio();\\n        _amount = _amount.mul(1e18).div(_ratio);\\n        (uint _stakedAmount,) = pickleMasterChef.userInfo(poolId, address(this));\\n        if (_amount > _stakedAmount) {\\n            _amount = _stakedAmount;\\n        }\\n        uint _before = pickleJar.balanceOf(address(this));\\n        pickleMasterChef.withdraw(poolId, _amount);\\n        uint _after = pickleJar.balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        // withdraw 3crv from pickleJar\\n        pickleJar.withdraw(_amount);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint) {\\n        uint p3crvBal = pickleJar.balanceOf(address(this));\\n        (uint amount,) = pickleMasterChef.userInfo(poolId, address(this));\\n        return p3crvBal.add(amount).mul(pickleJar.getRatio()).div(1e18);\\n    }\\n}\\n\",\"keccak256\":\"0x749660dfc4d961bba36a08043981b07e6bf4405100317e78abb5ec1b8097679e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160a01b0319908116731bb74b5ddc1f4fc91d6f9e7906cf68bc93538e331790915560048054821673429881672b9ae42b8eba0e26cd9c73711b891ca5179055600580548216736c3f90f043a72fa612cbac8115ee7e52bde6e490179055600680548216736b175474e89094c44da98b954eedeac495271d0f17905560078054821673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4817905560088054821673dac17f958d2ee523a2206206994597c13d831ec7179055600a805490911673bd17b1ce622d73bd438b9e658aca5996dc394b0d179055600e600b55348015620000f457600080fd5b5060405162003ba538038062003ba583398181016040526101808110156200011b57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505082828d8b84826001600160a01b03166080816001600160a01b031660601b81525050846000806101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b031660a0816001600160a01b031660601b8152505080600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200027481600019846001600160a01b03166200043b60201b62001b07179092919060201c565b50505050508a600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600760006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600c60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600960006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620003d88b6000198e6001600160a01b03166200043b60201b62001b07179092919060201c565b600a5462000402906001600160a01b038d811691166000196200043b602090811b62001b0717901c565b62000429816000198c6001600160a01b03166200043b60201b62001b07179092919060201c565b5050505050505050505050506200084e565b801580620004c5575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200049557600080fd5b505afa158015620004aa573d6000803e3d6000fd5b505050506040513d6020811015620004c157600080fd5b5051155b620005025760405162461bcd60e51b815260040180806020018281038252603681526020018062003b6f6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200055a9185916200055f16565b505050565b6060620005bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200061b60201b62001c1a179092919060201c565b8051909150156200055a57808060200190516020811015620005dc57600080fd5b50516200055a5760405162461bcd60e51b815260040180806020018281038252602a81526020018062003b45602a913960400191505060405180910390fd5b60606200062c848460008562000636565b90505b9392505050565b606082471015620006795760405162461bcd60e51b815260040180806020018281038252602681526020018062003b1f6026913960400191505060405180910390fd5b62000684856200079e565b620006d6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620007175780518252601f199092019160209182019101620006f6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146200077b576040519150601f19603f3d011682016040523d82523d6000602084013e62000780565b606091505b50909250905062000793828286620007a4565b979650505050505050565b3b151590565b60608315620007b55750816200062f565b825115620007c65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000812578181015183820152602001620007f8565b50505050905090810190601f168015620008405780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c613275620008aa60003980610a315280611f7a528061298252806129c75280612b2d5280612c155280612cc05280612d5752508061073d52806107685280610d3152806117d552506132756000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063853828b61161010f578063cb946c26116100a2578063f3887eee11610071578063f3887eee146103f3578063f4b9fa75146103fb578063f77c479114610403578063f887ea401461040b576101f0565b8063cb946c26146103a5578063d0e30db0146103ad578063dd0081c7146103b5578063ef9e2379146103bd576101f0565b8063ac78012c116100de578063ac78012c14610352578063aeb714f41461036f578063c0d7865514610377578063c1a3d44c1461039d576101f0565b8063853828b6146103145780638a4adf241461031c5780638b3c99e41461032457806392eefe9b1461032c576101f0565b80634641257d1161018757806370ea249c1161015657806370ea249c146102b8578063722713f7146102de57806378d2d579146102e65780637e236c5e1461030c576101f0565b80634641257d1461027a57806351cff8d9146102825780635a3874ac146102a85780636948ab6f146102b0576101f0565b80632f48ab7d116101c35780632f48ab7d1461025a5780633e0dc34e146102625780633e413bee1461026a5780633fc8cef314610272576101f0565b806311588086146101f55780631dd19cb41461020f5780631f1fcd51146102195780632e1a7d4d1461023d575b600080fd5b6101fd610413565b60408051918252519081900360200190f35b6102176105b6565b005b610221610766565b604080516001600160a01b039092168252519081900360200190f35b6102176004803603602081101561025357600080fd5b503561078a565b610221610a0b565b6101fd610a1a565b610221610a20565b610221610a2f565b610217610a53565b6102176004803603602081101561029857600080fd5b50356001600160a01b0316610bc0565b610221610e2e565b610221610e3d565b610217600480360360208110156102ce57600080fd5b50356001600160a01b0316610e4c565b6101fd610fd3565b610217600480360360208110156102fc57600080fd5b50356001600160a01b0316610ff3565b610221611190565b6101fd61119f565b61022161146e565b61022161147d565b6102176004803603602081101561034257600080fd5b50356001600160a01b031661148c565b6102176004803603602081101561036857600080fd5b5035611572565b6102216116dc565b6102176004803603602081101561038d57600080fd5b50356001600160a01b03166116eb565b6101fd6117d1565b610221611871565b610217611880565b6101fd6119ed565b610217600480360360608110156103d357600080fd5b506001600160a01b038135811691602081013590911690604001356119f3565b610221611acb565b610221611ada565b610221611ae9565b610221611af8565b600954604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d602081101561048d57600080fd5b5051600a54600b54604080516393f1a40b60e01b8152600481019290925230602483015280519394506000936001600160a01b03909316926393f1a40b926044808201939291829003018186803b1580156104e757600080fd5b505afa1580156104fb573d6000803e3d6000fd5b505050506040513d604081101561051157600080fd5b50516009546040805163760f5ebd60e11b815290519293506105af92670de0b6b3a7640000926105a9926001600160a01b039091169163ec1ebd7a91600480820192602092909190829003018186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d602081101561059757600080fd5b50516105a38686611c33565b90611c96565b90611cef565b9250505090565b6000546001600160a01b03163314806106505750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d602081101561064257600080fd5b50516001600160a01b031633145b806106dc5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d60208110156106ce57600080fd5b50516001600160a01b031633145b61071b576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600054610764906001600160a01b03166107336117d1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611d31565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806108245750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d602081101561081657600080fd5b50516001600160a01b031633145b806108b05750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561087857600080fd5b505afa15801561088c573d6000803e3d6000fd5b505050506040513d60208110156108a257600080fd5b50516001600160a01b031633145b6108ef576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006108f96117d1565b905081811015610924576109156109108383611d83565b611dc5565b91506109218282611c33565b91505b600061092e611ee8565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d60208110156109a957600080fd5b505190506001600160a01b0381166109f1576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b610a056001600160a01b0383168286611d31565b50505050565b6008546001600160a01b031681565b600b5481565b6007546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331480610aed5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b50516001600160a01b031633145b80610b795750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b50516001600160a01b031633145b610bb8576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610764611f49565b6000546001600160a01b0316331480610c5a5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2257600080fd5b505afa158015610c36573d6000803e3d6000fd5b505050506040513d6020811015610c4c57600080fd5b50516001600160a01b031633145b80610ce65750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610cae57600080fd5b505afa158015610cc2573d6000803e3d6000fd5b505050506040513d6020811015610cd857600080fd5b50516001600160a01b031633145b610d25576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610d95576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d6020811015610e0a57600080fd5b5051600054909150610e29906001600160a01b03848116911683611d31565b505050565b600c546001600160a01b031681565b6005546001600160a01b031681565b6000546001600160a01b0316331480610ee65750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d6020811015610ed857600080fd5b50516001600160a01b031633145b80610f725750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3a57600080fd5b505afa158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b50516001600160a01b031633145b610fb1576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610fee610fe0610413565b610fe86117d1565b90611c33565b905090565b6000546001600160a01b031633148061108d5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561105557600080fd5b505afa158015611069573d6000803e3d6000fd5b505050506040513d602081101561107f57600080fd5b50516001600160a01b031633145b806111195750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d602081101561110b57600080fd5b50516001600160a01b031633145b611158576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b03838116919091179182905560035461118d929082169116600019611b07565b50565b600a546001600160a01b031681565b600080546001600160a01b031633148061123a5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561120257600080fd5b505afa158015611216573d6000803e3d6000fd5b505050506040513d602081101561122c57600080fd5b50516001600160a01b031633145b806112c65750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d60208110156112b857600080fd5b50516001600160a01b031633145b611305576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b61130d611fc9565b6000611317611ee8565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d602081101561139057600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b1580156113e357600080fd5b505afa1580156113f7573d6000803e3d6000fd5b505050506040513d602081101561140d57600080fd5b505190506001600160a01b038116611455576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6114696001600160a01b0383168285611d31565b505090565b6001546001600160a01b031681565b6003546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d602081101561150457600080fd5b50516001600160a01b03163314611550576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633148061160c5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d457600080fd5b505afa1580156115e8573d6000803e3d6000fd5b505050506040513d60208110156115fe57600080fd5b50516001600160a01b031633145b806116985750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d602081101561168a57600080fd5b50516001600160a01b031633145b6116d7576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600b55565b6009546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561173957600080fd5b505afa15801561174d573d6000803e3d6000fd5b505050506040513d602081101561176357600080fd5b50516001600160a01b031633146117af576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561184057600080fd5b505afa158015611854573d6000803e3d6000fd5b505050506040513d602081101561186a57600080fd5b5051905090565b600d546001600160a01b031681565b6000546001600160a01b031633148061191a5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d602081101561190c57600080fd5b50516001600160a01b031633145b806119a65750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561196e57600080fd5b505afa158015611982573d6000803e3d6000fd5b505050506040513d602081101561199857600080fd5b50516001600160a01b031633145b6119e5576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610764612125565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d6020811015611a6b57600080fd5b50516001600160a01b03163314611ab7576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610e296001600160a01b0384168383611b07565b6004546001600160a01b031681565b6006546001600160a01b031681565b6000546001600160a01b031681565b6002546001600160a01b031681565b801580611b8d575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611b5f57600080fd5b505afa158015611b73573d6000803e3d6000fd5b505050506040513d6020811015611b8957600080fd5b5051155b611bc85760405162461bcd60e51b815260040180806020018281038252603681526020018061320a6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610e29908490612293565b6060611c298484600085612344565b90505b9392505050565b600082820183811015611c8d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082611ca557506000611c90565b82820282848281611cb257fe5b0414611c8d5760405162461bcd60e51b81526004018080602001828103825260218152602001806131bf6021913960400191505060405180910390fd5b6000611c8d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506124a0565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e29908490612293565b6000611c8d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612542565b600080611dd0611ee8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e2157600080fd5b505afa158015611e35573d6000803e3d6000fd5b505050506040513d6020811015611e4b57600080fd5b50519050611e588461259c565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ea757600080fd5b505afa158015611ebb573d6000803e3d6000fd5b505050506040513d6020811015611ed157600080fd5b50519050611edf8183611d83565b95945050505050565b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b158015611f3557600080fd5b505af1158015611854573d6000803e3d6000fd5b611f51612894565b600454600090611f69906001600160a01b03166128fe565b9050801561118d57600d54611fa9907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031683612dda565b611fb1612f1d565b6000611fbb6117d1565b111561118d5761118d612125565b600a54600b54604080516393f1a40b60e01b8152600481019290925230602483015280516000936001600160a01b0316926393f1a40b926044808301939192829003018186803b15801561201c57600080fd5b505afa158015612030573d6000803e3d6000fd5b505050506040513d604081101561204657600080fd5b5051600a54600b5460408051630441a3e760e41b8152600481019290925260248201849052519293506001600160a01b039091169163441a3e709160448082019260009290919082900301818387803b1580156120a257600080fd5b505af11580156120b6573d6000803e3d6000fd5b50505050600960009054906101000a90046001600160a01b03166001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561210a57600080fd5b505af115801561211e573d6000803e3d6000fd5b5050505050565b600061212f6117d1565b905080156121a057600960009054906101000a90046001600160a01b03166001600160a01b031663de5f62686040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561218757600080fd5b505af115801561219b573d6000803e3d6000fd5b505050505b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156121eb57600080fd5b505afa1580156121ff573d6000803e3d6000fd5b505050506040513d602081101561221557600080fd5b50519050801561228f57600a54600b5460408051631c57762b60e31b8152600481019290925260248201849052516001600160a01b039092169163e2bbb1589160448082019260009290919082900301818387803b15801561227657600080fd5b505af115801561228a573d6000803e3d6000fd5b505050505b5050565b60606122e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c1a9092919063ffffffff16565b805190915015610e295780806020019051602081101561230757600080fd5b5051610e295760405162461bcd60e51b815260040180806020018281038252602a8152602001806131e0602a913960400191505060405180910390fd5b6060824710156123855760405162461bcd60e51b81526004018080602001828103825260268152602001806131996026913960400191505060405180910390fd5b61238e8561310e565b6123df576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061241e5780518252601f1990920191602091820191016123ff565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612480576040519150601f19603f3d011682016040523d82523d6000602084013e612485565b606091505b5091509150612495828286613114565b979650505050505050565b6000818361252c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124f15781810151838201526020016124d9565b50505050905090810190601f16801561251e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161253857fe5b0495945050505050565b600081848411156125945760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156124f15781810151838201526020016124d9565b505050900390565b6009546040805163760f5ebd60e11b815290516000926001600160a01b03169163ec1ebd7a916004808301926020929190829003018186803b1580156125e157600080fd5b505afa1580156125f5573d6000803e3d6000fd5b505050506040513d602081101561260b57600080fd5b50519050612625816105a984670de0b6b3a7640000611c96565b600a54600b54604080516393f1a40b60e01b8152600481019290925230602483015280519395506000936001600160a01b03909316926393f1a40b926044808201939291829003018186803b15801561267d57600080fd5b505afa158015612691573d6000803e3d6000fd5b505050506040513d60408110156126a757600080fd5b50519050808311156126b7578092505b600954604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561270257600080fd5b505afa158015612716573d6000803e3d6000fd5b505050506040513d602081101561272c57600080fd5b5051600a54600b5460408051630441a3e760e41b8152600481019290925260248201889052519293506001600160a01b039091169163441a3e709160448082019260009290919082900301818387803b15801561278857600080fd5b505af115801561279c573d6000803e3d6000fd5b5050600954604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156127ed57600080fd5b505afa158015612801573d6000803e3d6000fd5b505050506040513d602081101561281757600080fd5b505190506128258183611d83565b60095460408051632e1a7d4d60e01b81526004810184905290519297506001600160a01b0390911691632e1a7d4d9160248082019260009290919082900301818387803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b505050505050505050565b600a54600b5460408051630441a3e760e41b8152600481019290925260006024830181905290516001600160a01b039093169263441a3e7092604480820193929182900301818387803b1580156128ea57600080fd5b505af1158015610a05573d6000803e3d6000fd5b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561294e57600080fd5b505afa158015612962573d6000803e3d6000fd5b505050506040513d602081101561297857600080fd5b505190506129a7837f000000000000000000000000000000000000000000000000000000000000000083612dda565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015612a0d57600080fd5b505afa158015612a21573d6000803e3d6000fd5b505050506040513d6020811015612a3757600080fd5b505191508115612dd4576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b158015612a9a57600080fd5b505afa158015612aae573d6000803e3d6000fd5b505050506040513d60e0811015612ac457600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a5090985096509450909250905060008515801590612b1157506001600160a01b03871615155b15612be157612b266127106105a98c89611c96565b9050612b537f00000000000000000000000000000000000000000000000000000000000000008983612dda565b612be187896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ba457600080fd5b505afa158015612bb8573d6000803e3d6000fd5b505050506040513d6020811015612bce57600080fd5b50516001600160a01b038b169190611d31565b600084118015612bf957506001600160a01b03851615155b15612c8c57612c0e6127106105a98c87611c96565b9050612c3b7f00000000000000000000000000000000000000000000000000000000000000008983612dda565b612c8c85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ba457600080fd5b600082118015612ca457506001600160a01b03831615155b15612d3757612cb96127106105a98c85611c96565b9050612ce67f00000000000000000000000000000000000000000000000000000000000000008983612dda565b612d3783896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ba457600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015612d9d57600080fd5b505afa158015612db1573d6000803e3d6000fd5b505050506040513d6020811015612dc757600080fd5b5051995050505050505050505b50919050565b60408051600280825260608083018452926020830190803683370190505090508381600081518110612e0857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110612e3657fe5b6001600160a01b039283166020918202929092010152600254166338ed17398360018430612e6642610708611c33565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612ed6578181015183820152602001612ebe565b505050509050019650505050505050600060405180830381600087803b158015612eff57600080fd5b505af1158015612f13573d6000803e3d6000fd5b5050505050505050565b612f2561317a565b600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612f7057600080fd5b505afa158015612f84573d6000803e3d6000fd5b505050506040513d6020811015612f9a57600080fd5b50518152600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612fe957600080fd5b505afa158015612ffd573d6000803e3d6000fd5b505050506040513d602081101561301357600080fd5b5051602080830191909152600854604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561306357600080fd5b505afa158015613077573d6000803e3d6000fd5b505050506040513d602081101561308d57600080fd5b50518160026020020152600c54604051634515cef360e01b81526001600160a01b0390911690634515cef39083906001906004018083606080838360005b838110156130e35781810151838201526020016130cb565b5050505090500182815260200192505050600060405180830381600087803b15801561210a57600080fd5b3b151590565b60608315613123575081611c2c565b8251156131335782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156124f15781810151838201526020016124d9565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220af0743f7157821254febcc9ac4d99d9551fcc0d5973c1f9ff9969d6f94fb452e64736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063853828b61161010f578063cb946c26116100a2578063f3887eee11610071578063f3887eee146103f3578063f4b9fa75146103fb578063f77c479114610403578063f887ea401461040b576101f0565b8063cb946c26146103a5578063d0e30db0146103ad578063dd0081c7146103b5578063ef9e2379146103bd576101f0565b8063ac78012c116100de578063ac78012c14610352578063aeb714f41461036f578063c0d7865514610377578063c1a3d44c1461039d576101f0565b8063853828b6146103145780638a4adf241461031c5780638b3c99e41461032457806392eefe9b1461032c576101f0565b80634641257d1161018757806370ea249c1161015657806370ea249c146102b8578063722713f7146102de57806378d2d579146102e65780637e236c5e1461030c576101f0565b80634641257d1461027a57806351cff8d9146102825780635a3874ac146102a85780636948ab6f146102b0576101f0565b80632f48ab7d116101c35780632f48ab7d1461025a5780633e0dc34e146102625780633e413bee1461026a5780633fc8cef314610272576101f0565b806311588086146101f55780631dd19cb41461020f5780631f1fcd51146102195780632e1a7d4d1461023d575b600080fd5b6101fd610413565b60408051918252519081900360200190f35b6102176105b6565b005b610221610766565b604080516001600160a01b039092168252519081900360200190f35b6102176004803603602081101561025357600080fd5b503561078a565b610221610a0b565b6101fd610a1a565b610221610a20565b610221610a2f565b610217610a53565b6102176004803603602081101561029857600080fd5b50356001600160a01b0316610bc0565b610221610e2e565b610221610e3d565b610217600480360360208110156102ce57600080fd5b50356001600160a01b0316610e4c565b6101fd610fd3565b610217600480360360208110156102fc57600080fd5b50356001600160a01b0316610ff3565b610221611190565b6101fd61119f565b61022161146e565b61022161147d565b6102176004803603602081101561034257600080fd5b50356001600160a01b031661148c565b6102176004803603602081101561036857600080fd5b5035611572565b6102216116dc565b6102176004803603602081101561038d57600080fd5b50356001600160a01b03166116eb565b6101fd6117d1565b610221611871565b610217611880565b6101fd6119ed565b610217600480360360608110156103d357600080fd5b506001600160a01b038135811691602081013590911690604001356119f3565b610221611acb565b610221611ada565b610221611ae9565b610221611af8565b600954604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d602081101561048d57600080fd5b5051600a54600b54604080516393f1a40b60e01b8152600481019290925230602483015280519394506000936001600160a01b03909316926393f1a40b926044808201939291829003018186803b1580156104e757600080fd5b505afa1580156104fb573d6000803e3d6000fd5b505050506040513d604081101561051157600080fd5b50516009546040805163760f5ebd60e11b815290519293506105af92670de0b6b3a7640000926105a9926001600160a01b039091169163ec1ebd7a91600480820192602092909190829003018186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d602081101561059757600080fd5b50516105a38686611c33565b90611c96565b90611cef565b9250505090565b6000546001600160a01b03163314806106505750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d602081101561064257600080fd5b50516001600160a01b031633145b806106dc5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d60208110156106ce57600080fd5b50516001600160a01b031633145b61071b576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600054610764906001600160a01b03166107336117d1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611d31565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806108245750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d602081101561081657600080fd5b50516001600160a01b031633145b806108b05750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561087857600080fd5b505afa15801561088c573d6000803e3d6000fd5b505050506040513d60208110156108a257600080fd5b50516001600160a01b031633145b6108ef576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006108f96117d1565b905081811015610924576109156109108383611d83565b611dc5565b91506109218282611c33565b91505b600061092e611ee8565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d60208110156109a957600080fd5b505190506001600160a01b0381166109f1576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b610a056001600160a01b0383168286611d31565b50505050565b6008546001600160a01b031681565b600b5481565b6007546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331480610aed5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b50516001600160a01b031633145b80610b795750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b50516001600160a01b031633145b610bb8576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610764611f49565b6000546001600160a01b0316331480610c5a5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2257600080fd5b505afa158015610c36573d6000803e3d6000fd5b505050506040513d6020811015610c4c57600080fd5b50516001600160a01b031633145b80610ce65750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610cae57600080fd5b505afa158015610cc2573d6000803e3d6000fd5b505050506040513d6020811015610cd857600080fd5b50516001600160a01b031633145b610d25576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610d95576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d6020811015610e0a57600080fd5b5051600054909150610e29906001600160a01b03848116911683611d31565b505050565b600c546001600160a01b031681565b6005546001600160a01b031681565b6000546001600160a01b0316331480610ee65750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d6020811015610ed857600080fd5b50516001600160a01b031633145b80610f725750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3a57600080fd5b505afa158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b50516001600160a01b031633145b610fb1576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610fee610fe0610413565b610fe86117d1565b90611c33565b905090565b6000546001600160a01b031633148061108d5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561105557600080fd5b505afa158015611069573d6000803e3d6000fd5b505050506040513d602081101561107f57600080fd5b50516001600160a01b031633145b806111195750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e157600080fd5b505afa1580156110f5573d6000803e3d6000fd5b505050506040513d602081101561110b57600080fd5b50516001600160a01b031633145b611158576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b03838116919091179182905560035461118d929082169116600019611b07565b50565b600a546001600160a01b031681565b600080546001600160a01b031633148061123a5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561120257600080fd5b505afa158015611216573d6000803e3d6000fd5b505050506040513d602081101561122c57600080fd5b50516001600160a01b031633145b806112c65750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d60208110156112b857600080fd5b50516001600160a01b031633145b611305576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b61130d611fc9565b6000611317611ee8565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561136657600080fd5b505afa15801561137a573d6000803e3d6000fd5b505050506040513d602081101561139057600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b1580156113e357600080fd5b505afa1580156113f7573d6000803e3d6000fd5b505050506040513d602081101561140d57600080fd5b505190506001600160a01b038116611455576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6114696001600160a01b0383168285611d31565b505090565b6001546001600160a01b031681565b6003546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d602081101561150457600080fd5b50516001600160a01b03163314611550576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633148061160c5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156115d457600080fd5b505afa1580156115e8573d6000803e3d6000fd5b505050506040513d60208110156115fe57600080fd5b50516001600160a01b031633145b806116985750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d602081101561168a57600080fd5b50516001600160a01b031633145b6116d7576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600b55565b6009546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561173957600080fd5b505afa15801561174d573d6000803e3d6000fd5b505050506040513d602081101561176357600080fd5b50516001600160a01b031633146117af576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561184057600080fd5b505afa158015611854573d6000803e3d6000fd5b505050506040513d602081101561186a57600080fd5b5051905090565b600d546001600160a01b031681565b6000546001600160a01b031633148061191a5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d602081101561190c57600080fd5b50516001600160a01b031633145b806119a65750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561196e57600080fd5b505afa158015611982573d6000803e3d6000fd5b505050506040513d602081101561199857600080fd5b50516001600160a01b031633145b6119e5576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610764612125565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d6020811015611a6b57600080fd5b50516001600160a01b03163314611ab7576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610e296001600160a01b0384168383611b07565b6004546001600160a01b031681565b6006546001600160a01b031681565b6000546001600160a01b031681565b6002546001600160a01b031681565b801580611b8d575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611b5f57600080fd5b505afa158015611b73573d6000803e3d6000fd5b505050506040513d6020811015611b8957600080fd5b5051155b611bc85760405162461bcd60e51b815260040180806020018281038252603681526020018061320a6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610e29908490612293565b6060611c298484600085612344565b90505b9392505050565b600082820183811015611c8d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082611ca557506000611c90565b82820282848281611cb257fe5b0414611c8d5760405162461bcd60e51b81526004018080602001828103825260218152602001806131bf6021913960400191505060405180910390fd5b6000611c8d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506124a0565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e29908490612293565b6000611c8d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612542565b600080611dd0611ee8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e2157600080fd5b505afa158015611e35573d6000803e3d6000fd5b505050506040513d6020811015611e4b57600080fd5b50519050611e588461259c565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ea757600080fd5b505afa158015611ebb573d6000803e3d6000fd5b505050506040513d6020811015611ed157600080fd5b50519050611edf8183611d83565b95945050505050565b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b158015611f3557600080fd5b505af1158015611854573d6000803e3d6000fd5b611f51612894565b600454600090611f69906001600160a01b03166128fe565b9050801561118d57600d54611fa9907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031683612dda565b611fb1612f1d565b6000611fbb6117d1565b111561118d5761118d612125565b600a54600b54604080516393f1a40b60e01b8152600481019290925230602483015280516000936001600160a01b0316926393f1a40b926044808301939192829003018186803b15801561201c57600080fd5b505afa158015612030573d6000803e3d6000fd5b505050506040513d604081101561204657600080fd5b5051600a54600b5460408051630441a3e760e41b8152600481019290925260248201849052519293506001600160a01b039091169163441a3e709160448082019260009290919082900301818387803b1580156120a257600080fd5b505af11580156120b6573d6000803e3d6000fd5b50505050600960009054906101000a90046001600160a01b03166001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561210a57600080fd5b505af115801561211e573d6000803e3d6000fd5b5050505050565b600061212f6117d1565b905080156121a057600960009054906101000a90046001600160a01b03166001600160a01b031663de5f62686040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561218757600080fd5b505af115801561219b573d6000803e3d6000fd5b505050505b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156121eb57600080fd5b505afa1580156121ff573d6000803e3d6000fd5b505050506040513d602081101561221557600080fd5b50519050801561228f57600a54600b5460408051631c57762b60e31b8152600481019290925260248201849052516001600160a01b039092169163e2bbb1589160448082019260009290919082900301818387803b15801561227657600080fd5b505af115801561228a573d6000803e3d6000fd5b505050505b5050565b60606122e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c1a9092919063ffffffff16565b805190915015610e295780806020019051602081101561230757600080fd5b5051610e295760405162461bcd60e51b815260040180806020018281038252602a8152602001806131e0602a913960400191505060405180910390fd5b6060824710156123855760405162461bcd60e51b81526004018080602001828103825260268152602001806131996026913960400191505060405180910390fd5b61238e8561310e565b6123df576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061241e5780518252601f1990920191602091820191016123ff565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612480576040519150601f19603f3d011682016040523d82523d6000602084013e612485565b606091505b5091509150612495828286613114565b979650505050505050565b6000818361252c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124f15781810151838201526020016124d9565b50505050905090810190601f16801561251e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161253857fe5b0495945050505050565b600081848411156125945760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156124f15781810151838201526020016124d9565b505050900390565b6009546040805163760f5ebd60e11b815290516000926001600160a01b03169163ec1ebd7a916004808301926020929190829003018186803b1580156125e157600080fd5b505afa1580156125f5573d6000803e3d6000fd5b505050506040513d602081101561260b57600080fd5b50519050612625816105a984670de0b6b3a7640000611c96565b600a54600b54604080516393f1a40b60e01b8152600481019290925230602483015280519395506000936001600160a01b03909316926393f1a40b926044808201939291829003018186803b15801561267d57600080fd5b505afa158015612691573d6000803e3d6000fd5b505050506040513d60408110156126a757600080fd5b50519050808311156126b7578092505b600954604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561270257600080fd5b505afa158015612716573d6000803e3d6000fd5b505050506040513d602081101561272c57600080fd5b5051600a54600b5460408051630441a3e760e41b8152600481019290925260248201889052519293506001600160a01b039091169163441a3e709160448082019260009290919082900301818387803b15801561278857600080fd5b505af115801561279c573d6000803e3d6000fd5b5050600954604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156127ed57600080fd5b505afa158015612801573d6000803e3d6000fd5b505050506040513d602081101561281757600080fd5b505190506128258183611d83565b60095460408051632e1a7d4d60e01b81526004810184905290519297506001600160a01b0390911691632e1a7d4d9160248082019260009290919082900301818387803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b505050505050505050565b600a54600b5460408051630441a3e760e41b8152600481019290925260006024830181905290516001600160a01b039093169263441a3e7092604480820193929182900301818387803b1580156128ea57600080fd5b505af1158015610a05573d6000803e3d6000fd5b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561294e57600080fd5b505afa158015612962573d6000803e3d6000fd5b505050506040513d602081101561297857600080fd5b505190506129a7837f000000000000000000000000000000000000000000000000000000000000000083612dda565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015612a0d57600080fd5b505afa158015612a21573d6000803e3d6000fd5b505050506040513d6020811015612a3757600080fd5b505191508115612dd4576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b158015612a9a57600080fd5b505afa158015612aae573d6000803e3d6000fd5b505050506040513d60e0811015612ac457600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a5090985096509450909250905060008515801590612b1157506001600160a01b03871615155b15612be157612b266127106105a98c89611c96565b9050612b537f00000000000000000000000000000000000000000000000000000000000000008983612dda565b612be187896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ba457600080fd5b505afa158015612bb8573d6000803e3d6000fd5b505050506040513d6020811015612bce57600080fd5b50516001600160a01b038b169190611d31565b600084118015612bf957506001600160a01b03851615155b15612c8c57612c0e6127106105a98c87611c96565b9050612c3b7f00000000000000000000000000000000000000000000000000000000000000008983612dda565b612c8c85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ba457600080fd5b600082118015612ca457506001600160a01b03831615155b15612d3757612cb96127106105a98c85611c96565b9050612ce67f00000000000000000000000000000000000000000000000000000000000000008983612dda565b612d3783896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ba457600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015612d9d57600080fd5b505afa158015612db1573d6000803e3d6000fd5b505050506040513d6020811015612dc757600080fd5b5051995050505050505050505b50919050565b60408051600280825260608083018452926020830190803683370190505090508381600081518110612e0857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110612e3657fe5b6001600160a01b039283166020918202929092010152600254166338ed17398360018430612e6642610708611c33565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612ed6578181015183820152602001612ebe565b505050509050019650505050505050600060405180830381600087803b158015612eff57600080fd5b505af1158015612f13573d6000803e3d6000fd5b5050505050505050565b612f2561317a565b600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612f7057600080fd5b505afa158015612f84573d6000803e3d6000fd5b505050506040513d6020811015612f9a57600080fd5b50518152600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612fe957600080fd5b505afa158015612ffd573d6000803e3d6000fd5b505050506040513d602081101561301357600080fd5b5051602080830191909152600854604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561306357600080fd5b505afa158015613077573d6000803e3d6000fd5b505050506040513d602081101561308d57600080fd5b50518160026020020152600c54604051634515cef360e01b81526001600160a01b0390911690634515cef39083906001906004018083606080838360005b838110156130e35781810151838201526020016130cb565b5050505090500182815260200192505050600060405180830381600087803b15801561210a57600080fd5b3b151590565b60608315613123575081611c2c565b8251156131335782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156124f15781810151838201526020016124d9565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220af0743f7157821254febcc9ac4d99d9551fcc0d5973c1f9ff9969d6f94fb452e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "setController(address)": {
        "params": {
          "_controller": "The address of the controller"
        }
      },
      "setRouter(address)": {
        "params": {
          "_router": "The address of the router"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest()": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setController(address)": {
        "notice": "Sets the address of the controller"
      },
      "setRouter(address)": {
        "notice": "Sets the address of the ISwap-compatible router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6248,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6250,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "vaultManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVaultManager)1992"
      },
      {
        "astId": 6252,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwap)1893"
      },
      {
        "astId": 8031,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "p3crv",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8037,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "pickle",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8043,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "t3crv",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8049,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "dai",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8055,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "usdc",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8061,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "usdt",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8063,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "pickleJar",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(PickleJar)1458"
      },
      {
        "astId": 8068,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "pickleMasterChef",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(PickleMasterChef)1500"
      },
      {
        "astId": 8071,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "poolId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8073,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "stableSwap3Pool",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IStableSwap3Pool)1829"
      },
      {
        "astId": 8075,
        "contract": "contracts/metavault/strategies/StrategyPickle3Crv.sol:StrategyPickle3Crv",
        "label": "stableForAddLiquidity",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap3Pool)1829": {
        "encoding": "inplace",
        "label": "contract IStableSwap3Pool",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)1893": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)1992": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_contract(PickleJar)1458": {
        "encoding": "inplace",
        "label": "contract PickleJar",
        "numberOfBytes": "20"
      },
      "t_contract(PickleMasterChef)1500": {
        "encoding": "inplace",
        "label": "contract PickleMasterChef",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}