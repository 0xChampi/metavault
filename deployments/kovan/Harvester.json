{
  "address": "0xd9ce0C3c6938C42AA3Fcf923ddc3610A026863Eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_legacyController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "HarvesterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeout",
          "type": "uint256"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeout",
          "type": "uint256"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "getEstimates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_estimatedWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedYAXIS",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedYAXIS",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_estimatedYAXIS",
          "type": "uint256"
        }
      ],
      "name": "harvestNextStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHarvester",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "legacyController",
      "outputs": [
        {
          "internalType": "contract ILegacyController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        }
      ],
      "name": "legacyEarn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "setSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCalled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "strategyAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3aff9a9b52f64f6335cb6b5aa1a65ceaab1d7ac12f0d3818316636932827d383",
  "receipt": {
    "to": null,
    "from": "0x91019BAE8beD657A416e8B5B582F30c5Eef99132",
    "contractAddress": "0xd9ce0C3c6938C42AA3Fcf923ddc3610A026863Eb",
    "transactionIndex": 0,
    "gasUsed": "1453539",
    "logsBloom": "0x
    "blockHash": "0x3db37021d4c71ff933df339387b0d24f62c4bf7d0c8658de0fe6d79951b63b61",
    "transactionHash": "0x3aff9a9b52f64f6335cb6b5aa1a65ceaab1d7ac12f0d3818316636932827d383",
    "logs": [],
    "blockNumber": 27672007,
    "cumulativeGasUsed": "1453539",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5D68Ddd47357a29714CB08bb48397E3Fe3d6F425",
    "0x9E170246311F35846fcd46588FD1B0c22ba9D65e",
    "0x9C79dA94179c8E1a173E3ED0F7F29C35F59539Ea"
  ],
  "solcInputHash": "39b59b8416d0b0014a452466e334885c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legacyController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"HarvesterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getEstimates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimatedWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedYAXIS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedYAXIS\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedYAXIS\",\"type\":\"uint256\"}],\"name\":\"harvestNextStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHarvester\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyController\",\"outputs\":[{\"internalType\":\"contract ILegacyController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"}],\"name\":\"legacyEarn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCalled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"strategyAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStrategy(address,address,uint256)\":{\"params\":{\"_strategy\":\"The address of the strategy\",\"_timeout\":\"The timeout between harvests\",\"_vault\":\"The address of the vault\"}},\"canHarvest(address)\":{\"params\":{\"_vault\":\"The address of the vault\"}},\"constructor\":{\"params\":{\"_controller\":\"The address of the controller\",\"_manager\":\"The address of the yAxisMetaVaultManager contract\"}},\"getEstimates(address)\":{\"params\":{\"_strategy\":\"The address of the strategy\"}},\"harvest(address,address,uint256,uint256)\":{\"details\":\"This function ignores the timeout\",\"params\":{\"_controller\":\"The address of the controller\",\"_strategy\":\"The address of the strategy\"}},\"harvestNextStrategy(address,uint256,uint256)\":{\"params\":{\"_vault\":\"The address of the vault\"}},\"legacyEarn(uint256)\":{\"params\":{\"_expected\":\"The expected amount to deposit after conversion\"}},\"removeStrategy(address,address,uint256)\":{\"params\":{\"_strategy\":\"The address of the strategy\",\"_timeout\":\"The timeout between harvests\",\"_vault\":\"The address of the vault\"}},\"setHarvester(address,bool)\":{\"params\":{\"_harvester\":\"The address of the harvester\",\"_status\":\"The status to allow the harvester to harvest\"}},\"strategyAddresses(address)\":{\"params\":{\"_vault\":\"The address of the vault\"}}},\"title\":\"Harvester\",\"version\":1},\"userdoc\":{\"events\":{\"Harvest(address,address)\":{\"notice\":\"Logged when harvest is called for a strategy\"},\"HarvesterSet(address,bool)\":{\"notice\":\"Logged when a harvester is set\"},\"StrategyAdded(address,address,uint256)\":{\"notice\":\"Logged when a strategy is added for a vault\"},\"StrategyRemoved(address,address,uint256)\":{\"notice\":\"Logged when a strategy is removed for a vault\"}},\"kind\":\"user\",\"methods\":{\"addStrategy(address,address,uint256)\":{\"notice\":\"Adds a strategy to the rotation for a given vault and sets a timeout\"},\"canHarvest(address)\":{\"notice\":\"Returns the availability of a vault's strategy to be harvested\"},\"earn(address,address)\":{\"notice\":\"HARVESTER-ONLY FUNCTIONS\"},\"getEstimates(address)\":{\"notice\":\"Returns the estimated amount of WETH and YAXIS for the given strategy\"},\"harvest(address,address,uint256,uint256)\":{\"notice\":\"Harvests a given strategy on the provided controller\"},\"harvestNextStrategy(address,uint256,uint256)\":{\"notice\":\"Harvests the next available strategy for a given vault and rotates the strategies\"},\"legacyEarn(uint256)\":{\"notice\":\"Earns tokens in the LegacyController to the v3 vault\"},\"removeStrategy(address,address,uint256)\":{\"notice\":\"Removes a strategy from the rotation for a given vault and sets a timeout\"},\"setHarvester(address,bool)\":{\"notice\":\"Sets the status of a harvester address to be able to call harvest functions\"},\"strategyAddresses(address)\":{\"notice\":\"Returns the addresses of the strategies for a given vault\"}},\"notice\":\"This contract is to be used as a central point to call harvest on all strategies for any given vault. It has its own permissions for harvesters (set by the strategist or governance).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/Harvester.sol\":\"Harvester\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/v3/Harvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IHarvester.sol\\\";\\nimport \\\"./interfaces/ILegacyController.sol\\\";\\nimport \\\"./interfaces/IManager.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/ISwap.sol\\\";\\n\\n/**\\n * @title Harvester\\n * @notice This contract is to be used as a central point to call\\n * harvest on all strategies for any given vault. It has its own\\n * permissions for harvesters (set by the strategist or governance).\\n */\\ncontract Harvester is IHarvester {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    IManager public immutable override manager;\\n    IController public immutable controller;\\n    ILegacyController public immutable legacyController;\\n\\n    uint256 public slippage;\\n\\n    struct Strategy {\\n        uint256 timeout;\\n        uint256 lastCalled;\\n        address[] addresses;\\n    }\\n\\n    mapping(address => Strategy) public strategies;\\n    mapping(address => bool) public isHarvester;\\n\\n    /**\\n     * @notice Logged when harvest is called for a strategy\\n     */\\n    event Harvest(\\n        address indexed controller,\\n        address indexed strategy\\n    );\\n\\n    /**\\n     * @notice Logged when a harvester is set\\n     */\\n    event HarvesterSet(address indexed harvester, bool status);\\n\\n    /**\\n     * @notice Logged when a strategy is added for a vault\\n     */\\n    event StrategyAdded(address indexed vault, address indexed strategy, uint256 timeout);\\n\\n    /**\\n     * @notice Logged when a strategy is removed for a vault\\n     */\\n    event StrategyRemoved(address indexed vault, address indexed strategy, uint256 timeout);\\n\\n    /**\\n     * @param _manager The address of the yAxisMetaVaultManager contract\\n     * @param _controller The address of the controller\\n     */\\n    constructor(\\n        address _manager,\\n        address _controller,\\n        address _legacyController\\n    )\\n        public\\n    {\\n        manager = IManager(_manager);\\n        controller = IController(_controller);\\n        legacyController = ILegacyController(_legacyController);\\n    }\\n\\n    /**\\n     * (GOVERNANCE|STRATEGIST)-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Adds a strategy to the rotation for a given vault and sets a timeout\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function addStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint256 _timeout\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        strategies[_vault].addresses.push(_strategy);\\n        strategies[_vault].timeout = _timeout;\\n        emit StrategyAdded(_vault, _strategy, _timeout);\\n    }\\n\\n    /**\\n     * @notice Removes a strategy from the rotation for a given vault and sets a timeout\\n     * @param _vault The address of the vault\\n     * @param _strategy The address of the strategy\\n     * @param _timeout The timeout between harvests\\n     */\\n    function removeStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint256 _timeout\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        uint256 tail = strategies[_vault].addresses.length;\\n        uint256 index;\\n        bool found;\\n        for (uint i; i < tail; i++) {\\n            if (strategies[_vault].addresses[i] == _strategy) {\\n                index = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (found) {\\n            strategies[_vault].addresses[index] = strategies[_vault].addresses[tail.sub(1)];\\n            strategies[_vault].addresses.pop();\\n            strategies[_vault].timeout = _timeout;\\n            emit StrategyRemoved(_vault, _strategy, _timeout);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the status of a harvester address to be able to call harvest functions\\n     * @param _harvester The address of the harvester\\n     * @param _status The status to allow the harvester to harvest\\n     */\\n    function setHarvester(\\n        address _harvester,\\n        bool _status\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        isHarvester[_harvester] = _status;\\n        emit HarvesterSet(_harvester, _status);\\n    }\\n\\n    function setSlippage(\\n        uint256 _slippage\\n    )\\n        external\\n        onlyStrategist\\n    {\\n        require(_slippage < ONE_HUNDRED_PERCENT, \\\"!_slippage\\\");\\n        slippage = _slippage;\\n    }\\n\\n    /**\\n     * HARVESTER-ONLY FUNCTIONS\\n     */\\n\\n    function earn(\\n        address _strategy,\\n        address _vault\\n    )\\n        external\\n        onlyHarvester\\n    {\\n        IVault(_vault).earn(_strategy);\\n    }\\n\\n    /**\\n     * @notice Harvests a given strategy on the provided controller\\n     * @dev This function ignores the timeout\\n     * @param _controller The address of the controller\\n     * @param _strategy The address of the strategy\\n     */\\n    function harvest(\\n        IController _controller,\\n        address _strategy,\\n        uint256 _estimatedWETH,\\n        uint256 _estimatedYAXIS\\n    )\\n        public\\n        onlyHarvester\\n    {\\n        _controller.harvestStrategy(_strategy, _estimatedWETH, _estimatedYAXIS);\\n        emit Harvest(address(_controller), _strategy);\\n    }\\n\\n    /**\\n     * @notice Harvests the next available strategy for a given vault and\\n     * rotates the strategies\\n     * @param _vault The address of the vault\\n     */\\n    function harvestNextStrategy(\\n        address _vault,\\n        uint256 _estimatedWETH,\\n        uint256 _estimatedYAXIS\\n    )\\n        external\\n    {\\n        require(canHarvest(_vault), \\\"!canHarvest\\\");\\n        address strategy = strategies[_vault].addresses[0];\\n        harvest(controller, strategy, _estimatedWETH, _estimatedYAXIS);\\n        uint256 k = strategies[_vault].addresses.length;\\n        if (k > 1) {\\n            address[] memory _strategies = new address[](k);\\n            for (uint i; i < k-1; i++) {\\n                _strategies[i] = strategies[_vault].addresses[i+1];\\n            }\\n            _strategies[k-1] = strategy;\\n            strategies[_vault].addresses = _strategies;\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        strategies[_vault].lastCalled = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Earns tokens in the LegacyController to the v3 vault\\n     * @param _expected The expected amount to deposit after conversion\\n     */\\n    function legacyEarn(\\n        uint256 _expected\\n    )\\n        external\\n        onlyHarvester\\n    {\\n        legacyController.legacyDeposit(_expected);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the addresses of the strategies for a given vault\\n     * @param _vault The address of the vault\\n     */\\n    function strategyAddresses(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return strategies[_vault].addresses;\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the availability of a vault's strategy to be harvested\\n     * @param _vault The address of the vault\\n     */\\n    function canHarvest(\\n        address _vault\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        Strategy storage strategy = strategies[_vault];\\n        // only can harvest if there are strategies, and when sufficient time has elapsed\\n        // solhint-disable-next-line not-rely-on-time\\n        return (strategy.addresses.length > 0 && strategy.lastCalled <= block.timestamp.sub(strategy.timeout));\\n    }\\n\\n    /**\\n     * @notice Returns the estimated amount of WETH and YAXIS for the given strategy\\n     * @param _strategy The address of the strategy\\n     */\\n    function getEstimates(\\n        address _strategy\\n    )\\n        public\\n        view\\n        returns (uint256 _estimatedWETH, uint256 _estimatedYAXIS)\\n    {\\n        ISwap _router = IStrategy(_strategy).router();\\n        address[] memory _path;\\n        _path[0] = IStrategy(_strategy).want();\\n        _path[1] = IStrategy(_strategy).weth();\\n        uint256[] memory _amounts = _router.getAmountsOut(\\n            IStrategy(_strategy).balanceOfPool(),\\n            _path\\n        );\\n        _estimatedWETH = _amounts[1];\\n        uint256 _slippage = slippage;\\n        if (_slippage > 0) {\\n            _estimatedWETH = _estimatedWETH.mul(_slippage).div(ONE_HUNDRED_PERCENT);\\n        }\\n        _path[0] = IStrategy(_strategy).weth();\\n        _path[1] = manager.yaxis();\\n        uint256 _fee = _estimatedWETH.mul(manager.treasuryFee()).div(ONE_HUNDRED_PERCENT);\\n        _amounts = _router.getAmountsOut(_fee, _path);\\n        _estimatedYAXIS = _amounts[1];\\n        if (_slippage > 0) {\\n            _estimatedYAXIS = _estimatedYAXIS.mul(_slippage).div(ONE_HUNDRED_PERCENT);\\n        }\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyController() {\\n        require(manager.allowedControllers(msg.sender), \\\"!controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        require(isHarvester[msg.sender], \\\"!harvester\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4487a19ffc519bb69e6a5ff3130934235682778ce77494ed2d9be6aaf483f690\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256 _estimatedWETH, uint256 _estimatedYAXIS) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\",\"keccak256\":\"0x7cf6dd59e7aa05895b7682bf59c96918b9d5baf529d839472b475f9119ba50c9\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n}\\n\\n\",\"keccak256\":\"0xda73240c2564d88d7f73128408a85fbcb9aecbe9dd6aa0c2849f881524ef5fa0\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ILegacyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ILegacyController {\\n    function legacyDeposit(uint256 _expected) external;\\n}\\n\",\"keccak256\":\"0x21b592c296ab5c724a62c8b33a43d005335bca157efa2b669677e333aef84ebd\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addVault(address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getToken(address) external view returns (address);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeVault(address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7643ce13f4882cd5e4fef64c7e82ef6b7037af24afb88ca0e97922f93d52850d\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256, uint256) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\",\"keccak256\":\"0xee1ec3c127871c78aaf474a049f942f4cb4dfbd2a51a0687d05d9b8c0da329cf\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x054e1fbb6e5fc879fcd57c1fe554fe9838dbae742d35df59541c200e50fc6b59\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IVault {\\n    function available() external view returns (uint256);\\n    function balance() external view returns (uint256);\\n    function deposit(uint256 _amount) external returns (uint256);\\n    function earn(address _strategy) external;\\n    function gauge() external returns (address);\\n    function getLPToken() external view returns (address);\\n    function getPricePerFullShare() external view returns (uint256);\\n    function getToken() external view returns (address);\\n    function manager() external view returns (IManager);\\n    function withdraw(uint256 _amount) external;\\n    function withdrawAll() external;\\n    function withdrawFee(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f644406524022d13516dc130b4948962d0ed3d5fa2099b89041ddf54a96b002\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051611a16380380611a168339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660805292821b831660a052901b1660c05260805160601c60a05160601c60c05160601c6119576100bf60003980610420528061155e525080610bd452806116f652508061054a528061069852806106da528061082c528061122852806112e752806115df52506119576000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063700ce658116100a2578063dd0081c711610071578063dd0081c7146103ae578063ef73bb57146103b6578063f0fa55a9146103d3578063f77c4791146103f0578063fb70261a146103f857610116565b8063700ce658146102a65780639af409dd146102d8578063a71bbfd51461034e578063b6dcbde71461038857610116565b80633e032a3b116100e95780633e032a3b146101ea578063481c6a75146102045780634b704acd1461020c5780636bb3722e146102425780636bc9a5a91461027857610116565b8063039f28c21461011b578063260feb361461013f57806331b710571461017d57806339ebf823146101ab575b600080fd5b61012361041e565b604080516001600160a01b039092168252519081900360200190f35b61017b6004803603608081101561015557600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610442565b005b61017b6004803603604081101561019357600080fd5b506001600160a01b0381351690602001351515610548565b6101d1600480360360208110156101c157600080fd5b50356001600160a01b0316610677565b6040805192835260208301919091528051918290030190f35b6101f2610690565b60408051918252519081900360200190f35b610123610696565b61017b6004803603606081101561022257600080fd5b506001600160a01b038135811691602081013590911690604001356106ba565b61017b6004803603606081101561025857600080fd5b506001600160a01b0381358116916020810135909116906040013561080c565b61017b6004803603604081101561028e57600080fd5b506001600160a01b0381358116916020013516610a97565b61017b600480360360608110156102bc57600080fd5b506001600160a01b038135169060208101359060400135610b4b565b6102fe600480360360208110156102ee57600080fd5b50356001600160a01b0316610d6c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033a578181015183820152602001610322565b505050509050019250505060405180910390f35b6103746004803603602081101561036457600080fd5b50356001600160a01b0316610de5565b604080519115158252519081900360200190f35b6101d16004803603602081101561039e57600080fd5b50356001600160a01b0316610dfa565b6101f2611505565b61017b600480360360208110156103cc57600080fd5b503561150b565b61017b600480360360208110156103e957600080fd5b50356115dd565b6101236116f4565b6103746004803603602081101561040e57600080fd5b50356001600160a01b0316611718565b7f000000000000000000000000000000000000000000000000000000000000000081565b3360009081526002602052604090205460ff16610493576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b836001600160a01b031663a8671c318484846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b50506040516001600160a01b038087169350871691507ffdfdf879d9abdea70f1d228c39cf14f5e7179a54f36b378f29bccfe7648f333e90600090a350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d60208110156105cb57600080fd5b50516001600160a01b03163314610617576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155825190815291517f0dd4aeebdb71d8f88640d3361815b0e64e31aaf0ee73ad7f5a421115fac879ae9281900390910190a25050565b6001602081905260009182526040909120805491015482565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051633577910560e11b815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636aef220a916024808301926020929190829003018186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d602081101561074a57600080fd5b505161078b576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6001600160a01b0383811660008181526001602081815260408084206002810180549485018155855282852090930180546001600160a01b03191696891696871790559284905290859055815185815291517fc2008aa15e9b0989ec7ae02bc3d8054428c527c989269ffb2a5bff829028a0129281900390910190a3505050565b60408051633577910560e11b815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636aef220a916024808301926020929190829003018186803b15801561087257600080fd5b505afa158015610886573d6000803e3d6000fd5b505050506040513d602081101561089c57600080fd5b50516108dd576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6001600160a01b0383166000908152600160205260408120600201549080805b83811015610960576001600160a01b0387811660009081526001602052604090206002018054918816918390811061093157fe5b6000918252602090912001546001600160a01b031614156109585780925060019150610960565b6001016108fd565b508015610a8f576001600160a01b03861660009081526001602081905260409091206002019061099190859061175a565b8154811061099b57fe5b60009182526020808320909101546001600160a01b038981168452600190925260409092206002018054919092169190849081106109d557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559188168152600190915260409020600201805480610a1757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388811680845260018352604093849020889055835188815293519189169390927fdd3e131c7baafda30070fc3f53c5153570a3e6552809d20e2b682dd30fa7cc6e92918290030190a35b505050505050565b3360009081526002602052604090205460ff16610ae8576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b806001600160a01b031663fdb5fefc836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610b3757600080fd5b505af1158015610a8f573d6000803e3d6000fd5b610b5483611718565b610b93576040805162461bcd60e51b815260206004820152600b60248201526a0858d85b92185c9d995cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040812060020180548290610bb857fe5b6000918252602090912001546001600160a01b03169050610bfb7f0000000000000000000000000000000000000000000000000000000000000000828585610442565b6001600160a01b03841660009081526001602081905260409091206002015490811115610d485760608167ffffffffffffffff81118015610c3b57600080fd5b50604051908082528060200260200182016040528015610c65578160200160208202803683370190505b50905060005b60018303811015610cf65760016000886001600160a01b03166001600160a01b031681526020019081526020016000206002018160010181548110610cac57fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610cd657fe5b6001600160a01b0390921660209283029190910190910152600101610c6b565b5082816001840381518110610d0757fe5b6001600160a01b03928316602091820292909201810191909152908716600090815260018252604090208251610d459260029092019184019061187c565b50505b505050506001600160a01b0316600090815260016020819052604090912042910155565b6001600160a01b038116600090815260016020908152604091829020600201805483518184028101840190945280845260609392830182828015610dd957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610dbb575b50505050509050919050565b60026020526000908152604090205460ff1681565b6000806000836001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3857600080fd5b505afa158015610e4c573d6000803e3d6000fd5b505050506040513d6020811015610e6257600080fd5b505160408051631f1fcd5160e01b815290519192506060916001600160a01b03871691631f1fcd51916004808301926020929190829003018186803b158015610eaa57600080fd5b505afa158015610ebe573d6000803e3d6000fd5b505050506040513d6020811015610ed457600080fd5b505181518290600090610ee357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d6020811015610f6657600080fd5b5051815182906001908110610f7757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506060826001600160a01b031663d06ca61f876001600160a01b031663115880866040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b5051604080516001600160e01b031960e085901b168152600481018381526024820192835287516044830152875188939192606401906020858101910280838360005b8381101561106657818101518382015260200161104e565b50505050905001935050505060006040518083038186803b15801561108a57600080fd5b505afa15801561109e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110c757600080fd5b81019080805160405193929190846401000000008211156110e757600080fd5b9083019060208201858111156110fc57600080fd5b825186602082028301116401000000008211171561111957600080fd5b82525081516020918201928201910280838360005b8381101561114657818101518382015260200161112e565b5050505090500160405250505090508060018151811061116257fe5b6020026020010151945060008054905060008111156111945761119161271061118b88846117bc565b90611815565b95505b866001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d60208110156111f757600080fd5b50518351849060009061120657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f021b0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d60208110156112a957600080fd5b50518351849060019081106112ba57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600061137161271061118b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d602081101561136857600080fd5b50518a906117bc565b9050846001600160a01b031663d06ca61f82866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156113d95781810151838201526020016113c1565b50505050905001935050505060006040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561143a57600080fd5b810190808051604051939291908464010000000082111561145a57600080fd5b90830190602082018581111561146f57600080fd5b825186602082028301116401000000008211171561148c57600080fd5b82525081516020918201928201910280838360005b838110156114b95781810151838201526020016114a1565b505050509050016040525050509250826001815181106114d557fe5b6020026020010151955060008211156114fb576114f861271061118b88856117bc565b95505b5050505050915091565b61271081565b3360009081526002602052604090205460ff1661155c576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c4c95a1826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b505afa15801561164a573d6000803e3d6000fd5b505050506040513d602081101561166057600080fd5b50516001600160a01b031633146116ac576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b61271081106116ef576040805162461bcd60e51b815260206004820152600a602482015269215f736c69707061676560b01b604482015290519081900360640190fd5b600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b03811660009081526001602052604081206002810154158015906117535750805461174b90429061175a565b816001015411155b9392505050565b6000828211156117b1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6000826117cb575060006117b6565b828202828482816117d857fe5b04146117535760405162461bcd60e51b81526004018080602001828103825260218152602001806119016021913960400191505060405180910390fd5b600080821161186b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161187457fe5b049392505050565b8280548282559060005260206000209081019282156118d1579160200282015b828111156118d157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061189c565b506118dd9291506118e1565b5090565b5b808211156118dd5780546001600160a01b03191681556001016118e256fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212209a76a4fd9f1fe052b547b5e22f79bb1e4b70ed4f6f21a05ff2a9e03dc839952a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063700ce658116100a2578063dd0081c711610071578063dd0081c7146103ae578063ef73bb57146103b6578063f0fa55a9146103d3578063f77c4791146103f0578063fb70261a146103f857610116565b8063700ce658146102a65780639af409dd146102d8578063a71bbfd51461034e578063b6dcbde71461038857610116565b80633e032a3b116100e95780633e032a3b146101ea578063481c6a75146102045780634b704acd1461020c5780636bb3722e146102425780636bc9a5a91461027857610116565b8063039f28c21461011b578063260feb361461013f57806331b710571461017d57806339ebf823146101ab575b600080fd5b61012361041e565b604080516001600160a01b039092168252519081900360200190f35b61017b6004803603608081101561015557600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610442565b005b61017b6004803603604081101561019357600080fd5b506001600160a01b0381351690602001351515610548565b6101d1600480360360208110156101c157600080fd5b50356001600160a01b0316610677565b6040805192835260208301919091528051918290030190f35b6101f2610690565b60408051918252519081900360200190f35b610123610696565b61017b6004803603606081101561022257600080fd5b506001600160a01b038135811691602081013590911690604001356106ba565b61017b6004803603606081101561025857600080fd5b506001600160a01b0381358116916020810135909116906040013561080c565b61017b6004803603604081101561028e57600080fd5b506001600160a01b0381358116916020013516610a97565b61017b600480360360608110156102bc57600080fd5b506001600160a01b038135169060208101359060400135610b4b565b6102fe600480360360208110156102ee57600080fd5b50356001600160a01b0316610d6c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033a578181015183820152602001610322565b505050509050019250505060405180910390f35b6103746004803603602081101561036457600080fd5b50356001600160a01b0316610de5565b604080519115158252519081900360200190f35b6101d16004803603602081101561039e57600080fd5b50356001600160a01b0316610dfa565b6101f2611505565b61017b600480360360208110156103cc57600080fd5b503561150b565b61017b600480360360208110156103e957600080fd5b50356115dd565b6101236116f4565b6103746004803603602081101561040e57600080fd5b50356001600160a01b0316611718565b7f000000000000000000000000000000000000000000000000000000000000000081565b3360009081526002602052604090205460ff16610493576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b836001600160a01b031663a8671c318484846040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b50506040516001600160a01b038087169350871691507ffdfdf879d9abdea70f1d228c39cf14f5e7179a54f36b378f29bccfe7648f333e90600090a350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d60208110156105cb57600080fd5b50516001600160a01b03163314610617576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155825190815291517f0dd4aeebdb71d8f88640d3361815b0e64e31aaf0ee73ad7f5a421115fac879ae9281900390910190a25050565b6001602081905260009182526040909120805491015482565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051633577910560e11b815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636aef220a916024808301926020929190829003018186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d602081101561074a57600080fd5b505161078b576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6001600160a01b0383811660008181526001602081815260408084206002810180549485018155855282852090930180546001600160a01b03191696891696871790559284905290859055815185815291517fc2008aa15e9b0989ec7ae02bc3d8054428c527c989269ffb2a5bff829028a0129281900390910190a3505050565b60408051633577910560e11b815233600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636aef220a916024808301926020929190829003018186803b15801561087257600080fd5b505afa158015610886573d6000803e3d6000fd5b505050506040513d602081101561089c57600080fd5b50516108dd576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6001600160a01b0383166000908152600160205260408120600201549080805b83811015610960576001600160a01b0387811660009081526001602052604090206002018054918816918390811061093157fe5b6000918252602090912001546001600160a01b031614156109585780925060019150610960565b6001016108fd565b508015610a8f576001600160a01b03861660009081526001602081905260409091206002019061099190859061175a565b8154811061099b57fe5b60009182526020808320909101546001600160a01b038981168452600190925260409092206002018054919092169190849081106109d557fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559188168152600190915260409020600201805480610a1757fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388811680845260018352604093849020889055835188815293519189169390927fdd3e131c7baafda30070fc3f53c5153570a3e6552809d20e2b682dd30fa7cc6e92918290030190a35b505050505050565b3360009081526002602052604090205460ff16610ae8576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b806001600160a01b031663fdb5fefc836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610b3757600080fd5b505af1158015610a8f573d6000803e3d6000fd5b610b5483611718565b610b93576040805162461bcd60e51b815260206004820152600b60248201526a0858d85b92185c9d995cdd60aa1b604482015290519081900360640190fd5b6001600160a01b038316600090815260016020526040812060020180548290610bb857fe5b6000918252602090912001546001600160a01b03169050610bfb7f0000000000000000000000000000000000000000000000000000000000000000828585610442565b6001600160a01b03841660009081526001602081905260409091206002015490811115610d485760608167ffffffffffffffff81118015610c3b57600080fd5b50604051908082528060200260200182016040528015610c65578160200160208202803683370190505b50905060005b60018303811015610cf65760016000886001600160a01b03166001600160a01b031681526020019081526020016000206002018160010181548110610cac57fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610cd657fe5b6001600160a01b0390921660209283029190910190910152600101610c6b565b5082816001840381518110610d0757fe5b6001600160a01b03928316602091820292909201810191909152908716600090815260018252604090208251610d459260029092019184019061187c565b50505b505050506001600160a01b0316600090815260016020819052604090912042910155565b6001600160a01b038116600090815260016020908152604091829020600201805483518184028101840190945280845260609392830182828015610dd957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610dbb575b50505050509050919050565b60026020526000908152604090205460ff1681565b6000806000836001600160a01b031663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3857600080fd5b505afa158015610e4c573d6000803e3d6000fd5b505050506040513d6020811015610e6257600080fd5b505160408051631f1fcd5160e01b815290519192506060916001600160a01b03871691631f1fcd51916004808301926020929190829003018186803b158015610eaa57600080fd5b505afa158015610ebe573d6000803e3d6000fd5b505050506040513d6020811015610ed457600080fd5b505181518290600090610ee357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d6020811015610f6657600080fd5b5051815182906001908110610f7757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506060826001600160a01b031663d06ca61f876001600160a01b031663115880866040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b5051604080516001600160e01b031960e085901b168152600481018381526024820192835287516044830152875188939192606401906020858101910280838360005b8381101561106657818101518382015260200161104e565b50505050905001935050505060006040518083038186803b15801561108a57600080fd5b505afa15801561109e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110c757600080fd5b81019080805160405193929190846401000000008211156110e757600080fd5b9083019060208201858111156110fc57600080fd5b825186602082028301116401000000008211171561111957600080fd5b82525081516020918201928201910280838360005b8381101561114657818101518382015260200161112e565b5050505090500160405250505090508060018151811061116257fe5b6020026020010151945060008054905060008111156111945761119161271061118b88846117bc565b90611815565b95505b866001600160a01b0316633fc8cef36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d60208110156111f757600080fd5b50518351849060009061120657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f021b0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d60208110156112a957600080fd5b50518351849060019081106112ba57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600061137161271061118b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b15801561133e57600080fd5b505afa158015611352573d6000803e3d6000fd5b505050506040513d602081101561136857600080fd5b50518a906117bc565b9050846001600160a01b031663d06ca61f82866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156113d95781810151838201526020016113c1565b50505050905001935050505060006040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561143a57600080fd5b810190808051604051939291908464010000000082111561145a57600080fd5b90830190602082018581111561146f57600080fd5b825186602082028301116401000000008211171561148c57600080fd5b82525081516020918201928201910280838360005b838110156114b95781810151838201526020016114a1565b505050509050016040525050509250826001815181106114d557fe5b6020026020010151955060008211156114fb576114f861271061118b88856117bc565b95505b5050505050915091565b61271081565b3360009081526002602052604090205460ff1661155c576040805162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c4c95a1826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b505afa15801561164a573d6000803e3d6000fd5b505050506040513d602081101561166057600080fd5b50516001600160a01b031633146116ac576040805162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b604482015290519081900360640190fd5b61271081106116ef576040805162461bcd60e51b815260206004820152600a602482015269215f736c69707061676560b01b604482015290519081900360640190fd5b600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b03811660009081526001602052604081206002810154158015906117535750805461174b90429061175a565b816001015411155b9392505050565b6000828211156117b1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6000826117cb575060006117b6565b828202828482816117d857fe5b04146117535760405162461bcd60e51b81526004018080602001828103825260218152602001806119016021913960400191505060405180910390fd5b600080821161186b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161187457fe5b049392505050565b8280548282559060005260206000209081019282156118d1579160200282015b828111156118d157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061189c565b506118dd9291506118e1565b5090565b5b808211156118dd5780546001600160a01b03191681556001016118e256fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212209a76a4fd9f1fe052b547b5e22f79bb1e4b70ed4f6f21a05ff2a9e03dc839952a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStrategy(address,address,uint256)": {
        "params": {
          "_strategy": "The address of the strategy",
          "_timeout": "The timeout between harvests",
          "_vault": "The address of the vault"
        }
      },
      "canHarvest(address)": {
        "params": {
          "_vault": "The address of the vault"
        }
      },
      "constructor": {
        "params": {
          "_controller": "The address of the controller",
          "_manager": "The address of the yAxisMetaVaultManager contract"
        }
      },
      "getEstimates(address)": {
        "params": {
          "_strategy": "The address of the strategy"
        }
      },
      "harvest(address,address,uint256,uint256)": {
        "details": "This function ignores the timeout",
        "params": {
          "_controller": "The address of the controller",
          "_strategy": "The address of the strategy"
        }
      },
      "harvestNextStrategy(address,uint256,uint256)": {
        "params": {
          "_vault": "The address of the vault"
        }
      },
      "legacyEarn(uint256)": {
        "params": {
          "_expected": "The expected amount to deposit after conversion"
        }
      },
      "removeStrategy(address,address,uint256)": {
        "params": {
          "_strategy": "The address of the strategy",
          "_timeout": "The timeout between harvests",
          "_vault": "The address of the vault"
        }
      },
      "setHarvester(address,bool)": {
        "params": {
          "_harvester": "The address of the harvester",
          "_status": "The status to allow the harvester to harvest"
        }
      },
      "strategyAddresses(address)": {
        "params": {
          "_vault": "The address of the vault"
        }
      }
    },
    "title": "Harvester",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Harvest(address,address)": {
        "notice": "Logged when harvest is called for a strategy"
      },
      "HarvesterSet(address,bool)": {
        "notice": "Logged when a harvester is set"
      },
      "StrategyAdded(address,address,uint256)": {
        "notice": "Logged when a strategy is added for a vault"
      },
      "StrategyRemoved(address,address,uint256)": {
        "notice": "Logged when a strategy is removed for a vault"
      }
    },
    "kind": "user",
    "methods": {
      "addStrategy(address,address,uint256)": {
        "notice": "Adds a strategy to the rotation for a given vault and sets a timeout"
      },
      "canHarvest(address)": {
        "notice": "Returns the availability of a vault's strategy to be harvested"
      },
      "earn(address,address)": {
        "notice": "HARVESTER-ONLY FUNCTIONS"
      },
      "getEstimates(address)": {
        "notice": "Returns the estimated amount of WETH and YAXIS for the given strategy"
      },
      "harvest(address,address,uint256,uint256)": {
        "notice": "Harvests a given strategy on the provided controller"
      },
      "harvestNextStrategy(address,uint256,uint256)": {
        "notice": "Harvests the next available strategy for a given vault and rotates the strategies"
      },
      "legacyEarn(uint256)": {
        "notice": "Earns tokens in the LegacyController to the v3 vault"
      },
      "removeStrategy(address,address,uint256)": {
        "notice": "Removes a strategy from the rotation for a given vault and sets a timeout"
      },
      "setHarvester(address,bool)": {
        "notice": "Sets the status of a harvester address to be able to call harvest functions"
      },
      "strategyAddresses(address)": {
        "notice": "Returns the addresses of the strategies for a given vault"
      }
    },
    "notice": "This contract is to be used as a central point to call harvest on all strategies for any given vault. It has its own permissions for harvesters (set by the strategist or governance).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10542,
        "contract": "contracts/v3/Harvester.sol:Harvester",
        "label": "slippage",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10554,
        "contract": "contracts/v3/Harvester.sol:Harvester",
        "label": "strategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Strategy)10550_storage)"
      },
      {
        "astId": 10558,
        "contract": "contracts/v3/Harvester.sol:Harvester",
        "label": "isHarvester",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Strategy)10550_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Harvester.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)10550_storage"
      },
      "t_struct(Strategy)10550_storage": {
        "encoding": "inplace",
        "label": "struct Harvester.Strategy",
        "members": [
          {
            "astId": 10544,
            "contract": "contracts/v3/Harvester.sol:Harvester",
            "label": "timeout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10546,
            "contract": "contracts/v3/Harvester.sol:Harvester",
            "label": "lastCalled",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10549,
            "contract": "contracts/v3/Harvester.sol:Harvester",
            "label": "addresses",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}