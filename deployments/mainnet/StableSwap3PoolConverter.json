{
  "address": "0xa4ea2fD4a88cB66488109eFb8Ecd4A96F5376261",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenDAI",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenUSDC",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenUSDT",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token3CRV",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "_stableSwap3Pool",
          "type": "address"
        },
        {
          "internalType": "contract IVaultManager",
          "name": "_vaultManager",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3PoolOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PRECISION_MUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calc_token_amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        }
      ],
      "name": "calc_token_amount_withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_output",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        }
      ],
      "name": "convert_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "convert_stables",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getExpected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IStableSwap3PoolOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "_stableSwap3Pool",
          "type": "address"
        }
      ],
      "name": "setStableSwap3Pool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "setVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap3Pool",
      "outputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token3CRV",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4bc5d7a9a9703337e2403cc5254693913189492112cc7f8978de282d5a4b19d",
  "receipt": {
    "to": null,
    "from": "0x65F84A48e640a908d0DF7B6f00B871352F77022D",
    "contractAddress": "0xa4ea2fD4a88cB66488109eFb8Ecd4A96F5376261",
    "transactionIndex": 208,
    "gasUsed": "2268188",
    "logsBloom": "0x
    "blockHash": "0x49751cfa9e020c0e6ec2404c1432d6dc80ed27e775c0dd3b63bbce587c1ab41f",
    "transactionHash": "0xd4bc5d7a9a9703337e2403cc5254693913189492112cc7f8978de282d5a4b19d",
    "logs": [
      {
        "transactionIndex": 208,
        "blockNumber": 11901666,
        "transactionHash": "0xd4bc5d7a9a9703337e2403cc5254693913189492112cc7f8978de282d5a4b19d",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a4ea2fd4a88cb66488109efb8ecd4a96f5376261",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 147,
        "blockHash": "0x49751cfa9e020c0e6ec2404c1432d6dc80ed27e775c0dd3b63bbce587c1ab41f"
      },
      {
        "transactionIndex": 208,
        "blockNumber": 11901666,
        "transactionHash": "0xd4bc5d7a9a9703337e2403cc5254693913189492112cc7f8978de282d5a4b19d",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a4ea2fd4a88cb66488109efb8ecd4a96f5376261",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 148,
        "blockHash": "0x49751cfa9e020c0e6ec2404c1432d6dc80ed27e775c0dd3b63bbce587c1ab41f"
      },
      {
        "transactionIndex": 208,
        "blockNumber": 11901666,
        "transactionHash": "0xd4bc5d7a9a9703337e2403cc5254693913189492112cc7f8978de282d5a4b19d",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a4ea2fd4a88cb66488109efb8ecd4a96f5376261",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 149,
        "blockHash": "0x49751cfa9e020c0e6ec2404c1432d6dc80ed27e775c0dd3b63bbce587c1ab41f"
      },
      {
        "transactionIndex": 208,
        "blockNumber": 11901666,
        "transactionHash": "0xd4bc5d7a9a9703337e2403cc5254693913189492112cc7f8978de282d5a4b19d",
        "address": "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a4ea2fd4a88cb66488109efb8ecd4a96f5376261",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 150,
        "blockHash": "0x49751cfa9e020c0e6ec2404c1432d6dc80ed27e775c0dd3b63bbce587c1ab41f"
      }
    ],
    "blockNumber": 11901666,
    "cumulativeGasUsed": "12488122",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
    "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7",
    "0xe3d32C20Be68e6189a52f60148c850dF7A2Bb5DD",
    "0x8DFDdc191C6Fd7596deEEf52BC783546993962ee"
  ],
  "solcInputHash": "3de2fa958fb77ce58b6c702d42713fa5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenDAI\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenUSDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token3CRV\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"contract IVaultManager\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3PoolOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRECISION_MUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calc_token_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"calc_token_amount_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"convert_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"convert_stables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"getExpected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IStableSwap3PoolOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"}],\"name\":\"setStableSwap3Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"setVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token3CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"calc_token_amount(uint256[3],bool)\":{\"details\":\"0: DAI, 1: USDC, 2: USDT\",\"params\":{\"amounts\":\"Array of token amounts\",\"deposit\":\"Flag for depositing LP tokens\"}},\"calc_token_amount_withdraw(uint256,address)\":{\"params\":{\"_output\":\"The address of the output token\",\"_shares\":\"The amount of 3CRV\"}},\"constructor\":{\"params\":{\"_oracle\":\"The address of the StableSwap3PoolOracle\",\"_stableSwap3Pool\":\"The address of 3Pool\",\"_token3CRV\":\"The address of the 3CRV token\",\"_tokenDAI\":\"The address of the DAI token\",\"_tokenUSDC\":\"The address of the USDC token\",\"_tokenUSDT\":\"The address of the USDT token\",\"_vaultManager\":\"The address of the Vault Manager\"}},\"convert(address,address,uint256)\":{\"params\":{\"_input\":\"The address of the token being converted\",\"_inputAmount\":\"The input amount of tokens that are being converted\",\"_output\":\"The address of the token to be converted to\"}},\"convert_rate(address,address,uint256)\":{\"params\":{\"_input\":\"The address of the token being converted\",\"_inputAmount\":\"The input amount of tokens that are being converted\",\"_output\":\"The address of the token to be converted to\"}},\"convert_stables(uint256[3])\":{\"details\":\"0: DAI, 1: USDC, 2: USDT\",\"params\":{\"amounts\":\"Array of token amounts\"}},\"getExpected(uint256)\":{\"params\":{\"_inputAmount\":\"The input amount of tokens that are being converted\"}},\"governanceRecoverUnsupported(address,uint256,address)\":{\"details\":\"This contract should never have any tokens in it at the end of a transaction\",\"params\":{\"_amount\":\"The amount to withdraw\",\"_to\":\"The address to receive the tokens\",\"_token\":\"The address of the token\"}},\"setStableSwap3Pool(address)\":{\"params\":{\"_stableSwap3Pool\":\"The address of 3Pool\"}},\"setStrategy(address,bool)\":{\"params\":{\"_status\":\"The bool flag allowing or disallowing use of the converter by the strategy\",\"_strategy\":\"The address of the strategy\"}},\"setVaultManager(address)\":{\"params\":{\"_vaultManager\":\"The new vaultManager value\"}}},\"title\":\"StableSwap3PoolConverter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Called by Governance to approve a token address to be spent by an address\"},\"calc_token_amount(uint256[3],bool)\":{\"notice\":\"Checks the amount of 3CRV given for the amounts\"},\"calc_token_amount_withdraw(uint256,address)\":{\"notice\":\"Checks the amount of an output token given for 3CRV\"},\"convert(address,address,uint256)\":{\"notice\":\"Converts the amount of input tokens to output tokens\"},\"convert_rate(address,address,uint256)\":{\"notice\":\"Checks the amount of input tokens to output tokens\"},\"convert_stables(uint256[3])\":{\"notice\":\"Converts stables of the 3Pool to 3CRV\"},\"getExpected(uint256)\":{\"notice\":\"Returns the expected amount of tokens for a given amount by querying the latest data from Chainlink\"},\"governanceRecoverUnsupported(address,uint256,address)\":{\"notice\":\"Allows Governance to withdraw tokens from the converter\"},\"setStableSwap3Pool(address)\":{\"notice\":\"Sets a new address for the 3Pool contract\"},\"setStrategy(address,bool)\":{\"notice\":\"Called by Governance to enable or disable a strategy to use the converter\"},\"setVaultManager(address)\":{\"notice\":\"Called by Governance to set the value for the vaultManager address\"},\"token()\":{\"notice\":\"Returns the address of the 3CRV token\"}},\"notice\":\"The StableSwap3PoolConverter is used to convert funds on Curve's 3Pool. It is backed by Chainlink's price feeds to be secure against attackers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/StableSwap3PoolConverter.sol\":\"StableSwap3PoolConverter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/metavault/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n    function setStrategy(address _strategy, bool _status) external;\\n}\\n\",\"keccak256\":\"0xda45be80f9a7f2d5c36fde3ce141dbad964cf6e04b8e4c746d77d9ddc1659cab\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x913b50315c2ef2d41e44e36802e2db0e11a664e76cc232f5496da7d4efde4e5b\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3PoolOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface IStableSwap3PoolOracle {\\n    function getEthereumPrice() external view returns (uint256);\\n    function getMinimumPrice() external view returns (uint256);\\n    function getSafeAnswer(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1ca444357f64c381d8ad70615508fe005adefccc553fb1b39797182b3849b2d\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/StableSwap3PoolConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./IConverter.sol\\\";\\nimport \\\"./IVaultManager.sol\\\";\\nimport \\\"./IStableSwap3Pool.sol\\\";\\nimport \\\"./IStableSwap3PoolOracle.sol\\\";\\n\\n/**\\n * @title StableSwap3PoolConverter\\n * @notice The StableSwap3PoolConverter is used to convert funds on Curve's 3Pool.\\n * It is backed by Chainlink's price feeds to be secure against attackers.\\n */\\ncontract StableSwap3PoolConverter is IConverter {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    uint256[3] public PRECISION_MUL = [1, 1e12, 1e12];\\n    IERC20[3] public tokens; // DAI, USDC, USDT\\n    IERC20 public token3CRV; // 3Crv\\n\\n    IStableSwap3Pool public stableSwap3Pool;\\n    IVaultManager public vaultManager;\\n    IStableSwap3PoolOracle public oracle;\\n\\n    mapping(address => bool) public strategies;\\n\\n    /**\\n     * @param _tokenDAI The address of the DAI token\\n     * @param _tokenUSDC The address of the USDC token\\n     * @param _tokenUSDT The address of the USDT token\\n     * @param _token3CRV The address of the 3CRV token\\n     * @param _stableSwap3Pool The address of 3Pool\\n     * @param _vaultManager The address of the Vault Manager\\n     * @param _oracle The address of the StableSwap3PoolOracle\\n     */\\n    constructor(\\n        IERC20 _tokenDAI,\\n        IERC20 _tokenUSDC,\\n        IERC20 _tokenUSDT,\\n        IERC20 _token3CRV,\\n        IStableSwap3Pool _stableSwap3Pool,\\n        IVaultManager _vaultManager,\\n        IStableSwap3PoolOracle _oracle\\n    ) public {\\n        tokens[0] = _tokenDAI;\\n        tokens[1] = _tokenUSDC;\\n        tokens[2] = _tokenUSDT;\\n        token3CRV = _token3CRV;\\n        stableSwap3Pool = _stableSwap3Pool;\\n        tokens[0].safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        tokens[1].safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        tokens[2].safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        token3CRV.safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        vaultManager = _vaultManager;\\n        oracle = _oracle;\\n    }\\n\\n    /**\\n     * @notice Sets a new address for the 3Pool contract\\n     * @param _stableSwap3Pool The address of 3Pool\\n     */\\n    function setStableSwap3Pool(IStableSwap3Pool _stableSwap3Pool) external onlyGovernance {\\n        stableSwap3Pool = _stableSwap3Pool;\\n        tokens[0].safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        tokens[1].safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        tokens[2].safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        token3CRV.safeApprove(address(stableSwap3Pool), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Called by Governance to set the value for the vaultManager address\\n     * @param _vaultManager The new vaultManager value\\n     */\\n    function setVaultManager(IVaultManager _vaultManager) external onlyGovernance {\\n        vaultManager = _vaultManager;\\n    }\\n\\n    /**\\n     * @notice Called by Governance to enable or disable a strategy to use the converter\\n     * @param _strategy The address of the strategy\\n     * @param _status The bool flag allowing or disallowing use of the converter by the strategy\\n     */\\n    function setStrategy(address _strategy, bool _status) external override onlyGovernance {\\n        strategies[_strategy] = _status;\\n    }\\n\\n    /**\\n     * @notice Called by Governance to approve a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) external onlyGovernance {\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the 3CRV token\\n     */\\n    function token() external override returns (address) {\\n        return address(token3CRV);\\n    }\\n\\n    /**\\n     * @notice Returns the expected amount of tokens for a given amount by querying\\n     * the latest data from Chainlink\\n     * @param _inputAmount The input amount of tokens that are being converted\\n     */\\n    function getExpected(uint256 _inputAmount) public view returns (uint256) {\\n        return _inputAmount.mul(\\n                    oracle.getEthereumPrice().mul(\\n                        oracle.getMinimumPrice()\\n                    ).div(1e18)\\n                ).div(1e18);\\n    }\\n\\n    /**\\n     * @notice Converts the amount of input tokens to output tokens\\n     * @param _input The address of the token being converted\\n     * @param _output The address of the token to be converted to\\n     * @param _inputAmount The input amount of tokens that are being converted\\n     */\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external override onlyAuthorized returns (uint256 _outputAmount) {\\n        uint256 _expected = getExpected(_inputAmount);\\n        if (_output == address(token3CRV)) { // convert to 3CRV\\n            uint256[3] memory amounts;\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_input == address(tokens[i])) {\\n                    amounts[i] = _inputAmount;\\n                    uint256 _before = token3CRV.balanceOf(address(this));\\n                    stableSwap3Pool.add_liquidity(amounts, _expected);\\n                    uint256 _after = token3CRV.balanceOf(address(this));\\n                    _outputAmount = _after.sub(_before);\\n                    token3CRV.safeTransfer(msg.sender, _outputAmount);\\n                    return _outputAmount;\\n                }\\n            }\\n        } else if (_input == address(token3CRV)) { // convert from 3CRV\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_output == address(tokens[i])) {\\n                    uint256 _before = tokens[i].balanceOf(address(this));\\n                    stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, i, _expected.div(PRECISION_MUL[i]));\\n                    uint256 _after = tokens[i].balanceOf(address(this));\\n                    _outputAmount = _after.sub(_before);\\n                    tokens[i].safeTransfer(msg.sender, _outputAmount);\\n                    return _outputAmount;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Checks the amount of input tokens to output tokens\\n     * @param _input The address of the token being converted\\n     * @param _output The address of the token to be converted to\\n     * @param _inputAmount The input amount of tokens that are being converted\\n     */\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint256 _inputAmount\\n    ) external override view returns (uint256) {\\n        if (_output == address(token3CRV)) { // convert to 3CRV\\n            uint256[3] memory amounts;\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_input == address(tokens[i])) {\\n                    amounts[i] = _inputAmount;\\n                    return stableSwap3Pool.calc_token_amount(amounts, true);\\n                }\\n            }\\n        } else if (_input == address(token3CRV)) { // convert from 3CRV\\n            for (uint8 i = 0; i < 3; i++) {\\n                if (_output == address(tokens[i])) {\\n                    // @dev this is for UI reference only, the actual share price\\n                    // (stable/CRV) will be re-calculated on-chain when we do convert()\\n                    return stableSwap3Pool.calc_withdraw_one_coin(_inputAmount, i);\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Converts stables of the 3Pool to 3CRV\\n     * @dev 0: DAI, 1: USDC, 2: USDT\\n     * @param amounts Array of token amounts\\n     */\\n    function convert_stables(\\n        uint256[3] calldata amounts\\n    ) external override onlyAuthorized returns (uint256 _shareAmount) {\\n        uint256 _before = token3CRV.balanceOf(address(this));\\n        stableSwap3Pool.add_liquidity(amounts, 1);\\n        uint256 _after = token3CRV.balanceOf(address(this));\\n        _shareAmount = _after.sub(_before);\\n        token3CRV.safeTransfer(msg.sender, _shareAmount);\\n    }\\n\\n    /**\\n     * @notice Checks the amount of 3CRV given for the amounts\\n     * @dev 0: DAI, 1: USDC, 2: USDT\\n     * @param amounts Array of token amounts\\n     * @param deposit Flag for depositing LP tokens\\n     */\\n    function calc_token_amount(\\n        uint256[3] calldata amounts,\\n        bool deposit\\n    ) external override view returns (uint256 _shareAmount) {\\n        _shareAmount = stableSwap3Pool.calc_token_amount(amounts, deposit);\\n    }\\n\\n    /**\\n     * @notice Checks the amount of an output token given for 3CRV\\n     * @param _shares The amount of 3CRV\\n     * @param _output The address of the output token\\n     */\\n    function calc_token_amount_withdraw(\\n        uint256 _shares,\\n        address _output\\n    ) external override view returns (uint256) {\\n        for (uint8 i = 0; i < 3; i++) {\\n            if (_output == address(tokens[i])) {\\n                return stableSwap3Pool.calc_withdraw_one_coin(_shares, i);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Allows Governance to withdraw tokens from the converter\\n     * @dev This contract should never have any tokens in it at the end of a transaction\\n     * @param _token The address of the token\\n     * @param _amount The amount to withdraw\\n     * @param _to The address to receive the tokens\\n     */\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyGovernance {\\n        _token.transfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Throws if not called by a vault, controller, strategy, or governance\\n     */\\n    modifier onlyAuthorized() {\\n        require(vaultManager.vaults(msg.sender)\\n            || vaultManager.controllers(msg.sender)\\n            || strategies[msg.sender]\\n            || msg.sender == vaultManager.governance(),\\n            \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if not called by a controller or governance\\n     */\\n    modifier onlyGovernance() {\\n        require(vaultManager.controllers(msg.sender)\\n            || msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xda467a906650ef82a25062f5d81a5486377b38781ff613c9be1edc69f6b500c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526001608090815264e8d4a5100060a081905260c05262000029906000906003620005c0565b503480156200003757600080fd5b506040516200282e3803806200282e833981810160405260e08110156200005d57600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600380546001600160a01b03199081166001600160a01b03808a16919091178355600480548316828a1617905560058054831682891617905560068054831682881617905560078054909216818616179182905597989697959694959394936200010c929116906000199060005b01546001600160a01b03169190620001ad602090811b62001ab017901c565b6007546200012a906001600160a01b031660001960036001620000ed565b60075462000148906001600160a01b031660001960036002620000ed565b60075460065462000175916001600160a01b039182169116600019620001ad602090811b62001ab017901c565b600880546001600160a01b039384166001600160a01b0319918216179091556009805492909316911617905550620006239350505050565b80158062000237575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200020757600080fd5b505afa1580156200021c573d6000803e3d6000fd5b505050506040513d60208110156200023357600080fd5b5051155b620002745760405162461bcd60e51b8152600401808060200182810382526036815260200180620027f86036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002cc918591620002d116565b505050565b60606200032d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200038d60201b62001bc3179092919060201c565b805190915015620002cc578080602001905160208110156200034e57600080fd5b5051620002cc5760405162461bcd60e51b815260040180806020018281038252602a815260200180620027ce602a913960400191505060405180910390fd5b60606200039e8484600085620003a8565b90505b9392505050565b606082471015620003eb5760405162461bcd60e51b8152600401808060200182810382526026815260200180620027a86026913960400191505060405180910390fd5b620003f68562000510565b62000448576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620004895780518252601f19909201916020918201910162000468565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114620004ed576040519150601f19603f3d011682016040523d82523d6000602084013e620004f2565b606091505b5090925090506200050582828662000516565b979650505050505050565b3b151590565b6060831562000527575081620003a1565b825115620005385782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005845781810151838201526020016200056a565b50505050905090810190601f168015620005b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8260038101928215620005fa579160200282015b82811115620005fa578251829064ffffffffff16905591602001919060010190620005d4565b50620006089291506200060c565b5090565b5b808211156200060857600081556001016200060d565b61217580620006336000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638a4adf24116100ad578063baa82a3411610071578063baa82a3414610345578063dd0081c714610373578063e6c037531461037b578063ef9e2379146103a1578063fc0c546a146103d75761012c565b80638a4adf24146102c7578063a488680f146102cf578063ae2841c7146102d7578063b543503e14610303578063b7b11c5e146103295761012c565b80634f64b2be116100f45780634f64b2be1461022957806354575af4146102625780635a3874ac1461029a5780637dafa364146102a25780637dc0d1d0146102bf5761012c565b8063187c5f5814610131578063248391ff1461016057806336cf893c146101965780633883e119146101cc57806339ebf823146101ef575b600080fd5b61014e6004803603602081101561014757600080fd5b50356103df565b60408051918252519081900360200190f35b61014e6004803603606081101561017657600080fd5b506001600160a01b03813581169160208101359091169060400135610503565b61014e600480360360608110156101ac57600080fd5b506001600160a01b03813581169160208101359091169060400135610b56565b61014e600480360360808110156101e257600080fd5b5060608101351515610d64565b6102156004803603602081101561020557600080fd5b50356001600160a01b0316610e03565b604080519115158252519081900360200190f35b6102466004803603602081101561023f57600080fd5b5035610e18565b604080516001600160a01b039092168252519081900360200190f35b6102986004803603606081101561027857600080fd5b506001600160a01b03813581169160208101359160409091013516610e35565b005b610246610fff565b61014e600480360360208110156102b857600080fd5b503561100e565b610246611022565b610246611031565b610246611040565b61014e600480360360408110156102ed57600080fd5b50803590602001356001600160a01b031661104f565b6102986004803603602081101561031957600080fd5b50356001600160a01b0316611116565b61014e6004803603606081101561033f57600080fd5b5061127a565b6102986004803603604081101561035b57600080fd5b506001600160a01b03813516906020013515156115f7565b61014e611764565b6102986004803603602081101561039157600080fd5b50356001600160a01b031661176a565b610298600480360360608110156103b757600080fd5b506001600160a01b03813581169160208101359091169060400135611946565b610246611aa1565b60006104fd670de0b6b3a76400006104f06104f6670de0b6b3a76400006104f0600960009054906101000a90046001600160a01b03166001600160a01b031663ac4316cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d602081101561047757600080fd5b505160095460408051639bddd05f60e01b815290516001600160a01b0390921691639bddd05f91600480820192602092909190829003018186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b505190611bda565b90611c33565b8590611bda565b92915050565b60085460408051632988bb9f60e21b815233600482015290516000926001600160a01b03169163a622ee7c916024808301926020929190829003018186803b15801561054e57600080fd5b505afa158015610562573d6000803e3d6000fd5b505050506040513d602081101561057857600080fd5b5051806105f8575060085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b1580156105cb57600080fd5b505afa1580156105df573d6000803e3d6000fd5b505050506040513d60208110156105f557600080fd5b50515b806106125750336000908152600a602052604090205460ff165b8061069e5750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561066657600080fd5b505afa15801561067a573d6000803e3d6000fd5b505050506040513d602081101561069057600080fd5b50516001600160a01b031633145b6106dd576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006106e8836103df565b6006549091506001600160a01b03858116911614156109165761070961207a565b60005b60038160ff16101561090f5760038160ff166003811061072857fe5b01546001600160a01b03888116911614156109075784828260ff166003811061074d57fe5b60209081029190910191909152600654604080516370a0823160e01b815230600482015290516000936001600160a01b03909316926370a082319260248082019391829003018186803b1580156107a357600080fd5b505afa1580156107b7573d6000803e3d6000fd5b505050506040513d60208110156107cd57600080fd5b5051600754604051634515cef360e01b81529192506001600160a01b031690634515cef390859087906004018083606080838360005b8381101561081b578181015183820152602001610803565b5050505090500182815260200192505050600060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b5050600654604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d60208110156108d557600080fd5b505190506108e38183611c75565b6006549096506108fd906001600160a01b03163388611cb7565b5050505050610b4f565b60010161070c565b5050610b49565b6006546001600160a01b0386811691161415610b495760005b60038160ff161015610b475760038160ff166003811061094b57fe5b01546001600160a01b0386811691161415610b3f57600060038260ff166003811061097257fe5b0154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d60208110156109e657600080fd5b50516007549091506001600160a01b0316631a4d01d28684610a1a600060ff831660038110610a1157fe5b01548890611c33565b6040518463ffffffff1660e01b8152600401808481526020018360ff1681526020018281526020019350505050600060405180830381600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b50505050600060038360ff1660038110610a8b57fe5b0154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d6020811015610aff57600080fd5b50519050610b0d8183611c75565b9450610b36338660038660ff1660038110610b2457fe5b01546001600160a01b03169190611cb7565b50505050610b4f565b60010161092f565b505b60009150505b9392505050565b6006546000906001600160a01b0384811691161415610c7c57610b7761207a565b60005b60038160ff161015610c755760038160ff1660038110610b9657fe5b01546001600160a01b0387811691161415610c6d5783828260ff1660038110610bbb57fe5b6020020152600754604051633883e11960e01b81526001600160a01b0390911690633883e1199084906001906004018083606080838360005b83811015610c0c578181015183820152602001610bf4565b5050505090500182151581526020019250505060206040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d6020811015610c6157600080fd5b50519250610b4f915050565b600101610b7a565b5050610d5a565b6006546001600160a01b0385811691161415610d5a5760005b60038160ff161015610d585760038160ff1660038110610cb157fe5b01546001600160a01b0385811691161415610d50576007546040805163cc2b27d760e01b81526004810186905260ff8416602482015290516001600160a01b039092169163cc2b27d791604480820192602092909190829003018186803b158015610d1b57600080fd5b505afa158015610d2f573d6000803e3d6000fd5b505050506040513d6020811015610d4557600080fd5b50519150610b4f9050565b600101610c95565b505b5060009392505050565b600754604051633883e11960e01b81526000916001600160a01b031690633883e11990859085906004018083606080828437600083820152931515601f909401601f19169091019283525050604051602080830193509181900382018186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d6020811015610dfa57600080fd5b50519392505050565b600a6020526000908152604090205460ff1681565b60038160038110610e2557fe5b01546001600160a01b0316905081565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b158015610e8057600080fd5b505afa158015610e94573d6000803e3d6000fd5b505050506040513d6020811015610eaa57600080fd5b505180610f385750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d6020811015610f2a57600080fd5b50516001600160a01b031633145b610f77576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610fce57600080fd5b505af1158015610fe2573d6000803e3d6000fd5b505050506040513d6020811015610ff857600080fd5b5050505050565b6007546001600160a01b031681565b6000816003811061101b57fe5b0154905081565b6009546001600160a01b031681565b6008546001600160a01b031681565b6006546001600160a01b031681565b6000805b60038160ff161015610d5a5760038160ff166003811061106f57fe5b01546001600160a01b038481169116141561110e576007546040805163cc2b27d760e01b81526004810187905260ff8416602482015290516001600160a01b039092169163cc2b27d791604480820192602092909190829003018186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d602081101561110357600080fd5b505191506104fd9050565b600101611053565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561116157600080fd5b505afa158015611175573d6000803e3d6000fd5b505050506040513d602081101561118b57600080fd5b5051806112195750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e157600080fd5b505afa1580156111f5573d6000803e3d6000fd5b505050506040513d602081101561120b57600080fd5b50516001600160a01b031633145b611258576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60085460408051632988bb9f60e21b815233600482015290516000926001600160a01b03169163a622ee7c916024808301926020929190829003018186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d60208110156112ef57600080fd5b50518061136f575060085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50515b806113895750336000908152600a602052604090205460ff165b806114155750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156113dd57600080fd5b505afa1580156113f1573d6000803e3d6000fd5b505050506040513d602081101561140757600080fd5b50516001600160a01b031633145b611454576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600654604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561149f57600080fd5b505afa1580156114b3573d6000803e3d6000fd5b505050506040513d60208110156114c957600080fd5b5051600754604051634515cef360e01b81529192506001600160a01b031690634515cef39085906001906004018083606080828437600081840152601f19601f82011690508083019250505082815260200192505050600060405180830381600087803b15801561153957600080fd5b505af115801561154d573d6000803e3d6000fd5b5050600654604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561159e57600080fd5b505afa1580156115b2573d6000803e3d6000fd5b505050506040513d60208110156115c857600080fd5b505190506115d68183611c75565b6006549093506115f0906001600160a01b03163385611cb7565b5050919050565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505050506040513d602081101561166c57600080fd5b5051806116fa5750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c257600080fd5b505afa1580156116d6573d6000803e3d6000fd5b505050506040513d60208110156116ec57600080fd5b50516001600160a01b031633145b611739576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b61271081565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b1580156117b557600080fd5b505afa1580156117c9573d6000803e3d6000fd5b505050506040513d60208110156117df57600080fd5b50518061186d5750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561183557600080fd5b505afa158015611849573d6000803e3d6000fd5b505050506040513d602081101561185f57600080fd5b50516001600160a01b031633145b6118ac576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0383811691909117918290556118ec9116600019600360005b01546001600160a01b03169190611ab0565b600754611908906001600160a01b0316600019600360016118da565b600754611924906001600160a01b0316600019600360026118da565b600754600654611943916001600160a01b039182169116600019611ab0565b50565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561199157600080fd5b505afa1580156119a5573d6000803e3d6000fd5b505050506040513d60208110156119bb57600080fd5b505180611a495750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1157600080fd5b505afa158015611a25573d6000803e3d6000fd5b505050506040513d6020811015611a3b57600080fd5b50516001600160a01b031633145b611a88576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611a9c6001600160a01b0384168383611ab0565b505050565b6006546001600160a01b031690565b801580611b36575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611b0857600080fd5b505afa158015611b1c573d6000803e3d6000fd5b505050506040513d6020811015611b3257600080fd5b5051155b611b715760405162461bcd60e51b815260040180806020018281038252603681526020018061210a6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611a9c908490611d05565b6060611bd28484600085611db6565b949350505050565b600082611be9575060006104fd565b82820282848281611bf657fe5b0414610b4f5760405162461bcd60e51b81526004018080602001828103825260218152602001806120bf6021913960400191505060405180910390fd5b6000610b4f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611f12565b6000610b4f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fb4565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a9c9084905b6060611d5a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bc39092919063ffffffff16565b805190915015611a9c57808060200190516020811015611d7957600080fd5b5051611a9c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e0602a913960400191505060405180910390fd5b606082471015611df75760405162461bcd60e51b81526004018080602001828103825260268152602001806120996026913960400191505060405180910390fd5b611e008561200e565b611e51576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611e905780518252601f199092019160209182019101611e71565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ef2576040519150601f19603f3d011682016040523d82523d6000602084013e611ef7565b606091505b5091509150611f07828286612014565b979650505050505050565b60008183611f9e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f63578181015183820152602001611f4b565b50505050905090810190601f168015611f905780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611faa57fe5b0495945050505050565b600081848411156120065760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611f63578181015183820152602001611f4b565b505050900390565b3b151590565b60608315612023575081610b4f565b8251156120335782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611f63578181015183820152602001611f4b565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220df561608f8fedfbd912db7f46e27eb46a1615ed09fb16e991dc016cb9be0471764736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638a4adf24116100ad578063baa82a3411610071578063baa82a3414610345578063dd0081c714610373578063e6c037531461037b578063ef9e2379146103a1578063fc0c546a146103d75761012c565b80638a4adf24146102c7578063a488680f146102cf578063ae2841c7146102d7578063b543503e14610303578063b7b11c5e146103295761012c565b80634f64b2be116100f45780634f64b2be1461022957806354575af4146102625780635a3874ac1461029a5780637dafa364146102a25780637dc0d1d0146102bf5761012c565b8063187c5f5814610131578063248391ff1461016057806336cf893c146101965780633883e119146101cc57806339ebf823146101ef575b600080fd5b61014e6004803603602081101561014757600080fd5b50356103df565b60408051918252519081900360200190f35b61014e6004803603606081101561017657600080fd5b506001600160a01b03813581169160208101359091169060400135610503565b61014e600480360360608110156101ac57600080fd5b506001600160a01b03813581169160208101359091169060400135610b56565b61014e600480360360808110156101e257600080fd5b5060608101351515610d64565b6102156004803603602081101561020557600080fd5b50356001600160a01b0316610e03565b604080519115158252519081900360200190f35b6102466004803603602081101561023f57600080fd5b5035610e18565b604080516001600160a01b039092168252519081900360200190f35b6102986004803603606081101561027857600080fd5b506001600160a01b03813581169160208101359160409091013516610e35565b005b610246610fff565b61014e600480360360208110156102b857600080fd5b503561100e565b610246611022565b610246611031565b610246611040565b61014e600480360360408110156102ed57600080fd5b50803590602001356001600160a01b031661104f565b6102986004803603602081101561031957600080fd5b50356001600160a01b0316611116565b61014e6004803603606081101561033f57600080fd5b5061127a565b6102986004803603604081101561035b57600080fd5b506001600160a01b03813516906020013515156115f7565b61014e611764565b6102986004803603602081101561039157600080fd5b50356001600160a01b031661176a565b610298600480360360608110156103b757600080fd5b506001600160a01b03813581169160208101359091169060400135611946565b610246611aa1565b60006104fd670de0b6b3a76400006104f06104f6670de0b6b3a76400006104f0600960009054906101000a90046001600160a01b03166001600160a01b031663ac4316cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d602081101561047757600080fd5b505160095460408051639bddd05f60e01b815290516001600160a01b0390921691639bddd05f91600480820192602092909190829003018186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b505190611bda565b90611c33565b8590611bda565b92915050565b60085460408051632988bb9f60e21b815233600482015290516000926001600160a01b03169163a622ee7c916024808301926020929190829003018186803b15801561054e57600080fd5b505afa158015610562573d6000803e3d6000fd5b505050506040513d602081101561057857600080fd5b5051806105f8575060085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b1580156105cb57600080fd5b505afa1580156105df573d6000803e3d6000fd5b505050506040513d60208110156105f557600080fd5b50515b806106125750336000908152600a602052604090205460ff165b8061069e5750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561066657600080fd5b505afa15801561067a573d6000803e3d6000fd5b505050506040513d602081101561069057600080fd5b50516001600160a01b031633145b6106dd576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006106e8836103df565b6006549091506001600160a01b03858116911614156109165761070961207a565b60005b60038160ff16101561090f5760038160ff166003811061072857fe5b01546001600160a01b03888116911614156109075784828260ff166003811061074d57fe5b60209081029190910191909152600654604080516370a0823160e01b815230600482015290516000936001600160a01b03909316926370a082319260248082019391829003018186803b1580156107a357600080fd5b505afa1580156107b7573d6000803e3d6000fd5b505050506040513d60208110156107cd57600080fd5b5051600754604051634515cef360e01b81529192506001600160a01b031690634515cef390859087906004018083606080838360005b8381101561081b578181015183820152602001610803565b5050505090500182815260200192505050600060405180830381600087803b15801561084657600080fd5b505af115801561085a573d6000803e3d6000fd5b5050600654604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d60208110156108d557600080fd5b505190506108e38183611c75565b6006549096506108fd906001600160a01b03163388611cb7565b5050505050610b4f565b60010161070c565b5050610b49565b6006546001600160a01b0386811691161415610b495760005b60038160ff161015610b475760038160ff166003811061094b57fe5b01546001600160a01b0386811691161415610b3f57600060038260ff166003811061097257fe5b0154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d60208110156109e657600080fd5b50516007549091506001600160a01b0316631a4d01d28684610a1a600060ff831660038110610a1157fe5b01548890611c33565b6040518463ffffffff1660e01b8152600401808481526020018360ff1681526020018281526020019350505050600060405180830381600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b50505050600060038360ff1660038110610a8b57fe5b0154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d6020811015610aff57600080fd5b50519050610b0d8183611c75565b9450610b36338660038660ff1660038110610b2457fe5b01546001600160a01b03169190611cb7565b50505050610b4f565b60010161092f565b505b60009150505b9392505050565b6006546000906001600160a01b0384811691161415610c7c57610b7761207a565b60005b60038160ff161015610c755760038160ff1660038110610b9657fe5b01546001600160a01b0387811691161415610c6d5783828260ff1660038110610bbb57fe5b6020020152600754604051633883e11960e01b81526001600160a01b0390911690633883e1199084906001906004018083606080838360005b83811015610c0c578181015183820152602001610bf4565b5050505090500182151581526020019250505060206040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d6020811015610c6157600080fd5b50519250610b4f915050565b600101610b7a565b5050610d5a565b6006546001600160a01b0385811691161415610d5a5760005b60038160ff161015610d585760038160ff1660038110610cb157fe5b01546001600160a01b0385811691161415610d50576007546040805163cc2b27d760e01b81526004810186905260ff8416602482015290516001600160a01b039092169163cc2b27d791604480820192602092909190829003018186803b158015610d1b57600080fd5b505afa158015610d2f573d6000803e3d6000fd5b505050506040513d6020811015610d4557600080fd5b50519150610b4f9050565b600101610c95565b505b5060009392505050565b600754604051633883e11960e01b81526000916001600160a01b031690633883e11990859085906004018083606080828437600083820152931515601f909401601f19169091019283525050604051602080830193509181900382018186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d6020811015610dfa57600080fd5b50519392505050565b600a6020526000908152604090205460ff1681565b60038160038110610e2557fe5b01546001600160a01b0316905081565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b158015610e8057600080fd5b505afa158015610e94573d6000803e3d6000fd5b505050506040513d6020811015610eaa57600080fd5b505180610f385750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d6020811015610f2a57600080fd5b50516001600160a01b031633145b610f77576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b826001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610fce57600080fd5b505af1158015610fe2573d6000803e3d6000fd5b505050506040513d6020811015610ff857600080fd5b5050505050565b6007546001600160a01b031681565b6000816003811061101b57fe5b0154905081565b6009546001600160a01b031681565b6008546001600160a01b031681565b6006546001600160a01b031681565b6000805b60038160ff161015610d5a5760038160ff166003811061106f57fe5b01546001600160a01b038481169116141561110e576007546040805163cc2b27d760e01b81526004810187905260ff8416602482015290516001600160a01b039092169163cc2b27d791604480820192602092909190829003018186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d602081101561110357600080fd5b505191506104fd9050565b600101611053565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561116157600080fd5b505afa158015611175573d6000803e3d6000fd5b505050506040513d602081101561118b57600080fd5b5051806112195750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e157600080fd5b505afa1580156111f5573d6000803e3d6000fd5b505050506040513d602081101561120b57600080fd5b50516001600160a01b031633145b611258576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60085460408051632988bb9f60e21b815233600482015290516000926001600160a01b03169163a622ee7c916024808301926020929190829003018186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d60208110156112ef57600080fd5b50518061136f575060085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50515b806113895750336000908152600a602052604090205460ff165b806114155750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156113dd57600080fd5b505afa1580156113f1573d6000803e3d6000fd5b505050506040513d602081101561140757600080fd5b50516001600160a01b031633145b611454576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600654604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561149f57600080fd5b505afa1580156114b3573d6000803e3d6000fd5b505050506040513d60208110156114c957600080fd5b5051600754604051634515cef360e01b81529192506001600160a01b031690634515cef39085906001906004018083606080828437600081840152601f19601f82011690508083019250505082815260200192505050600060405180830381600087803b15801561153957600080fd5b505af115801561154d573d6000803e3d6000fd5b5050600654604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b15801561159e57600080fd5b505afa1580156115b2573d6000803e3d6000fd5b505050506040513d60208110156115c857600080fd5b505190506115d68183611c75565b6006549093506115f0906001600160a01b03163385611cb7565b5050919050565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505050506040513d602081101561166c57600080fd5b5051806116fa5750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c257600080fd5b505afa1580156116d6573d6000803e3d6000fd5b505050506040513d60208110156116ec57600080fd5b50516001600160a01b031633145b611739576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b61271081565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b1580156117b557600080fd5b505afa1580156117c9573d6000803e3d6000fd5b505050506040513d60208110156117df57600080fd5b50518061186d5750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561183557600080fd5b505afa158015611849573d6000803e3d6000fd5b505050506040513d602081101561185f57600080fd5b50516001600160a01b031633145b6118ac576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0383811691909117918290556118ec9116600019600360005b01546001600160a01b03169190611ab0565b600754611908906001600160a01b0316600019600360016118da565b600754611924906001600160a01b0316600019600360026118da565b600754600654611943916001600160a01b039182169116600019611ab0565b50565b60085460408051636d46114f60e11b815233600482015290516001600160a01b039092169163da8c229e91602480820192602092909190829003018186803b15801561199157600080fd5b505afa1580156119a5573d6000803e3d6000fd5b505050506040513d60208110156119bb57600080fd5b505180611a495750600860009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1157600080fd5b505afa158015611a25573d6000803e3d6000fd5b505050506040513d6020811015611a3b57600080fd5b50516001600160a01b031633145b611a88576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611a9c6001600160a01b0384168383611ab0565b505050565b6006546001600160a01b031690565b801580611b36575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611b0857600080fd5b505afa158015611b1c573d6000803e3d6000fd5b505050506040513d6020811015611b3257600080fd5b5051155b611b715760405162461bcd60e51b815260040180806020018281038252603681526020018061210a6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611a9c908490611d05565b6060611bd28484600085611db6565b949350505050565b600082611be9575060006104fd565b82820282848281611bf657fe5b0414610b4f5760405162461bcd60e51b81526004018080602001828103825260218152602001806120bf6021913960400191505060405180910390fd5b6000610b4f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611f12565b6000610b4f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fb4565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a9c9084905b6060611d5a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bc39092919063ffffffff16565b805190915015611a9c57808060200190516020811015611d7957600080fd5b5051611a9c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120e0602a913960400191505060405180910390fd5b606082471015611df75760405162461bcd60e51b81526004018080602001828103825260268152602001806120996026913960400191505060405180910390fd5b611e008561200e565b611e51576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611e905780518252601f199092019160209182019101611e71565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611ef2576040519150601f19603f3d011682016040523d82523d6000602084013e611ef7565b606091505b5091509150611f07828286612014565b979650505050505050565b60008183611f9e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f63578181015183820152602001611f4b565b50505050905090810190601f168015611f905780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611faa57fe5b0495945050505050565b600081848411156120065760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611f63578181015183820152602001611f4b565b505050900390565b3b151590565b60608315612023575081610b4f565b8251156120335782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611f63578181015183820152602001611f4b565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220df561608f8fedfbd912db7f46e27eb46a1615ed09fb16e991dc016cb9be0471764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "calc_token_amount(uint256[3],bool)": {
        "details": "0: DAI, 1: USDC, 2: USDT",
        "params": {
          "amounts": "Array of token amounts",
          "deposit": "Flag for depositing LP tokens"
        }
      },
      "calc_token_amount_withdraw(uint256,address)": {
        "params": {
          "_output": "The address of the output token",
          "_shares": "The amount of 3CRV"
        }
      },
      "constructor": {
        "params": {
          "_oracle": "The address of the StableSwap3PoolOracle",
          "_stableSwap3Pool": "The address of 3Pool",
          "_token3CRV": "The address of the 3CRV token",
          "_tokenDAI": "The address of the DAI token",
          "_tokenUSDC": "The address of the USDC token",
          "_tokenUSDT": "The address of the USDT token",
          "_vaultManager": "The address of the Vault Manager"
        }
      },
      "convert(address,address,uint256)": {
        "params": {
          "_input": "The address of the token being converted",
          "_inputAmount": "The input amount of tokens that are being converted",
          "_output": "The address of the token to be converted to"
        }
      },
      "convert_rate(address,address,uint256)": {
        "params": {
          "_input": "The address of the token being converted",
          "_inputAmount": "The input amount of tokens that are being converted",
          "_output": "The address of the token to be converted to"
        }
      },
      "convert_stables(uint256[3])": {
        "details": "0: DAI, 1: USDC, 2: USDT",
        "params": {
          "amounts": "Array of token amounts"
        }
      },
      "getExpected(uint256)": {
        "params": {
          "_inputAmount": "The input amount of tokens that are being converted"
        }
      },
      "governanceRecoverUnsupported(address,uint256,address)": {
        "details": "This contract should never have any tokens in it at the end of a transaction",
        "params": {
          "_amount": "The amount to withdraw",
          "_to": "The address to receive the tokens",
          "_token": "The address of the token"
        }
      },
      "setStableSwap3Pool(address)": {
        "params": {
          "_stableSwap3Pool": "The address of 3Pool"
        }
      },
      "setStrategy(address,bool)": {
        "params": {
          "_status": "The bool flag allowing or disallowing use of the converter by the strategy",
          "_strategy": "The address of the strategy"
        }
      },
      "setVaultManager(address)": {
        "params": {
          "_vaultManager": "The new vaultManager value"
        }
      }
    },
    "title": "StableSwap3PoolConverter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Called by Governance to approve a token address to be spent by an address"
      },
      "calc_token_amount(uint256[3],bool)": {
        "notice": "Checks the amount of 3CRV given for the amounts"
      },
      "calc_token_amount_withdraw(uint256,address)": {
        "notice": "Checks the amount of an output token given for 3CRV"
      },
      "convert(address,address,uint256)": {
        "notice": "Converts the amount of input tokens to output tokens"
      },
      "convert_rate(address,address,uint256)": {
        "notice": "Checks the amount of input tokens to output tokens"
      },
      "convert_stables(uint256[3])": {
        "notice": "Converts stables of the 3Pool to 3CRV"
      },
      "getExpected(uint256)": {
        "notice": "Returns the expected amount of tokens for a given amount by querying the latest data from Chainlink"
      },
      "governanceRecoverUnsupported(address,uint256,address)": {
        "notice": "Allows Governance to withdraw tokens from the converter"
      },
      "setStableSwap3Pool(address)": {
        "notice": "Sets a new address for the 3Pool contract"
      },
      "setStrategy(address,bool)": {
        "notice": "Called by Governance to enable or disable a strategy to use the converter"
      },
      "setVaultManager(address)": {
        "notice": "Called by Governance to set the value for the vaultManager address"
      },
      "token()": {
        "notice": "Returns the address of the 3CRV token"
      }
    },
    "notice": "The StableSwap3PoolConverter is used to convert funds on Curve's 3Pool. It is backed by Chainlink's price feeds to be secure against attackers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2533,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "PRECISION_MUL",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 2537,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IERC20)799)3_storage"
      },
      {
        "astId": 2539,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "token3CRV",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)799"
      },
      {
        "astId": 2541,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "stableSwap3Pool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IStableSwap3Pool)2317"
      },
      {
        "astId": 2543,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "vaultManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IVaultManager)2503"
      },
      {
        "astId": 2545,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "oracle",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IStableSwap3PoolOracle)2337"
      },
      {
        "astId": 2549,
        "contract": "contracts/metavault/StableSwap3PoolConverter.sol:StableSwap3PoolConverter",
        "label": "strategies",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)799)3_storage": {
        "base": "t_contract(IERC20)799",
        "encoding": "inplace",
        "label": "contract IERC20[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)799": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap3Pool)2317": {
        "encoding": "inplace",
        "label": "contract IStableSwap3Pool",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap3PoolOracle)2337": {
        "encoding": "inplace",
        "label": "contract IStableSwap3PoolOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)2503": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}