{
  "address": "0x0dDf0849Fad3Ec59369bFA38041980DbE9bDa07a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cvx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crv3",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "_stableSwap3Pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "contract IConvexVault",
          "name": "_convexVault",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap2Pool",
          "name": "_stableSwap2Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_routerArray",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexVault",
      "outputs": [
        {
          "internalType": "contract IConvexVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv3",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvRewards",
      "outputs": [
        {
          "internalType": "contract IConvexRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEstimates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMostPremium",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_estimates",
          "type": "uint256[]"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mim",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routerArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_routerIndex",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_routerArray",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokenArray",
          "type": "address[]"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap2Pool",
      "outputs": [
        {
          "internalType": "contract IStableSwap2Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap3Pool",
      "outputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
  "receipt": {
    "to": null,
    "from": "0xdCCbf50347e6B7F151EF4eC853c2a6bE149A3cda",
    "contractAddress": "0x0dDf0849Fad3Ec59369bFA38041980DbE9bDa07a",
    "transactionIndex": 91,
    "gasUsed": "4603097",
    "logsBloom": "0x
    "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a",
    "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 185,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 186,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 187,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 188,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x5a6A4D54456819380173272A5E8E9B9904BdF41B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae31"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 189,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 190,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 191,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 192,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 193,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 194,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 195,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 196,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 197,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 198,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 199,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x5a6A4D54456819380173272A5E8E9B9904BdF41B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 200,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 201,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 202,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 203,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x090185f2135308BaD17527004364eBcC2D37e5F6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 204,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 13648321,
        "transactionHash": "0x7f5c8c1765b7cd23c115eeb28fe89f8371fd19a6b3b1951940a0d1e38f2b0b61",
        "address": "0x090185f2135308BaD17527004364eBcC2D37e5F6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000ddf0849fad3ec59369bfa38041980dbe9bda07a",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 205,
        "blockHash": "0xac749e758938da02a2f9e1f6489b80a027e461d23c3cafa7eaae06661b36ee3a"
      }
    ],
    "blockNumber": 13648321,
    "cumulativeGasUsed": "12890636",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "yAxis Convex Strategy: MIMCRV",
    "0x5a6A4D54456819380173272A5E8E9B9904BdF41B",
    "0xD533a949740bb3306d119CC777fa900bA034cd52",
    "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
    "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
    "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7",
    40,
    "0xF403C135812408BFbE8713b5A23a04b3D48AAE31",
    "0x5a6A4D54456819380173272A5E8E9B9904BdF41B",
    "0x834ebCE3b3Fb5B9647d9398a1f6F44A2E831aC60",
    "0xAB72cC293B63f6477BAf9d514Da735Cf6caADC2d",
    [
      "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
      "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
    ]
  ],
  "solcInputHash": "ab117fdc5454952510ef9fc2c490228e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv3\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IConvexVault\",\"name\":\"_convexVault\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap2Pool\",\"name\":\"_stableSwap2Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexVault\",\"outputs\":[{\"internalType\":\"contract IConvexVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewards\",\"outputs\":[{\"internalType\":\"contract IConvexRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEstimates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_estimates\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routerIndex\",\"type\":\"uint256\"}],\"name\":\"setDefaultRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenArray\",\"type\":\"address[]\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap2Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap2Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"constructor\":{\"params\":{\"_controller\":\"The address of the controller\",\"_convexVault\":\"The address of the convex vault\",\"_crv\":\"The address of CRV\",\"_crv3\":\"The address of 3CRV\",\"_cvx\":\"The address of CVX\",\"_manager\":\"The address of the manager\",\"_mim\":\"The address of MIM\",\"_name\":\"The strategy name\",\"_pid\":\"The pool id of convex\",\"_routerArray\":\"The address array of routers for swapping tokens\",\"_stableSwap2Pool\":\"The address of the stable swap pool\",\"_stableSwap3Pool\":\"The address of the 3CRV pool\",\"_want\":\"The desired token of the strategy\",\"_weth\":\"The address of WETH\"}},\"setDefaultRouter(uint256)\":{\"params\":{\"_routerIndex\":\"Gets the address of the router from routerArray\"}},\"setRouter(address[],address[])\":{\"params\":{\"_routerArray\":\"The addresses of routers\",\"_tokenArray\":\"The addresses of tokens that need to be approved by the strategy\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest(uint256[])\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setDefaultRouter(uint256)\":{\"notice\":\"Sets the default ISwap-compatible router\"},\"setRouter(address[],address[])\":{\"notice\":\"Sets the address of the ISwap-compatible router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/strategies/MIMConvexStrategy.sol\":\"MIMConvexStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ExtendedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface ExtendedIERC20 {\\n    function decimals() external view returns (uint8);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4ba01563f54a2993c1491d32f777e3df1af02151bef35d87a138b6d8fb5819bd\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ICVXMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICVXMinter {\\n    function maxSupply() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function totalCliffs() external view returns (uint256);\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x61a7da2da0bf72808ee8dd460affb0768426991383a17cdd881cf0e638453a48\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256[] calldata _estimates) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\",\"keccak256\":\"0x8ce01e149a62d561d025ba8671b7487d33090189d896dcfc0f5464870b85d38e\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IConvexVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IConvexVault {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lptoken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        bool stake\\n    ) external returns (bool);\\n\\n    function depositAll(uint256 pid, bool stake) external returns (bool);\\n\\n    function withdraw(uint256 pid, uint256 amount) external returns (bool);\\n\\n    function withdrawAll(uint256 pid) external returns (bool);\\n}\\n\\ninterface IConvexRewards {\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address _account) external view returns (uint256);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\\n}\\n\",\"keccak256\":\"0x5305775695c0a90b2b264ffdabe0563164964068f5a591f7f6bc7c37f5053397\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function coins(uint256) external view returns (address);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f37844a5df55f4c7e8a7e9280d702c785419abd904d7289831668d006e154fa\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n    function slippage() external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2047997ad37599e5b472606ec5f1433b2086b3a7eec31c27bc88d1e9a27cd720\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addVault(address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getToken(address) external view returns (address);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeVault(address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7643ce13f4882cd5e4fef64c7e82ef6b7037af24afb88ca0e97922f93d52850d\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwap2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap2Pool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xff6805d3eb86f95d733145255a37da3eb8c157cd1165080a539e11f9438cb9a5\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function coins(uint) external view returns (address);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xdd55ae52354c1fe99d2f8aefec0867285b266e5aedfadcc0f31003013822f503\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256[] calldata) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\\ninterface IStrategyExtended {\\n    function getEstimates() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xd1929e523830a082079cd819f46345ee5c28d79a1f271b2b0d58683194133938\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x054e1fbb6e5fc879fcd57c1fe554fe9838dbae742d35df59541c200e50fc6b59\",\"license\":\"MIT\"},\"contracts/v3/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStableSwap3Pool.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable override weth;\\n    address public immutable controller;\\n    IManager public immutable override manager;\\n    string public override name;\\n    address[] public routerArray;\\n    ISwap public override router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _routerArray The addresses of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _controller,\\n        address _manager,\\n        address _want,\\n        address _weth,\\n        address[] memory _routerArray\\n    ) public {\\n        name = _name;\\n        want = _want;\\n        controller = _controller;\\n        manager = IManager(_manager);\\n        weth = _weth;\\n        require(_routerArray.length > 0, \\\"Must input at least one router\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        for(uint i = 0; i < _routerArray.length; i++) {\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), 0);\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), type(uint256).max);\\n        }\\n        \\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, 0);\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _routerArray The addresses of routers\\n     * @param _tokenArray The addresses of tokens that need to be approved by the strategy\\n     */\\n     function setRouter(\\n        address[] calldata _routerArray,\\n        address[] calldata _tokenArray\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        address _router;\\n        uint256 _routerLength = _routerArray.length;\\n        uint256 _tokenArrayLength = _tokenArray.length;\\n        for(uint i = 0; i < _routerLength; i++) {\\n            _router = _routerArray[i];\\n            IERC20(weth).safeApprove(_router, 0);\\n            IERC20(weth).safeApprove(_router, type(uint256).max);\\n            for(uint j = 0; j < _tokenArrayLength; j++) {\\n                IERC20(_tokenArray[j]).safeApprove(_router, 0);\\n                IERC20(_tokenArray[j]).safeApprove(_router, type(uint256).max);\\n            }\\n        }\\n\\n    }\\n    \\n    /**\\n     * @notice Sets the default ISwap-compatible router\\n     * @param _routerIndex Gets the address of the router from routerArray\\n     */\\n     function setDefaultRouter(\\n        uint256 _routerIndex\\n    )\\n        external\\n    {\\n    \\trequire(msg.sender == manager.governance(), \\\"!governance\\\");\\n    \\trouter = ISwap(routerArray[_routerIndex]);\\n    }\\n\\n    /**\\n     * CONTROLLER-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit()\\n        external\\n        override\\n        onlyController\\n    {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest(\\n        uint256[] calldata _estimates\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        _harvest(_estimates);\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim()\\n        external\\n        override\\n        onlyController\\n    {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        IERC20(want).safeTransfer(controller, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll()\\n        external\\n        override\\n        onlyController\\n    {\\n        _withdrawAll();\\n\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n\\n        IERC20(want).safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit()\\n        internal\\n        virtual;\\n\\n    function _harvest(\\n        uint256[] calldata _estimates\\n    )\\n        internal\\n        virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken,\\n        uint256 _estimatedWETH,\\n        uint256 _estimatedYAXIS,\\n        uint256 _routerIndex\\n    )\\n        internal\\n        returns (uint256 _wethBal)\\n    {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount, _estimatedWETH);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yaxis,\\n                address treasury,\\n                uint256 treasuryFee\\n            ) = manager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n\\n                _swapTokensWithRouterIndex(weth, yaxis, _fee, _estimatedYAXIS, _routerIndex);\\n                IERC20(yaxis).safeTransfer(treasury, IERC20(yaxis).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokensWithRouterIndex(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected,\\n        uint256 _routerIndex\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        ISwap(routerArray[_routerIndex]).swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n    \\n    function _swapTokens(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n\\n    function _withdraw(\\n        uint256 _amount\\n    )\\n        internal\\n        virtual;\\n\\n    function _withdrawAll()\\n        internal\\n        virtual;\\n\\n    function _withdrawSome(\\n        uint256 _amount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 _before = IERC20(want).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(want).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x20101a13ffab50bc82bf410f8dc1dccebab261dd22dde5f328a0e85e44357766\",\"license\":\"MIT\"},\"contracts/v3/strategies/MIMConvexStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../interfaces/IConvexVault.sol';\\nimport '../interfaces/ICurvePool.sol';\\nimport '../interfaces/IStableSwap2Pool.sol';\\nimport '../interfaces/IStableSwap3Pool.sol';\\nimport './BaseStrategy.sol';\\nimport '../interfaces/ExtendedIERC20.sol';\\nimport '../interfaces/ICVXMinter.sol';\\nimport '../interfaces/IHarvester.sol';\\n\\ncontract MIMConvexStrategy is BaseStrategy {\\n    // used for Crv -> weth -> [mim/3crv] -> mimCrv route\\n    address public immutable crv;\\n    address public immutable cvx;\\n\\n    address public immutable mim;\\n    address public immutable crv3;\\n\\n    uint256 public immutable pid;\\n    IConvexVault public immutable convexVault;\\n    IConvexRewards public immutable crvRewards;\\n    IStableSwap2Pool public immutable stableSwap2Pool;\\n    IStableSwap3Pool public immutable stableSwap3Pool;\\n\\n    /**\\n     * @param _name The strategy name\\n     * @param _want The desired token of the strategy\\n     * @param _crv The address of CRV\\n     * @param _cvx The address of CVX\\n     * @param _weth The address of WETH\\n     * @param _mim The address of MIM\\n     * @param _crv3 The address of 3CRV\\n     * @param _stableSwap3Pool The address of the 3CRV pool\\n     * @param _pid The pool id of convex\\n     * @param _convexVault The address of the convex vault\\n     * @param _stableSwap2Pool The address of the stable swap pool\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _routerArray The address array of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _want,\\n        address _crv,\\n        address _cvx,\\n        address _weth,\\n        address _mim,\\n        address _crv3,\\n        IStableSwap3Pool _stableSwap3Pool,\\n        uint256 _pid,\\n        IConvexVault _convexVault,\\n        IStableSwap2Pool _stableSwap2Pool,\\n        address _controller,\\n        address _manager,\\n        address[] memory _routerArray\\n    ) public BaseStrategy(_name, _controller, _manager, _want, _weth, _routerArray) {\\n        require(address(_crv) != address(0), '!_crv');\\n        require(address(_cvx) != address(0), '!_cvx');\\n        require(address(_mim) != address(0), '!_mim');\\n        require(address(_crv3) != address(0), '!_crv3');\\n        require(address(_convexVault) != address(0), '!_convexVault');\\n        require(address(_stableSwap2Pool) != address(0), '!_stableSwap2Pool');\\n        require(address(_stableSwap3Pool) != address(0), '!_stableSwap3Pool');\\n\\n        (, , , address _crvRewards, , ) = _convexVault.poolInfo(_pid);\\n        crv = _crv;\\n        cvx = _cvx;\\n        mim = _mim;\\n        crv3 = _crv3;\\n        pid = _pid;\\n        convexVault = _convexVault;\\n        crvRewards = IConvexRewards(_crvRewards);\\n        stableSwap2Pool = _stableSwap2Pool;\\n        stableSwap3Pool = _stableSwap3Pool;\\n        // Required to overcome \\\"Stack Too Deep\\\" error\\n        _setApprovals(\\n            _want,\\n            _crv,\\n            _cvx,\\n            _mim,\\n            _crv3,\\n            address(_convexVault),\\n            address(_stableSwap2Pool),\\n            _routerArray\\n        );\\n        _setMoreApprovals(address(_stableSwap3Pool), _crvRewards, _routerArray);\\n    }\\n    \\n    function _setMoreApprovals(address _stableSwap3Pool, address _crvRewards, address[] memory _routerArray) internal {\\n        IERC20(IStableSwap3Pool(_stableSwap3Pool).coins(0)).safeApprove(_stableSwap3Pool, type(uint256).max);\\n        IERC20(IStableSwap3Pool(_stableSwap3Pool).coins(1)).safeApprove(_stableSwap3Pool, type(uint256).max);\\n        IERC20(IStableSwap3Pool(_stableSwap3Pool).coins(2)).safeApprove(_stableSwap3Pool, type(uint256).max);   \\n        uint _routerArrayLength = _routerArray.length;\\n        for(uint i=0; i<_routerArrayLength; i++) {\\n            address _router = _routerArray[i];\\n            uint rewardsLength = IConvexRewards(_crvRewards).extraRewardsLength();\\n            if (rewardsLength > 0) {\\n                for(uint j=0; j<rewardsLength; j++) {\\n                    IERC20(IConvexRewards(IConvexRewards(_crvRewards).extraRewards(j)).rewardToken()).safeApprove(_router, type(uint256).max);\\n                }\\n            }\\n        }\\t \\t\\n    }\\n\\n    function _setApprovals(\\n        address _want,\\n        address _crv,\\n        address _cvx,\\n        address _mim,\\n        address _crv3,\\n        address _convexVault,\\n        address _stableSwap2Pool,\\n        address[] memory _routerArray\\n    ) internal {\\n        IERC20(_want).safeApprove(address(_convexVault), type(uint256).max);\\n        for(uint i=0; i<_routerArray.length; i++) {\\n            address _router = _routerArray[i];\\n            IERC20(_crv).safeApprove(address(_router), 0);\\n            IERC20(_crv).safeApprove(address(_router), type(uint256).max);\\n            IERC20(_cvx).safeApprove(address(_router), 0);\\n            IERC20(_cvx).safeApprove(address(_router), type(uint256).max);\\n        }\\n        IERC20(_mim).safeApprove(address(_stableSwap2Pool), type(uint256).max);\\n        IERC20(_crv3).safeApprove(address(_stableSwap2Pool), type(uint256).max);\\n        IERC20(_want).safeApprove(address(_stableSwap2Pool), type(uint256).max);\\n    }\\n\\n    function _deposit() internal override {\\n        if (balanceOfWant() > 0) {\\n            convexVault.depositAll(pid, true);\\n        }\\n    }\\n\\n    function _claimReward() internal {\\n        crvRewards.getReward(address(this), true);\\n    }\\n\\n    function _addLiquidity(uint256 estimate) internal {\\n        uint256[2] memory amounts;\\n        amounts[1] = IERC20(crv3).balanceOf(address(this));\\n        stableSwap2Pool.add_liquidity(amounts, estimate);\\n    }\\n\\n    function _addLiquidity3CRV(uint256 estimate) internal {\\n        uint256[3] memory amounts;\\n        (address targetCoin, uint256 targetIndex) = getMostPremium();\\n        amounts[targetIndex] = IERC20(targetCoin).balanceOf(address(this));\\n        stableSwap3Pool.add_liquidity(amounts, estimate);\\n    }\\n\\n    function getMostPremium() public view returns (address, uint256) {\\n        uint256 daiBalance = stableSwap3Pool.balances(0);\\n        uint256 usdcBalance = (stableSwap3Pool.balances(1)).mul(10**18).div(ExtendedIERC20(stableSwap3Pool.coins(1)).decimals());\\n        uint256 usdtBalance = (stableSwap3Pool.balances(2)).mul(10**12); \\n\\n        if (daiBalance <= usdcBalance && daiBalance <= usdtBalance) {\\n            return (stableSwap3Pool.coins(0), 0);\\n        }\\n\\n        if (usdcBalance <= daiBalance && usdcBalance <= usdtBalance) {\\n            return (stableSwap3Pool.coins(1), 1);\\n        }\\n\\n        if (usdtBalance <= daiBalance && usdtBalance <= usdcBalance) {\\n            return (stableSwap3Pool.coins(2), 2);\\n        }\\n\\n        return (stableSwap3Pool.coins(0), 0); // If they're somehow equal, we just want DAI\\n    }\\n\\n    function _harvest(uint256[] calldata _estimates) internal override {\\n        _claimReward();\\n        uint256 _cvxBalance = IERC20(cvx).balanceOf(address(this));\\n        if (_cvxBalance > 0) {\\n            _swapTokens(cvx, weth, _cvxBalance, _estimates[0]);\\n        }\\n\\n        uint256 _extraRewardsLength = crvRewards.extraRewardsLength();\\n        for (uint256 i = 0; i < _extraRewardsLength; i++) {\\n            address _rewardToken = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n            uint256 _extraRewardBalance = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_extraRewardBalance > 0) {\\n                _swapTokens(_rewardToken, weth, _extraRewardBalance, _estimates[i+1]);\\n            }\\n        }\\n\\t// RouterIndex 1 sets router to Uniswap to swap WETH->YAXIS\\n        uint256 _remainingWeth = _payHarvestFees(crv, _estimates[_extraRewardsLength + 1], _estimates[_extraRewardsLength + 2], 1);\\n        if (_remainingWeth > 0) {\\n            (address _token, ) = getMostPremium(); // stablecoin we want to convert to\\n            _swapTokens(weth, _token, _remainingWeth, _estimates[_extraRewardsLength + 3]);\\n            _addLiquidity3CRV(_estimates[_extraRewardsLength + 4]);\\n            _addLiquidity(_estimates[_extraRewardsLength + 4]);\\n            _deposit();\\n        }\\n    }\\n\\n    function getEstimates() external view returns (uint256[] memory) {\\n               \\n        uint rewardsLength = crvRewards.extraRewardsLength();\\n        uint256[] memory _estimates = new uint256[](rewardsLength.add(5));\\n        address[] memory _path = new address[](2);\\n        uint256[] memory _amounts;\\n        uint256 _notSlippage = ONE_HUNDRED_PERCENT.sub(IHarvester(manager.harvester()).slippage());\\n        uint256 wethAmount;\\n\\n        // Estimates for CVX -> WETH\\n        _path[0] = cvx;\\n        _path[1] = weth;\\n        _amounts = router.getAmountsOut(\\n            // Calculating CVX minted\\n            (crvRewards.earned(address(this)))\\n            .mul(ICVXMinter(cvx).totalCliffs().sub(ICVXMinter(cvx).totalSupply().div(ICVXMinter(cvx).reductionPerCliff())))\\n            .div(ICVXMinter(cvx).totalCliffs()),\\n            _path\\n        );\\n        _estimates[0]= _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        wethAmount += _estimates[0];\\n\\n        // Estimates for extra rewards -> WETH\\n        \\n        if (rewardsLength > 0) {\\n            for (uint256 i = 0; i < rewardsLength; i++) {\\n                _path[0] = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n                _path[1] = weth;\\n                _amounts = router.getAmountsOut(\\n                    IConvexRewards(crvRewards.extraRewards(i)).earned(address(this)),\\n                    _path\\n                );\\n                _estimates[i + 1] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n                wethAmount += _estimates[i + 1];\\n            }\\n        }\\n\\n        // Estimates for CRV -> WETH\\n        _path[0] = crv;\\n        _path[1] = weth;\\n        _amounts = router.getAmountsOut(\\n            crvRewards.earned(address(this)),\\n            _path\\n        );\\n        _estimates[rewardsLength + 1] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        wethAmount += _estimates[rewardsLength + 1];\\n\\n        // Estimates WETH -> YAXIS\\n        _path[0] = weth;\\n        _path[1] = manager.yaxis();\\n        // Set to UniswapV2 to calculate output for YAXIS\\n        _amounts = ISwap(routerArray[1]).getAmountsOut(wethAmount.mul(manager.treasuryFee()).div(ONE_HUNDRED_PERCENT), _path);\\n        _estimates[rewardsLength + 2] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n        \\n        // Estimates for WETH -> Stablecoin\\n        (address _targetCoin,) = getMostPremium(); \\n        _path[0] = weth;\\n        _path[1] = _targetCoin;\\n        _amounts = router.getAmountsOut(\\n            wethAmount - _amounts[0],\\n            _path\\n        );\\n        _estimates[rewardsLength + 3] = _amounts[1].mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n\\n        // Estimates for Stablecoin -> 3CRV\\n        _estimates[rewardsLength + 4] = (_amounts[1].mul(10**(18-ExtendedIERC20(_targetCoin).decimals())).div(stableSwap3Pool.get_virtual_price())).mul(_notSlippage).div(ONE_HUNDRED_PERCENT);\\n        // Estimates for 3CRV -> MIM-3CRV is the same 3CRV estimate\\n        \\n        return _estimates;\\n    }\\n\\n    function _withdrawAll() internal override {\\n        crvRewards.withdrawAllAndUnwrap(true);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        crvRewards.withdrawAndUnwrap(_amount, true);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return IERC20(address(crvRewards)).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x21bbd1081ee8942193bdfe4facf5052d2cafda8677d2d9f470b351258a55aa49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063689538e71161010f578063c1a3d44c116100a2578063f106845411610071578063f106845414610581578063f77c479114610589578063f887ea4014610591578063f975bcce14610599576101e5565b8063c1a3d44c14610533578063d0e30db01461053b578063dd0081c714610543578063ef9e23791461054b576101e5565b8063853828b6116100de578063853828b614610513578063923c1d611461051b5780639f67679e14610523578063b6bff2951461052b576101e5565b8063689538e7146104f35780636a4874a1146104fb5780636dca5abe14610503578063722713f71461050b576101e5565b8063337da0fc1161018757806351cff8d91161015657806351cff8d91461043a5780635a3874ac146104605780635d14b06f146104685780635f349a11146104d6576101e5565b8063337da0fc146103e25780633fc8cef3146103ff578063481c6a751461040757806348677dbe1461040f576101e5565b80631dd19cb4116101c35780631dd19cb4146102d95780631f1fcd51146102e35780632d16c4e3146103075780632e1a7d4d146103c5576101e5565b806306fdde03146101ea5780631158808614610267578063185881ec14610281575b600080fd5b6101f26105a1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022c578181015183820152602001610214565b50505050905090810190601f1680156102595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026f61062f565b60408051918252519081900360200190f35b6102896106cf565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c55781810151838201526020016102ad565b505050509050019250505060405180910390f35b6102e1611ba5565b005b6102eb611c6f565b604080516001600160a01b039092168252519081900360200190f35b6102e16004803603604081101561031d57600080fd5b810190602081018135600160201b81111561033757600080fd5b82018360208201111561034957600080fd5b803590602001918460208302840111600160201b8311171561036a57600080fd5b919390929091602081019035600160201b81111561038757600080fd5b82018360208201111561039957600080fd5b803590602001918460208302840111600160201b831117156103ba57600080fd5b509092509050611c93565b6102e1600480360360208110156103db57600080fd5b5035611eb9565b6102e1600480360360208110156103f857600080fd5b5035611fb1565b6102eb6120bb565b6102eb6120df565b610417612103565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102e16004803603602081101561045057600080fd5b50356001600160a01b0316612652565b6102eb6127df565b6102e16004803603602081101561047e57600080fd5b810190602081018135600160201b81111561049857600080fd5b8201836020820111156104aa57600080fd5b803590602001918460208302840111600160201b831117156104cb57600080fd5b509092509050612803565b6102eb600480360360208110156104ec57600080fd5b5035612878565b6102eb61289f565b6102eb6128c3565b6102eb6128e7565b61026f61290b565b6102e161292b565b6102eb612a92565b6102eb612ab6565b6102eb612ada565b61026f612afe565b6102e1612b6d565b61026f612be0565b6102e16004803603606081101561056157600080fd5b506001600160a01b03813581169160208101359091169060400135612be6565b61026f612cde565b6102eb612d02565b6102eb612d26565b6102eb612d35565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106275780601f106105fc57610100808354040283529160200191610627565b820191906000526020600020905b81548152906001019060200180831161060a57829003601f168201915b505050505081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d60208110156106c857600080fd5b5051905090565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561072c57600080fd5b505afa158015610740573d6000803e3d6000fd5b505050506040513d602081101561075657600080fd5b505190506060610767826005612e85565b67ffffffffffffffff8111801561077d57600080fd5b506040519080825280602002602001820160405280156107a7578160200160208202803683370190505b50604080516002808252606080830184529394509091602083019080368337019050509050606060006108cf7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bdaeac16040518163ffffffff1660e01b815260040160206040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d602081101561085657600080fd5b505160408051633e032a3b60e01b815290516001600160a01b0390921691633e032a3b91600480820192602092909190829003018186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d60208110156108c457600080fd5b505161271090612ee8565b905060007f00000000000000000000000000000000000000000000000000000000000000008460008151811061090157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008460018151811061094f57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600260009054906101000a90046001600160a01b03166001600160a01b031663d06ca61f610c6d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d6020811015610a1957600080fd5b50516040805163553a731160e11b81529051610c6791610bd191610b46916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163aa74e62291600480820192602092909190829003018186803b158015610a8857600080fd5b505afa158015610a9c573d6000803e3d6000fd5b505050506040513d6020811015610ab257600080fd5b5051604080516318160ddd60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b158015610b1457600080fd5b505afa158015610b28573d6000803e3d6000fd5b505050506040513d6020811015610b3e57600080fd5b505190612f2a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9f57600080fd5b505afa158015610bb3573d6000803e3d6000fd5b505050506040513d6020811015610bc957600080fd5b505190612ee8565b604080516246613160e11b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691628cc262916024808301926020929190829003018186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d6020811015610c5f57600080fd5b505190612f6c565b90612f2a565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610cc3578181015183820152602001610cab565b50505050905001935050505060006040518083038186803b158015610ce757600080fd5b505afa158015610cfb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d2457600080fd5b8101908080516040519392919084600160201b821115610d4357600080fd5b908301906020820185811115610d5857600080fd5b82518660208202830111600160201b82111715610d7457600080fd5b82525081516020918201928201910280838360005b83811015610da1578181015183820152602001610d89565b505050509050016040525050509250610ddd612710610c678486600181518110610dc757fe5b6020026020010151612f6c90919063ffffffff16565b85600081518110610dea57fe5b60200260200101818152505084600081518110610e0357fe5b602090810291909101015101851561123e5760005b8681101561123c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c35446826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610e8457600080fd5b505afa158015610e98573d6000803e3d6000fd5b505050506040513d6020811015610eae57600080fd5b50516040805163f7c618c160e01b815290516001600160a01b039092169163f7c618c191600480820192602092909190829003018186803b158015610ef257600080fd5b505afa158015610f06573d6000803e3d6000fd5b505050506040513d6020811015610f1c57600080fd5b505185518690600090610f2b57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000085600181518110610f7957fe5b6001600160a01b0392831660209182029290920181019190915260025460408051632061aa2360e11b81526004810186905290519184169363d06ca61f937f0000000000000000000000000000000000000000000000000000000000000000909116926340c35446926024808201939291829003018186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d602081101561102857600080fd5b5051604080516246613160e11b815230600482015290516001600160a01b0390921691628cc26291602480820192602092909190829003018186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d602081101561109a57600080fd5b5051604080516001600160e01b031960e085901b16815260048101838152602482019283528a5160448301528a518b939192606401906020858101910280838360005b838110156110f55781810151838201526020016110dd565b50505050905001935050505060006040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561115657600080fd5b8101908080516040519392919084600160201b82111561117557600080fd5b90830190602082018581111561118a57600080fd5b82518660208202830111600160201b821117156111a657600080fd5b82525081516020918201928201910280838360005b838110156111d35781810151838201526020016111bb565b5050505090500160405250505093506111f9612710610c678587600181518110610dc757fe5b86826001018151811061120857fe5b60200260200101818152505085816001018151811061122357fe5b6020026020010151820191508080600101915050610e18565b505b7f00000000000000000000000000000000000000000000000000000000000000008460008151811061126c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000846001815181106112ba57fe5b6001600160a01b03928316602091820292909201810191909152600254604080516246613160e11b815230600482015290519184169363d06ca61f937f000000000000000000000000000000000000000000000000000000000000000090911692628cc262926024808201939291829003018186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d602081101561136657600080fd5b5051604080516001600160e01b031960e085901b16815260048101838152602482019283528951604483015289518a939192606401906020858101910280838360005b838110156113c15781810151838201526020016113a9565b50505050905001935050505060006040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561142257600080fd5b8101908080516040519392919084600160201b82111561144157600080fd5b90830190602082018581111561145657600080fd5b82518660208202830111600160201b8211171561147257600080fd5b82525081516020918201928201910280838360005b8381101561149f578181015183820152602001611487565b5050505090500160405250505092506114c5612710610c678486600181518110610dc757fe5b8587600101815181106114d457fe5b6020026020010181815250508486600101815181106114ef57fe5b6020026020010151810190507f00000000000000000000000000000000000000000000000000000000000000008460008151811061152957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f021b0e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a257600080fd5b505afa1580156115b6573d6000803e3d6000fd5b505050506040513d60208110156115cc57600080fd5b50518451859060019081106115dd57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001808154811061160a57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663d06ca61f6116cb612710610c677f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc32d1766040518163ffffffff1660e01b815260040160206040518083038186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d60208110156116c257600080fd5b50518690612f6c565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611721578181015183820152602001611709565b50505050905001935050505060006040518083038186803b15801561174557600080fd5b505afa158015611759573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561178257600080fd5b8101908080516040519392919084600160201b8211156117a157600080fd5b9083019060208201858111156117b657600080fd5b82518660208202830111600160201b821117156117d257600080fd5b82525081516020918201928201910280838360005b838110156117ff5781810151838201526020016117e7565b505050509050016040525050509250611825612710610c678486600181518110610dc757fe5b85876002018151811061183457fe5b602002602001018181525050600061184a612103565b5090507f00000000000000000000000000000000000000000000000000000000000000008560008151811061187b57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106118a957fe5b6001600160a01b039283166020918202929092010152600254855191169063d06ca61f9086906000906118d857fe5b60200260200101518403876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611938578181015183820152602001611920565b50505050905001935050505060006040518083038186803b15801561195c57600080fd5b505afa158015611970573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561199957600080fd5b8101908080516040519392919084600160201b8211156119b857600080fd5b9083019060208201858111156119cd57600080fd5b82518660208202830111600160201b821117156119e957600080fd5b82525081516020918201928201910280838360005b83811015611a165781810151838201526020016119fe565b505050509050016040525050509350611a3c612710610c678587600181518110610dc757fe5b868860030181518110611a4b57fe5b602002602001018181525050611b7f612710610c6785611b797f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015611abd57600080fd5b505afa158015611ad1573d6000803e3d6000fd5b505050506040513d6020811015611ae757600080fd5b50516040805163313ce56760e01b81529051610c67916001600160a01b038a169163313ce56791600480820192602092909190829003018186803b158015611b2e57600080fd5b505afa158015611b42573d6000803e3d6000fd5b505050506040513d6020811015611b5857600080fd5b50518b5160129190910360ff908116600a0a16908c906001908110610dc757fe5b90612f6c565b868860040181518110611b8e57fe5b602090810291909101015250939550505050505090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c10576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611c6d7f0000000000000000000000000000000000000000000000000000000000000000611c3c612afe565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fc5565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015611cec57600080fd5b505afa158015611d00573d6000803e3d6000fd5b505050506040513d6020811015611d1657600080fd5b50516001600160a01b03163314611d62576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b611d6e60018585614438565b5083836000818110611d7c57fe5b6002805460209290920293909301356001600160a01b03166001600160a01b0319909116179091555060008382825b82811015611eaf57878782818110611dbf57fe5b905060200201356001600160a01b03169350611e108460007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612d599092919063ffffffff16565b611e466001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685600019612d59565b60005b82811015611ea657611e8b856000898985818110611e6357fe5b905060200201356001600160a01b03166001600160a01b0316612d599092919063ffffffff16565b611e9e85600019898985818110611e6357fe5b600101611e49565b50600101611dab565b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f24576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6000611f2e612afe565b905081811015611f5957611f4a611f458383612ee8565b613017565b9150611f568282612e85565b91505b611fad6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612fc5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d602081101561203457600080fd5b50516001600160a01b03163314612080576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b6001818154811061208d57fe5b600091825260209091200154600280546001600160a01b0319166001600160a01b0390921691909117905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634903b0d160006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561216d57600080fd5b505afa158015612181573d6000803e3d6000fd5b505050506040513d602081101561219757600080fd5b50516040805163c661065760e01b8152600160048201529051919250600091612320916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c661065791602480820192602092909190829003018186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d602081101561223557600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b15801561227957600080fd5b505afa15801561228d573d6000803e3d6000fd5b505050506040513d60208110156122a357600080fd5b505160408051634903b0d160e01b815260016004820152905160ff90921691610c6791670de0b6b3a7640000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691634903b0d1916024808301926020929190829003018186803b158015610c3557600080fd5b9050600061239264e8d4a510007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634903b0d160026040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c3557600080fd5b90508183111580156123a45750808311155b15612449577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c661065760006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561240e57600080fd5b505afa158015612422573d6000803e3d6000fd5b505050506040513d602081101561243857600080fd5b505194506000935061264e92505050565b8282111580156124595750808211155b156124fe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c661065760016040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156124c357600080fd5b505afa1580156124d7573d6000803e3d6000fd5b505050506040513d60208110156124ed57600080fd5b505194506001935061264e92505050565b82811115801561250e5750818111155b156125b3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c661065760026040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561257857600080fd5b505afa15801561258c573d6000803e3d6000fd5b505050506040513d60208110156125a257600080fd5b505194506002935061264e92505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c661065760006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561261857600080fd5b505afa15801561262c573d6000803e3d6000fd5b505050506040513d602081101561264257600080fd5b50519450600093505050505b9091565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126bd576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316141561272d576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561277857600080fd5b505afa15801561278c573d6000803e3d6000fd5b505050506040513d60208110156127a257600080fd5b505190506127da6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083612fc5565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461286e576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611fad828261316d565b6001818154811061288557fe5b6000918252602090912001546001600160a01b0316905081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061292661291861062f565b612920612afe565b90612e85565b905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612996576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b61299e6135bb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a0d57600080fd5b505afa158015612a21573d6000803e3d6000fd5b505050506040513d6020811015612a3757600080fd5b50519050612a8f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612fc5565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561069e57600080fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612bd8576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611c6d61363d565b61271081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3f57600080fd5b505afa158015612c53573d6000803e3d6000fd5b505050506040513d6020811015612c6957600080fd5b50516001600160a01b03163314612cb5576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b612cca6001600160a01b038416836000612d59565b6127da6001600160a01b0384168383612d59565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580612ddf575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612db157600080fd5b505afa158015612dc5573d6000803e3d6000fd5b505050506040513d6020811015612ddb57600080fd5b5051155b612e1a5760405162461bcd60e51b81526004018080602001828103825260368152602001806145686036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526127da908490613706565b6060612e7b84846000856137b7565b90505b9392505050565b600082820183811015612edf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000612edf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613913565b6000612edf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506139aa565b600082612f7b57506000612ee2565b82820282848281612f8857fe5b0414612edf5760405162461bcd60e51b815260040180806020018281038252602181526020018061451d6021913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526127da908490613706565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561308757600080fd5b505afa15801561309b573d6000803e3d6000fd5b505050506040513d60208110156130b157600080fd5b505190506130be83613a0f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561312d57600080fd5b505afa158015613141573d6000803e3d6000fd5b505050506040513d602081101561315757600080fd5b505190506131658183612ee8565b949350505050565b613175613aa9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156131e457600080fd5b505afa1580156131f8573d6000803e3d6000fd5b505050506040513d602081101561320e57600080fd5b505190508015613277576132777f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000838686600081811061326b57fe5b90506020020135613b18565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b1580156132d257600080fd5b505afa1580156132e6573d6000803e3d6000fd5b505050506040513d60208110156132fc57600080fd5b5051905060005b818110156134ca5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c35446836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561337157600080fd5b505afa158015613385573d6000803e3d6000fd5b505050506040513d602081101561339b57600080fd5b50516040805163f7c618c160e01b815290516001600160a01b039092169163f7c618c191600480820192602092909190829003018186803b1580156133df57600080fd5b505afa1580156133f3573d6000803e3d6000fd5b505050506040513d602081101561340957600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561345757600080fd5b505afa15801561346b573d6000803e3d6000fd5b505050506040513d602081101561348157600080fd5b5051905080156134c0576134c0827f0000000000000000000000000000000000000000000000000000000000000000838a8a8860010181811061326b57fe5b5050600101613303565b5060006135247f000000000000000000000000000000000000000000000000000000000000000086868560010181811061350057fe5b9050602002013587878660020181811061351657fe5b905060200201356001613c57565b905080156135b4576000613536612103565b50905061356e7f0000000000000000000000000000000000000000000000000000000000000000828489898860030181811061326b57fe5b61358c86868560040181811061358057fe5b90506020020135613fc6565b6135aa86868560040181811061359e57fe5b9050602002013561410d565b6135b261363d565b505b5050505050565b604080516324f81cd160e11b81526001600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916349f039a291602480830192600092919082900301818387803b15801561362357600080fd5b505af1158015613637573d6000803e3d6000fd5b50505050565b6000613647612afe565b1115611c6d576040805163303acfe760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001602482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916360759fce9160448083019260209291908290030181600087803b1580156136dc57600080fd5b505af11580156136f0573d6000803e3d6000fd5b505050506040513d6020811015611fad57600080fd5b606061375b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e6c9092919063ffffffff16565b8051909150156127da5780806020019051602081101561377a57600080fd5b50516127da5760405162461bcd60e51b815260040180806020018281038252602a81526020018061453e602a913960400191505060405180910390fd5b6060824710156137f85760405162461bcd60e51b81526004018080602001828103825260268152602001806144f76026913960400191505060405180910390fd5b61380185614254565b613852576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106138915780518252601f199092019160209182019101613872565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146138f3576040519150601f19603f3d011682016040523d82523d6000602084013e6138f8565b606091505b509150915061390882828661425a565b979650505050505050565b600081848411156139a25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561396757818101518382015260200161394f565b50505050905090810190601f1680156139945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836139f95760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561396757818101518382015260200161394f565b506000838581613a0557fe5b0495945050505050565b60408051636197390160e11b8152600481018390526001602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c32e72029160448083019260209291908290030181600087803b158015613a7f57600080fd5b505af1158015613a93573d6000803e3d6000fd5b505050506040513d60208110156127da57600080fd5b60408051637050ccd960e01b81523060048201526001602482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691637050ccd99160448083019260209291908290030181600087803b1580156136dc57600080fd5b60408051600280825260608083018452926020830190803683370190505090508481600081518110613b4657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110613b7457fe5b6001600160a01b039283166020918202929092018101919091526002546040516338ed173960e01b8152600481018781526024820187905230606483018190526402540be4006084840181905260a060448501908152885160a4860152885195909716966338ed1739968b968b968b96939260c490910191878201910280838360005b83811015613c0f578181015183820152602001613bf7565b505050509050019650505050505050600060405180830381600087803b158015613c3857600080fd5b505af1158015613c4c573d6000803e3d6000fd5b505050505050505050565b600080856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613ca757600080fd5b505afa158015613cbb573d6000803e3d6000fd5b505050506040513d6020811015613cd157600080fd5b50519050613d01867f00000000000000000000000000000000000000000000000000000000000000008388613b18565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015613d6757600080fd5b505afa158015613d7b573d6000803e3d6000fd5b505050506040513d6020811015613d9157600080fd5b505191508115613fbd5760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da633d316040518163ffffffff1660e01b815260040160606040518083038186803b158015613df957600080fd5b505afa158015613e0d573d6000803e3d6000fd5b505050506040513d6060811015613e2357600080fd5b5080516020820151604090920151909450909250905060008115801590613e5257506001600160a01b03831615155b15613f2457613e67612710610c678885612f6c565b9050613e967f000000000000000000000000000000000000000000000000000000000000000085838b8b6142c0565b613f2483856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613ee757600080fd5b505afa158015613efb573d6000803e3d6000fd5b505050506040513d6020811015613f1157600080fd5b50516001600160a01b0387169190612fc5565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015613f8a57600080fd5b505afa158015613f9e573d6000803e3d6000fd5b505050506040513d6020811015613fb457600080fd5b50519550505050505b50949350505050565b613fce61449b565b600080613fd9612103565b91509150816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561402a57600080fd5b505afa15801561403e573d6000803e3d6000fd5b505050506040513d602081101561405457600080fd5b505183826003811061406257fe5b6020020152604051634515cef360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390859087906004018083606080838360005b838110156140ce5781810151838201526020016140b6565b5050505090500182815260200192505050600060405180830381600087803b1580156140f957600080fd5b505af1158015611eaf573d6000803e3d6000fd5b6141156144b9565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561417b57600080fd5b505afa15801561418f573d6000803e3d6000fd5b505050506040513d60208110156141a557600080fd5b5051602082015260408051630b4c7e4d60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691630b4c7e4d9184918691600401908190849080838360005b838110156142155781810151838201526020016141fd565b5050505090500182815260200192505050600060405180830381600087803b15801561424057600080fd5b505af11580156135b2573d6000803e3d6000fd5b3b151590565b60608315614269575081612e7e565b8251156142795782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561396757818101518382015260200161394f565b604080516002808252606080830184529260208301908036833701905050905085816000815181106142ee57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061431c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001828154811061434957fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166338ed1739858584306402540be4006040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156143ef5781810151838201526020016143d7565b505050509050019650505050505050600060405180830381600087803b15801561441857600080fd5b505af115801561442c573d6000803e3d6000fd5b50505050505050505050565b82805482825590600052602060002090810192821561448b579160200282015b8281111561448b5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614458565b506144979291506144d7565b5090565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b5b808211156144975780546001600160a01b03191681556001016144d856fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220f0dcb7f36f594866b5232d35a1994291257f9e5819dae5c55259ac994a78e5ac64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "constructor": {
        "params": {
          "_controller": "The address of the controller",
          "_convexVault": "The address of the convex vault",
          "_crv": "The address of CRV",
          "_crv3": "The address of 3CRV",
          "_cvx": "The address of CVX",
          "_manager": "The address of the manager",
          "_mim": "The address of MIM",
          "_name": "The strategy name",
          "_pid": "The pool id of convex",
          "_routerArray": "The address array of routers for swapping tokens",
          "_stableSwap2Pool": "The address of the stable swap pool",
          "_stableSwap3Pool": "The address of the 3CRV pool",
          "_want": "The desired token of the strategy",
          "_weth": "The address of WETH"
        }
      },
      "setDefaultRouter(uint256)": {
        "params": {
          "_routerIndex": "Gets the address of the router from routerArray"
        }
      },
      "setRouter(address[],address[])": {
        "params": {
          "_routerArray": "The addresses of routers",
          "_tokenArray": "The addresses of tokens that need to be approved by the strategy"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest(uint256[])": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setDefaultRouter(uint256)": {
        "notice": "Sets the default ISwap-compatible router"
      },
      "setRouter(address[],address[])": {
        "notice": "Sets the address of the ISwap-compatible router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18037,
        "contract": "contracts/v3/strategies/MIMConvexStrategy.sol:MIMConvexStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 18040,
        "contract": "contracts/v3/strategies/MIMConvexStrategy.sol:MIMConvexStrategy",
        "label": "routerArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18043,
        "contract": "contracts/v3/strategies/MIMConvexStrategy.sol:MIMConvexStrategy",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwap)17380"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISwap)17380": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}