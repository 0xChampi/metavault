{
  "address": "0x17DaBf367D9461302Fd5F8bd22cC15694151A702",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_t3crv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "contract Gauge",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "contract Mintr",
          "name": "_crvMintr",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "_stableSwap3Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvMintr",
      "outputs": [
        {
          "internalType": "contract Mintr",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract Gauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMostPremium",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Uni",
          "name": "_unirouter",
          "type": "address"
        }
      ],
      "name": "setUnirouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwap3Pool",
      "outputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "t3crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unirouter",
      "outputs": [
        {
          "internalType": "contract Uni",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x17DaBf367D9461302Fd5F8bd22cC15694151A702",
    "transactionIndex": 5,
    "gasUsed": "2921181",
    "logsBloom": "0x0000000000000000000001000000000000000000000000000001000000000000000000000000000000000000000800000000000000000000000000000020000000000000000000000000000000000000000100800000000000040000000002000000000004000000000000000000000000000000000000000000002000000000400002000000000000400000200000002020000000000000000000000000000002000000000000000200000000800000000020200000000000000000000000000000000000000000000000000001040000000000028000000000000000002000001000000000000000020000000400a000000000000200000000000100000000",
    "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30",
    "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0x47D7169F3225CDd461fA82E954b1A3C28E3ce626",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0x07A0D425B0d67e38EE041e280F70f0250491764b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x00000000000000000000000048f40672feece8c999ca745219de2549c351c47a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0x27793C6F8fdB370DA02786c0A1c47F7A0877bD67",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0xd7a4281A3D0C464c9d995d068FC7F486c1e0a5AB",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x000000000000000000000000e8f55b11c0fa40b69e32fe11c6c86d39508c08bd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0xfC121274EDA82a438D56d9B059C42F9363945fc9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x000000000000000000000000e8f55b11c0fa40b69e32fe11c6c86d39508c08bd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0x2dc265244CE729802ca1122A408F6728D2422D28",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x000000000000000000000000e8f55b11c0fa40b69e32fe11c6c86d39508c08bd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22894236,
        "transactionHash": "0x5509d62895feb3890d22db12bf71795338a4f7d5dc5df5bdcf5fa9c5d5b541af",
        "address": "0x07A0D425B0d67e38EE041e280F70f0250491764b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000017dabf367d9461302fd5f8bd22cc15694151a702",
          "0x000000000000000000000000e8f55b11c0fa40b69e32fe11c6c86d39508c08bd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 13,
        "blockHash": "0x4b43735b8e4185b6a24dcd17728c5904f8f284dd77480d9d41ac232c2dcefb30"
      }
    ],
    "blockNumber": 22894236,
    "cumulativeGasUsed": "3663480",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x07A0D425B0d67e38EE041e280F70f0250491764b",
    "0x27793C6F8fdB370DA02786c0A1c47F7A0877bD67",
    "0x47D7169F3225CDd461fA82E954b1A3C28E3ce626",
    "0x07A0D425B0d67e38EE041e280F70f0250491764b",
    "0xd7a4281A3D0C464c9d995d068FC7F486c1e0a5AB",
    "0xfC121274EDA82a438D56d9B059C42F9363945fc9",
    "0x2dc265244CE729802ca1122A408F6728D2422D28",
    "0x48F40672FeEcE8c999cA745219dE2549C351C47A",
    "0x768657A2e88a3CA5e9971981B60834931d476fd5",
    "0xe8f55b11c0fa40b69E32FE11C6C86D39508c08BD",
    "0x89a89e57d96B8A85bCa7D4D57e232f470Db1DEB2",
    "0x17141f7D01835B675dCE47C7c02Ad48607FCF14D"
  ],
  "solcInputHash": "bc3511bdeb2de45e5dcb5fa98f27c79c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_t3crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"contract Gauge\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"contract Mintr\",\"name\":\"_crvMintr\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"_stableSwap3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvMintr\",\"outputs\":[{\"internalType\":\"contract Mintr\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract Gauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Uni\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwap3Pool\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"contract Uni\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"setController(address)\":{\"params\":{\"_controller\":\"The address of the controller\"}},\"setUnirouter(address)\":{\"params\":{\"_unirouter\":\"The address of the router\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest()\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setController(address)\":{\"notice\":\"Sets the address of the controller\"},\"setUnirouter(address)\":{\"notice\":\"Sets the address of the Uniswap Router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/strategies/StrategyCurve3Crv.sol\":\"StrategyCurve3Crv\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/interfaces/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface Balancer {\\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        address tokenOut,\\n        uint minAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint maxAmountIn,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    ) external returns (uint poolAmountOut);\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    ) external returns (uint tokenAmountOut);\\n}\\n\",\"keccak256\":\"0x9322afaa4c29354a18b744d2389c3d5300aeca9e2a9db56b79e4a59872d0ef73\",\"license\":\"MIT\"},\"contracts/interfaces/Gauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface Gauge {\\n    function deposit(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function withdraw(uint) external;\\n    function claimable_tokens(address) external view returns (uint);\\n}\\n\\ninterface Mintr {\\n    function mint(address) external;\\n}\\n\",\"keccak256\":\"0x2576f3952cd5a682376e9edd8fec5c1ad1726f2fb4913a29336049eefe34a53d\",\"license\":\"MIT\"},\"contracts/interfaces/Uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface Uni {\\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\\n}\\n\",\"keccak256\":\"0x5dd2b0b1b635ccd1a1fc358daf861f68718e1f938604314e2bf1db233e4867be\",\"license\":\"MIT\"},\"contracts/metavault/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x34677b3f7fc870d4738321e11c0395054e0c995100878ff628e681e41b7ce199\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x913b50315c2ef2d41e44e36802e2db0e11a664e76cc232f5496da7d4efde4e5b\",\"license\":\"MIT\"},\"contracts/metavault/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest() external;\\n    function skim() external;\\n    function want() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf4c1f571434bfcb0929b1890e7838f8427395d03057e553d63108e71a1ca5fd3\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../../interfaces/Uniswap.sol\\\";\\n\\nimport \\\"../IStableSwap3Pool.sol\\\";\\nimport \\\"../IVaultManager.sol\\\";\\nimport \\\"../IStrategy.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable weth;\\n    address public controller;\\n    IVaultManager public vaultManager;\\n    Uni public unirouter = Uni(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _vaultManager The address of the vaultManager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     */\\n    constructor(\\n        address _controller,\\n        address _vaultManager,\\n        address _want,\\n        address _weth\\n    ) public {\\n        want = _want;\\n        controller = _controller;\\n        vaultManager = IVaultManager(_vaultManager);\\n        weth = _weth;\\n        IERC20(_weth).safeApprove(address(unirouter), type(uint256).max);\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(IERC20 _token, address _spender, uint256 _amount) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the controller\\n     * @param _controller The address of the controller\\n     */\\n    function setController(address _controller) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the Uniswap Router\\n     * @param _unirouter The address of the router\\n     */\\n    function setUnirouter(Uni _unirouter) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        unirouter = _unirouter;\\n    }\\n\\n    /**\\n     * AUTHORIZED-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit() external override onlyAuthorized {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest() external override onlyAuthorized {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim() external override onlyAuthorized {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(address _asset) external override onlyAuthorized {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external override onlyAuthorized {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        address _token = _vaultWant();\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll() external override onlyAuthorized returns (uint256 _balance) {\\n        _withdrawAll();\\n\\n        address _token = _vaultWant();\\n        _balance = IERC20(_token).balanceOf(address(this));\\n\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf() external override view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool() public view override virtual returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant() public view override returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit() internal virtual;\\n\\n    function _harvest() internal virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken\\n    ) internal returns (uint256 _wethBal) {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yax,\\n                address stakingPool,\\n                uint256 stakingPoolShareFee,\\n                address treasury,\\n                uint256 treasuryFee,\\n                address insurance,\\n                uint256 insurancePoolFee\\n            ) = vaultManager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the staking pool with YAX\\n            if (stakingPoolShareFee > 0 && stakingPool != address(0)) {\\n                _fee = _wethBal.mul(stakingPoolShareFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(stakingPool, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(treasury, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the insurance pool with YAX\\n            if (insurancePoolFee > 0 && insurance != address(0)) {\\n                _fee = _wethBal.mul(insurancePoolFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(insurance, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokens(address _input, address _output, uint256 _amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        unirouter.swapExactTokensForTokens(\\n            _amount,\\n            1,\\n            path,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp.add(1800)\\n        );\\n    }\\n\\n    function _vaultWant() internal returns (address) {\\n        return IController(controller).strategyTokens(address(this));\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _withdrawAll() internal virtual;\\n\\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\\n        address _token = _vaultWant();\\n        uint256 _before = IERC20(_token).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(_token).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == controller\\n             || msg.sender == vaultManager.strategist()\\n             || msg.sender == vaultManager.governance(),\\n             \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xce7cf049c3038cb200033b5419203072517fb973b58979d09baad934cd0adfea\",\"license\":\"MIT\"},\"contracts/metavault/strategies/StrategyCurve3Crv.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../interfaces/Gauge.sol\\\";\\nimport \\\"../../interfaces/Uniswap.sol\\\";\\nimport \\\"../../interfaces/Balancer.sol\\\";\\n\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyCurve3Crv is BaseStrategy {\\n    // used for Crv -> weth -> [dai/usdc/usdt] -> 3crv route\\n    address public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    address public t3crv = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n    // for add_liquidity via curve.fi to get back 3CRV (use getMostPremium() for the best stable coin used in the route)\\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    address public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    Mintr public crvMintr = Mintr(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\\n    IStableSwap3Pool public stableSwap3Pool = IStableSwap3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n\\n    Gauge public gauge = Gauge(0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A); // 3Crv Gauge\\n\\n    constructor(\\n        address _want,\\n        address _crv,\\n        address _weth,\\n        address _t3crv,\\n        address _dai,\\n        address _usdc,\\n        address _usdt,\\n        Gauge _gauge,\\n        Mintr _crvMintr,\\n        IStableSwap3Pool _stableSwap3Pool,\\n        address _controller,\\n        address _vaultManager\\n    )\\n        public\\n        BaseStrategy(_controller, _vaultManager, _want, _weth)\\n    {\\n        if (_crv != address(0)) crv = _crv;\\n        if (_t3crv != address(0)) t3crv = _t3crv;\\n        if (_dai != address(0)) dai = _dai;\\n        if (_usdc != address(0)) usdc = _usdc;\\n        if (_usdt != address(0)) usdt = _usdt;\\n        if (address(_stableSwap3Pool) != address(0)) stableSwap3Pool = _stableSwap3Pool;\\n        if (address(_gauge) != address(0)) gauge = _gauge;\\n        if (address(_crvMintr) != address(0)) crvMintr = _crvMintr;\\n        IERC20(_want).safeApprove(address(gauge), type(uint256).max);\\n        IERC20(crv).safeApprove(address(unirouter), type(uint256).max);\\n        IERC20(dai).safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        IERC20(usdc).safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        IERC20(usdt).safeApprove(address(stableSwap3Pool), type(uint256).max);\\n        IERC20(t3crv).safeApprove(address(stableSwap3Pool), type(uint256).max);\\n    }\\n\\n    function _deposit() internal override {\\n        uint256 _wantBal = balanceOfWant();\\n        if (_wantBal > 0) {\\n            // deposit [want] to Gauge\\n            gauge.deposit(_wantBal);\\n        }\\n    }\\n\\n    function _claimReward() internal {\\n        crvMintr.mint(address(gauge));\\n    }\\n\\n    function _addLiquidity() internal {\\n        uint256[3] memory amounts;\\n        amounts[0] = IERC20(dai).balanceOf(address(this));\\n        amounts[1] = IERC20(usdc).balanceOf(address(this));\\n        amounts[2] = IERC20(usdt).balanceOf(address(this));\\n        stableSwap3Pool.add_liquidity(amounts, 1);\\n    }\\n\\n    function getMostPremium() public view returns (address, uint256) {\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = stableSwap3Pool.balances(0); // DAI\\n        balances[1] = stableSwap3Pool.balances(1).mul(10**12); // USDC\\n        balances[2] = stableSwap3Pool.balances(2).mul(10**12); // USDT\\n\\n        if (balances[0] < balances[1] && balances[0] < balances[2]) { // DAI\\n            return (dai, 0);\\n        }\\n\\n        if (balances[1] < balances[0] && balances[1] < balances[2]) { // USDC\\n            return (usdc, 1);\\n        }\\n\\n        if (balances[2] < balances[0] && balances[2] < balances[1]) { // USDT\\n            return (usdt, 2);\\n        }\\n\\n        return (dai, 0); // If they're somehow equal, we just want DAI\\n    }\\n\\n    function _harvest() internal override {\\n        _claimReward();\\n        uint256 _remainingWeth = _payHarvestFees(crv);\\n\\n        if (_remainingWeth > 0) {\\n            (address _stableCoin,) = getMostPremium(); // stablecoin we want to convert to\\n            _swapTokens(weth, _stableCoin, _remainingWeth);\\n            _addLiquidity();\\n\\n            if (balanceOfWant() > 0) {\\n                _deposit();\\n            }\\n        }\\n    }\\n\\n    function _withdrawAll() internal override {\\n        uint256 _bal = gauge.balanceOf(address(this));\\n        _withdraw(_bal);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        gauge.withdraw(_amount);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint) {\\n        return gauge.balanceOf(address(this));\\n    }\\n\\n    function claimableTokens() external view returns (uint) {\\n        return gauge.claimable_tokens(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4dea95bb422df70ef797fbeef96da4e8b40eaddccdbb58a80e51f3e3961e0b03\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600280546001600160a01b0319908116737a250d5630b4cf539739df2c5dacb4c659f2488d1790915560038054821673d533a949740bb3306d119cc777fa900ba034cd52179055600480548216736c3f90f043a72fa612cbac8115ee7e52bde6e490179055600580548216736b175474e89094c44da98b954eedeac495271d0f17905560068054821673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4817905560078054821673dac17f958d2ee523a2206206994597c13d831ec717905560088054821673d061d61a4d941c39e5453435b6345dc261c2fce017905560098054821673bebc44782c7db0a1a60cb6fe97d0b483032ff1c7179055600a805490911673bfcf63294ad7105dea65aa58f8ae5be2d9d0952a1790553480156200012b57600080fd5b50604051620035183803806200351883398181016040526101808110156200015257600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505081818d8c816001600160a01b03166080816001600160a01b031660601b81525050836000806101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b031660a0816001600160a01b031660601b8152505062000298600260009054906101000a90046001600160a01b0316600019836001600160a01b03166200051960201b62001814179092919060201c565b505050506001600160a01b038b1615620002c857600380546001600160a01b0319166001600160a01b038d161790555b6001600160a01b03891615620002f457600480546001600160a01b0319166001600160a01b038b161790555b6001600160a01b038816156200032057600580546001600160a01b0319166001600160a01b038a161790555b6001600160a01b038716156200034c57600680546001600160a01b0319166001600160a01b0389161790555b6001600160a01b038616156200037857600780546001600160a01b0319166001600160a01b0388161790555b6001600160a01b03831615620003a457600980546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03851615620003d057600a80546001600160a01b0319166001600160a01b0387161790555b6001600160a01b03841615620003fc57600880546001600160a01b0319166001600160a01b0386161790555b600a5462000426906001600160a01b038e8116911660001962000519602090811b6200181417901c565b60025460035462000453916001600160a01b03918216911660001962000519602090811b6200181417901c565b60095460055462000480916001600160a01b03918216911660001962000519602090811b6200181417901c565b600954600654620004ad916001600160a01b03918216911660001962000519602090811b6200181417901c565b600954600754620004da916001600160a01b03918216911660001962000519602090811b6200181417901c565b60095460045462000507916001600160a01b03918216911660001962000519602090811b6200181417901c565b5050505050505050505050506200092c565b801580620005a3575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200057357600080fd5b505afa15801562000588573d6000803e3d6000fd5b505050506040513d60208110156200059f57600080fd5b5051155b620005e05760405162461bcd60e51b8152600401808060200182810382526036815260200180620034e26036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620006389185916200063d16565b505050565b606062000699826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620006f960201b62001927179092919060201c565b8051909150156200063857808060200190516020811015620006ba57600080fd5b5051620006385760405162461bcd60e51b815260040180806020018281038252602a815260200180620034b8602a913960400191505060405180910390fd5b60606200070a848460008562000714565b90505b9392505050565b606082471015620007575760405162461bcd60e51b8152600401808060200182810382526026815260200180620034926026913960400191505060405180910390fd5b62000762856200087c565b620007b4576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620007f55780518252601f199092019160209182019101620007d4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000859576040519150601f19603f3d011682016040523d82523d6000602084013e6200085e565b606091505b5090925090506200087182828662000882565b979650505050505050565b3b151590565b60608315620008935750816200070d565b825115620008a45782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620008f0578181015183820152602001620008d6565b50505050905090810190601f1680156200091e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c612b0a62000988600039806108a85280611bf5528061216f52806121b45280612320528061240852806124b3528061254a5250806105ab52806105d65280610eee528061145a5250612b0a6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636a4874a1116100f9578063c1a3d44c11610097578063dd0081c711610071578063dd0081c71461034b578063ef9e237914610353578063f4b9fa7514610389578063f77c479114610391576101c4565b8063c1a3d44c14610315578063d0e30db01461031d578063d92f3d7314610325576101c4565b80638a4adf24116100d35780638a4adf24146102d757806392eefe9b146102df578063a6f19c8414610305578063bab8fe401461030d576101c4565b80636a4874a1146102bf578063722713f7146102c7578063853828b6146102cf576101c4565b80633e413bee1161016657806348677dbe1161014057806348677dbe1461025e57806351cff8d9146102895780635a3874ac146102af5780636948ab6f146102b7576101c4565b80633e413bee146102465780633fc8cef31461024e5780634641257d14610256576101c4565b80631f1fcd51116101a25780631f1fcd5114610211578063257ae0de146102195780632e1a7d4d146102215780632f48ab7d1461023e576101c4565b8063017f3987146101c957806311588086146101ed5780631dd19cb414610207575b600080fd5b6101d1610399565b604080516001600160a01b039092168252519081900360200190f35b6101f56103a8565b60408051918252519081900360200190f35b61020f610424565b005b6101d16105d4565b6101d16105f8565b61020f6004803603602081101561023757600080fd5b5035610607565b6101d1610888565b6101d1610897565b6101d16108a6565b61020f6108ca565b610266610a37565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61020f6004803603602081101561029f57600080fd5b50356001600160a01b0316610d7d565b6101d1610feb565b6101d1610ffa565b6101d1611009565b6101f5611018565b6101f5611038565b6101d1611307565b61020f600480360360208110156102f557600080fd5b50356001600160a01b0316611316565b6101d16113fc565b6101f561140b565b6101f5611456565b61020f6114c5565b61020f6004803603602081101561033b57600080fd5b50356001600160a01b0316611632565b6101f5611718565b61020f6004803603606081101561036957600080fd5b506001600160a01b0381358116916020810135909116906040013561171e565b6101d16117f6565b6101d1611805565b6008546001600160a01b031681565b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156103f357600080fd5b505afa158015610407573d6000803e3d6000fd5b505050506040513d602081101561041d57600080fd5b5051905090565b6000546001600160a01b03163314806104be5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d60208110156104b057600080fd5b50516001600160a01b031633145b8061054a5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561051257600080fd5b505afa158015610526573d6000803e3d6000fd5b505050506040513d602081101561053c57600080fd5b50516001600160a01b031633145b610589576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6000546105d2906001600160a01b03166105a1611456565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611940565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b6000546001600160a01b03163314806106a15750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d602081101561069357600080fd5b50516001600160a01b031633145b8061072d5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d602081101561071f57600080fd5b50516001600160a01b031633145b61076c576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6000610776611456565b9050818110156107a15761079261078d8383611992565b6119dd565b915061079e8282611b00565b91505b60006107ab611b5a565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b1580156107fc57600080fd5b505afa158015610810573d6000803e3d6000fd5b505050506040513d602081101561082657600080fd5b505190506001600160a01b03811661086e576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6108826001600160a01b0383168286611940565b50505050565b6007546001600160a01b031681565b6006546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806109645750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d602081101561095657600080fd5b50516001600160a01b031633145b806109f05750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b857600080fd5b505afa1580156109cc573d6000803e3d6000fd5b505050506040513d60208110156109e257600080fd5b50516001600160a01b031633145b610a2f576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6105d2611bbb565b604080516003808252608082019092526000918291606091602082018380368337505060095460408051634903b0d160e01b81526000600482015290519394506001600160a01b0390911692634903b0d192506024808301926020929190829003018186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d6020811015610ad357600080fd5b505181518290600090610ae257fe5b60209081029190910181019190915260095460408051634903b0d160e01b8152600160048201529051610b739364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b505190611c40565b81600181518110610b8057fe5b60209081029190910181019190915260095460408051634903b0d160e01b8152600260048201529051610bdf9364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b158015610b4157600080fd5b81600281518110610bec57fe5b60200260200101818152505080600181518110610c0557fe5b602002602001015181600081518110610c1a57fe5b6020026020010151108015610c56575080600281518110610c3757fe5b602002602001015181600081518110610c4c57fe5b6020026020010151105b15610c725750506005546001600160a01b031690506000610d79565b80600081518110610c7f57fe5b602002602001015181600181518110610c9457fe5b6020026020010151108015610cd0575080600281518110610cb157fe5b602002602001015181600181518110610cc657fe5b6020026020010151105b15610cec5750506006546001600160a01b031690506001610d79565b80600081518110610cf957fe5b602002602001015181600281518110610d0e57fe5b6020026020010151108015610d4a575080600181518110610d2b57fe5b602002602001015181600281518110610d4057fe5b6020026020010151105b15610d665750506007546001600160a01b031690506002610d79565b50506005546001600160a01b0316905060005b9091565b6000546001600160a01b0316331480610e175750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b50516001600160a01b031633145b80610ea35750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b50516001600160a01b031633145b610ee2576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610f52576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6020811015610fc757600080fd5b5051600054909150610fe6906001600160a01b03848116911683611940565b505050565b6009546001600160a01b031681565b6004546001600160a01b031681565b6003546001600160a01b031681565b60006110336110256103a8565b61102d611456565b90611b00565b905090565b600080546001600160a01b03163314806110d35750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561109b57600080fd5b505afa1580156110af573d6000803e3d6000fd5b505050506040513d60208110156110c557600080fd5b50516001600160a01b031633145b8061115f5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d602081101561115157600080fd5b50516001600160a01b031633145b61119e576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6111a6611c99565b60006111b0611b5a565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d602081101561122957600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b505190506001600160a01b0381166112ee576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6113026001600160a01b0383168285611940565b505090565b6001546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b505050506040513d602081101561138e57600080fd5b50516001600160a01b031633146113da576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b600a5460408051633313458360e01b815230600482015290516000926001600160a01b0316916333134583916024808301926020929190829003018186803b1580156103f357600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103f357600080fd5b6000546001600160a01b031633148061155f5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561152757600080fd5b505afa15801561153b573d6000803e3d6000fd5b505050506040513d602081101561155157600080fd5b50516001600160a01b031633145b806115eb5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b357600080fd5b505afa1580156115c7573d6000803e3d6000fd5b505050506040513d60208110156115dd57600080fd5b50516001600160a01b031633145b61162a576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6105d2611d1b565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561168057600080fd5b505afa158015611694573d6000803e3d6000fd5b505050506040513d60208110156116aa57600080fd5b50516001600160a01b031633146116f6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d602081101561179657600080fd5b50516001600160a01b031633146117e2576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610fe66001600160a01b0384168383611814565b6005546001600160a01b031681565b6000546001600160a01b031681565b80158061189a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561186c57600080fd5b505afa158015611880573d6000803e3d6000fd5b505050506040513d602081101561189657600080fd5b5051155b6118d55760405162461bcd60e51b8152600401808060200182810382526036815260200180612a9f6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610fe6908490611d95565b60606119368484600085611e46565b90505b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fe6908490611d95565b60006119d483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fa2565b90505b92915050565b6000806119e8611b5a565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a3957600080fd5b505afa158015611a4d573d6000803e3d6000fd5b505050506040513d6020811015611a6357600080fd5b50519050611a7084612039565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b50519050611af78183611992565b95945050505050565b6000828201838110156119d4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b158015611ba757600080fd5b505af1158015610407573d6000803e3d6000fd5b611bc3612086565b600354600090611bdb906001600160a01b03166120eb565b90508015611c3d576000611bed610a37565b509050611c1b7f000000000000000000000000000000000000000000000000000000000000000082846125cd565b611c23612710565b6000611c2d611456565b1115611c3b57611c3b611d1b565b505b50565b600082611c4f575060006119d7565b82820282848281611c5c57fe5b04146119d45760405162461bcd60e51b8152600401808060200182810382526021815260200180612a546021913960400191505060405180910390fd5b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611ce457600080fd5b505afa158015611cf8573d6000803e3d6000fd5b505050506040513d6020811015611d0e57600080fd5b50519050611c3d81612039565b6000611d25611456565b90508015611c3d57600a546040805163b6b55f2560e01b81526004810184905290516001600160a01b039092169163b6b55f259160248082019260009290919082900301818387803b158015611d7a57600080fd5b505af1158015611d8e573d6000803e3d6000fd5b5050505050565b6060611dea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119279092919063ffffffff16565b805190915015610fe657808060200190516020811015611e0957600080fd5b5051610fe65760405162461bcd60e51b815260040180806020018281038252602a815260200180612a75602a913960400191505060405180910390fd5b606082471015611e875760405162461bcd60e51b8152600401808060200182810382526026815260200180612a2e6026913960400191505060405180910390fd5b611e9085612901565b611ee1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611f205780518252601f199092019160209182019101611f01565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f82576040519150601f19603f3d011682016040523d82523d6000602084013e611f87565b606091505b5091509150611f97828286612907565b979650505050505050565b600081848411156120315760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ff6578181015183820152602001611fde565b50505050905090810190601f1680156120235780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600a5460408051632e1a7d4d60e01b81526004810184905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015611d7a57600080fd5b600854600a54604080516335313c2160e11b81526001600160a01b03928316600482015290519190921691636a62784291602480830192600092919082900301818387803b1580156120d757600080fd5b505af1158015610882573d6000803e3d6000fd5b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561213b57600080fd5b505afa15801561214f573d6000803e3d6000fd5b505050506040513d602081101561216557600080fd5b50519050612194837f0000000000000000000000000000000000000000000000000000000000000000836125cd565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156121fa57600080fd5b505afa15801561220e573d6000803e3d6000fd5b505050506040513d602081101561222457600080fd5b5051915081156125c7576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b15801561228757600080fd5b505afa15801561229b573d6000803e3d6000fd5b505050506040513d60e08110156122b157600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a50909850965094509092509050600085158015906122fe57506001600160a01b03871615155b156123d4576123196127106123138c89611c40565b9061296d565b90506123467f000000000000000000000000000000000000000000000000000000000000000089836125cd565b6123d487896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239757600080fd5b505afa1580156123ab573d6000803e3d6000fd5b505050506040513d60208110156123c157600080fd5b50516001600160a01b038b169190611940565b6000841180156123ec57506001600160a01b03851615155b1561247f576124016127106123138c87611c40565b905061242e7f000000000000000000000000000000000000000000000000000000000000000089836125cd565b61247f85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239757600080fd5b60008211801561249757506001600160a01b03831615155b1561252a576124ac6127106123138c85611c40565b90506124d97f000000000000000000000000000000000000000000000000000000000000000089836125cd565b61252a83896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239757600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561259057600080fd5b505afa1580156125a4573d6000803e3d6000fd5b505050506040513d60208110156125ba57600080fd5b5051995050505050505050505b50919050565b604080516002808252606080830184529260208301908036833701905050905083816000815181106125fb57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061262957fe5b6001600160a01b039283166020918202929092010152600254166338ed1739836001843061265942610708611b00565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156126c95781810151838201526020016126b1565b505050509050019650505050505050600060405180830381600087803b1580156126f257600080fd5b505af1158015612706573d6000803e3d6000fd5b5050505050505050565b612718612a0f565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561276357600080fd5b505afa158015612777573d6000803e3d6000fd5b505050506040513d602081101561278d57600080fd5b50518152600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156127dc57600080fd5b505afa1580156127f0573d6000803e3d6000fd5b505050506040513d602081101561280657600080fd5b5051602080830191909152600754604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561285657600080fd5b505afa15801561286a573d6000803e3d6000fd5b505050506040513d602081101561288057600080fd5b50518160026020020152600954604051634515cef360e01b81526001600160a01b0390911690634515cef39083906001906004018083606080838360005b838110156128d65781810151838201526020016128be565b5050505090500182815260200192505050600060405180830381600087803b158015611d7a57600080fd5b3b151590565b60608315612916575081611939565b8251156129265782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611ff6578181015183820152602001611fde565b60006119d483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836129f95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611ff6578181015183820152602001611fde565b506000838581612a0557fe5b0495945050505050565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212204c2adf9718cb0e8b66408db6fb3e4005a4b2429e61811013c4a57f75e24e580364736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80636a4874a1116100f9578063c1a3d44c11610097578063dd0081c711610071578063dd0081c71461034b578063ef9e237914610353578063f4b9fa7514610389578063f77c479114610391576101c4565b8063c1a3d44c14610315578063d0e30db01461031d578063d92f3d7314610325576101c4565b80638a4adf24116100d35780638a4adf24146102d757806392eefe9b146102df578063a6f19c8414610305578063bab8fe401461030d576101c4565b80636a4874a1146102bf578063722713f7146102c7578063853828b6146102cf576101c4565b80633e413bee1161016657806348677dbe1161014057806348677dbe1461025e57806351cff8d9146102895780635a3874ac146102af5780636948ab6f146102b7576101c4565b80633e413bee146102465780633fc8cef31461024e5780634641257d14610256576101c4565b80631f1fcd51116101a25780631f1fcd5114610211578063257ae0de146102195780632e1a7d4d146102215780632f48ab7d1461023e576101c4565b8063017f3987146101c957806311588086146101ed5780631dd19cb414610207575b600080fd5b6101d1610399565b604080516001600160a01b039092168252519081900360200190f35b6101f56103a8565b60408051918252519081900360200190f35b61020f610424565b005b6101d16105d4565b6101d16105f8565b61020f6004803603602081101561023757600080fd5b5035610607565b6101d1610888565b6101d1610897565b6101d16108a6565b61020f6108ca565b610266610a37565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61020f6004803603602081101561029f57600080fd5b50356001600160a01b0316610d7d565b6101d1610feb565b6101d1610ffa565b6101d1611009565b6101f5611018565b6101f5611038565b6101d1611307565b61020f600480360360208110156102f557600080fd5b50356001600160a01b0316611316565b6101d16113fc565b6101f561140b565b6101f5611456565b61020f6114c5565b61020f6004803603602081101561033b57600080fd5b50356001600160a01b0316611632565b6101f5611718565b61020f6004803603606081101561036957600080fd5b506001600160a01b0381358116916020810135909116906040013561171e565b6101d16117f6565b6101d1611805565b6008546001600160a01b031681565b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156103f357600080fd5b505afa158015610407573d6000803e3d6000fd5b505050506040513d602081101561041d57600080fd5b5051905090565b6000546001600160a01b03163314806104be5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d60208110156104b057600080fd5b50516001600160a01b031633145b8061054a5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561051257600080fd5b505afa158015610526573d6000803e3d6000fd5b505050506040513d602081101561053c57600080fd5b50516001600160a01b031633145b610589576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6000546105d2906001600160a01b03166105a1611456565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611940565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b6000546001600160a01b03163314806106a15750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d602081101561069357600080fd5b50516001600160a01b031633145b8061072d5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d602081101561071f57600080fd5b50516001600160a01b031633145b61076c576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6000610776611456565b9050818110156107a15761079261078d8383611992565b6119dd565b915061079e8282611b00565b91505b60006107ab611b5a565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b1580156107fc57600080fd5b505afa158015610810573d6000803e3d6000fd5b505050506040513d602081101561082657600080fd5b505190506001600160a01b03811661086e576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6108826001600160a01b0383168286611940565b50505050565b6007546001600160a01b031681565b6006546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806109645750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d602081101561095657600080fd5b50516001600160a01b031633145b806109f05750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b857600080fd5b505afa1580156109cc573d6000803e3d6000fd5b505050506040513d60208110156109e257600080fd5b50516001600160a01b031633145b610a2f576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6105d2611bbb565b604080516003808252608082019092526000918291606091602082018380368337505060095460408051634903b0d160e01b81526000600482015290519394506001600160a01b0390911692634903b0d192506024808301926020929190829003018186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d6020811015610ad357600080fd5b505181518290600090610ae257fe5b60209081029190910181019190915260095460408051634903b0d160e01b8152600160048201529051610b739364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d6020811015610b6b57600080fd5b505190611c40565b81600181518110610b8057fe5b60209081029190910181019190915260095460408051634903b0d160e01b8152600260048201529051610bdf9364e8d4a51000936001600160a01b031692634903b0d19260248083019392829003018186803b158015610b4157600080fd5b81600281518110610bec57fe5b60200260200101818152505080600181518110610c0557fe5b602002602001015181600081518110610c1a57fe5b6020026020010151108015610c56575080600281518110610c3757fe5b602002602001015181600081518110610c4c57fe5b6020026020010151105b15610c725750506005546001600160a01b031690506000610d79565b80600081518110610c7f57fe5b602002602001015181600181518110610c9457fe5b6020026020010151108015610cd0575080600281518110610cb157fe5b602002602001015181600181518110610cc657fe5b6020026020010151105b15610cec5750506006546001600160a01b031690506001610d79565b80600081518110610cf957fe5b602002602001015181600281518110610d0e57fe5b6020026020010151108015610d4a575080600181518110610d2b57fe5b602002602001015181600281518110610d4057fe5b6020026020010151105b15610d665750506007546001600160a01b031690506002610d79565b50506005546001600160a01b0316905060005b9091565b6000546001600160a01b0316331480610e175750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b50516001600160a01b031633145b80610ea35750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b50516001600160a01b031633145b610ee2576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610f52576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6020811015610fc757600080fd5b5051600054909150610fe6906001600160a01b03848116911683611940565b505050565b6009546001600160a01b031681565b6004546001600160a01b031681565b6003546001600160a01b031681565b60006110336110256103a8565b61102d611456565b90611b00565b905090565b600080546001600160a01b03163314806110d35750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561109b57600080fd5b505afa1580156110af573d6000803e3d6000fd5b505050506040513d60208110156110c557600080fd5b50516001600160a01b031633145b8061115f5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d602081101561115157600080fd5b50516001600160a01b031633145b61119e576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6111a6611c99565b60006111b0611b5a565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d602081101561122957600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b505190506001600160a01b0381166112ee576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6113026001600160a01b0383168285611940565b505090565b6001546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b505050506040513d602081101561138e57600080fd5b50516001600160a01b031633146113da576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b600a5460408051633313458360e01b815230600482015290516000926001600160a01b0316916333134583916024808301926020929190829003018186803b1580156103f357600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103f357600080fd5b6000546001600160a01b031633148061155f5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561152757600080fd5b505afa15801561153b573d6000803e3d6000fd5b505050506040513d602081101561155157600080fd5b50516001600160a01b031633145b806115eb5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b357600080fd5b505afa1580156115c7573d6000803e3d6000fd5b505050506040513d60208110156115dd57600080fd5b50516001600160a01b031633145b61162a576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6105d2611d1b565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561168057600080fd5b505afa158015611694573d6000803e3d6000fd5b505050506040513d60208110156116aa57600080fd5b50516001600160a01b031633146116f6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d602081101561179657600080fd5b50516001600160a01b031633146117e2576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610fe66001600160a01b0384168383611814565b6005546001600160a01b031681565b6000546001600160a01b031681565b80158061189a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561186c57600080fd5b505afa158015611880573d6000803e3d6000fd5b505050506040513d602081101561189657600080fd5b5051155b6118d55760405162461bcd60e51b8152600401808060200182810382526036815260200180612a9f6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610fe6908490611d95565b60606119368484600085611e46565b90505b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fe6908490611d95565b60006119d483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fa2565b90505b92915050565b6000806119e8611b5a565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a3957600080fd5b505afa158015611a4d573d6000803e3d6000fd5b505050506040513d6020811015611a6357600080fd5b50519050611a7084612039565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b50519050611af78183611992565b95945050505050565b6000828201838110156119d4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b158015611ba757600080fd5b505af1158015610407573d6000803e3d6000fd5b611bc3612086565b600354600090611bdb906001600160a01b03166120eb565b90508015611c3d576000611bed610a37565b509050611c1b7f000000000000000000000000000000000000000000000000000000000000000082846125cd565b611c23612710565b6000611c2d611456565b1115611c3b57611c3b611d1b565b505b50565b600082611c4f575060006119d7565b82820282848281611c5c57fe5b04146119d45760405162461bcd60e51b8152600401808060200182810382526021815260200180612a546021913960400191505060405180910390fd5b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611ce457600080fd5b505afa158015611cf8573d6000803e3d6000fd5b505050506040513d6020811015611d0e57600080fd5b50519050611c3d81612039565b6000611d25611456565b90508015611c3d57600a546040805163b6b55f2560e01b81526004810184905290516001600160a01b039092169163b6b55f259160248082019260009290919082900301818387803b158015611d7a57600080fd5b505af1158015611d8e573d6000803e3d6000fd5b5050505050565b6060611dea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119279092919063ffffffff16565b805190915015610fe657808060200190516020811015611e0957600080fd5b5051610fe65760405162461bcd60e51b815260040180806020018281038252602a815260200180612a75602a913960400191505060405180910390fd5b606082471015611e875760405162461bcd60e51b8152600401808060200182810382526026815260200180612a2e6026913960400191505060405180910390fd5b611e9085612901565b611ee1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611f205780518252601f199092019160209182019101611f01565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f82576040519150601f19603f3d011682016040523d82523d6000602084013e611f87565b606091505b5091509150611f97828286612907565b979650505050505050565b600081848411156120315760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ff6578181015183820152602001611fde565b50505050905090810190601f1680156120235780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600a5460408051632e1a7d4d60e01b81526004810184905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015611d7a57600080fd5b600854600a54604080516335313c2160e11b81526001600160a01b03928316600482015290519190921691636a62784291602480830192600092919082900301818387803b1580156120d757600080fd5b505af1158015610882573d6000803e3d6000fd5b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561213b57600080fd5b505afa15801561214f573d6000803e3d6000fd5b505050506040513d602081101561216557600080fd5b50519050612194837f0000000000000000000000000000000000000000000000000000000000000000836125cd565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156121fa57600080fd5b505afa15801561220e573d6000803e3d6000fd5b505050506040513d602081101561222457600080fd5b5051915081156125c7576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b15801561228757600080fd5b505afa15801561229b573d6000803e3d6000fd5b505050506040513d60e08110156122b157600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a50909850965094509092509050600085158015906122fe57506001600160a01b03871615155b156123d4576123196127106123138c89611c40565b9061296d565b90506123467f000000000000000000000000000000000000000000000000000000000000000089836125cd565b6123d487896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239757600080fd5b505afa1580156123ab573d6000803e3d6000fd5b505050506040513d60208110156123c157600080fd5b50516001600160a01b038b169190611940565b6000841180156123ec57506001600160a01b03851615155b1561247f576124016127106123138c87611c40565b905061242e7f000000000000000000000000000000000000000000000000000000000000000089836125cd565b61247f85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239757600080fd5b60008211801561249757506001600160a01b03831615155b1561252a576124ac6127106123138c85611c40565b90506124d97f000000000000000000000000000000000000000000000000000000000000000089836125cd565b61252a83896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561239757600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561259057600080fd5b505afa1580156125a4573d6000803e3d6000fd5b505050506040513d60208110156125ba57600080fd5b5051995050505050505050505b50919050565b604080516002808252606080830184529260208301908036833701905050905083816000815181106125fb57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061262957fe5b6001600160a01b039283166020918202929092010152600254166338ed1739836001843061265942610708611b00565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156126c95781810151838201526020016126b1565b505050509050019650505050505050600060405180830381600087803b1580156126f257600080fd5b505af1158015612706573d6000803e3d6000fd5b5050505050505050565b612718612a0f565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561276357600080fd5b505afa158015612777573d6000803e3d6000fd5b505050506040513d602081101561278d57600080fd5b50518152600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156127dc57600080fd5b505afa1580156127f0573d6000803e3d6000fd5b505050506040513d602081101561280657600080fd5b5051602080830191909152600754604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561285657600080fd5b505afa15801561286a573d6000803e3d6000fd5b505050506040513d602081101561288057600080fd5b50518160026020020152600954604051634515cef360e01b81526001600160a01b0390911690634515cef39083906001906004018083606080838360005b838110156128d65781810151838201526020016128be565b5050505090500182815260200192505050600060405180830381600087803b158015611d7a57600080fd5b3b151590565b60608315612916575081611939565b8251156129265782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611ff6578181015183820152602001611fde565b60006119d483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836129f95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611ff6578181015183820152602001611fde565b506000838581612a0557fe5b0495945050505050565b6040518060600160405280600390602082028036833750919291505056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212204c2adf9718cb0e8b66408db6fb3e4005a4b2429e61811013c4a57f75e24e580364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "setController(address)": {
        "params": {
          "_controller": "The address of the controller"
        }
      },
      "setUnirouter(address)": {
        "params": {
          "_unirouter": "The address of the router"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest()": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setController(address)": {
        "notice": "Sets the address of the controller"
      },
      "setUnirouter(address)": {
        "notice": "Sets the address of the Uniswap Router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6248,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6250,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "vaultManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVaultManager)1992"
      },
      {
        "astId": 6255,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "unirouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Uni)1517"
      },
      {
        "astId": 6996,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "crv",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7002,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "t3crv",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7008,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "dai",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7014,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "usdc",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7020,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "usdt",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7025,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "crvMintr",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(Mintr)1417"
      },
      {
        "astId": 7030,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "stableSwap3Pool",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IStableSwap3Pool)1846"
      },
      {
        "astId": 7035,
        "contract": "contracts/metavault/strategies/StrategyCurve3Crv.sol:StrategyCurve3Crv",
        "label": "gauge",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(Gauge)1411"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Gauge)1411": {
        "encoding": "inplace",
        "label": "contract Gauge",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap3Pool)1846": {
        "encoding": "inplace",
        "label": "contract IStableSwap3Pool",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)1992": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      },
      "t_contract(Mintr)1417": {
        "encoding": "inplace",
        "label": "contract Mintr",
        "numberOfBytes": "20"
      },
      "t_contract(Uni)1517": {
        "encoding": "inplace",
        "label": "contract Uni",
        "numberOfBytes": "20"
      }
    }
  }
}