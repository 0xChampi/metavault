{
  "address": "0xDb6E6904d50f9d9Df5554Eb9aACE2F95e6712739",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yaxis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsYaxis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsYaxisEth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yaxisEthUniswapV2Pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsYaxis",
      "outputs": [
        {
          "internalType": "contract IRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsYaxisEth",
      "outputs": [
        {
          "internalType": "contract IRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yaxis",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yaxisEthUniswapV2Pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9739b6b91bd11ea3babfff4929b89f0d47ce4298c6584694893116d1c0cb5bda",
  "receipt": {
    "to": null,
    "from": "0x65F84A48e640a908d0DF7B6f00B871352F77022D",
    "contractAddress": "0xDb6E6904d50f9d9Df5554Eb9aACE2F95e6712739",
    "transactionIndex": 51,
    "gasUsed": "544095",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9232e551bfd8465b71a4b975b7a58d9802d76f03229ac46367d8ebef95ecc6eb",
    "transactionHash": "0x9739b6b91bd11ea3babfff4929b89f0d47ce4298c6584694893116d1c0cb5bda",
    "logs": [],
    "blockNumber": 12653586,
    "cumulativeGasUsed": "3588699",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0adA190c81b814548ddC2F6AdC4a689ce7C1FE73",
    "0x3b09B9ADFe11f92225b4C55De89fa81456595CD9",
    "0xEDaFe410e2f07ab9D7F1B04316D29C2F49dCb104",
    "0xF0E3FdF48661CD10d56692f60BD4eCcd01E9CF64"
  ],
  "solcInputHash": "bb19182873065a6155cd6bb8b560e034",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yaxis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsYaxis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsYaxisEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yaxisEthUniswapV2Pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsYaxis\",\"outputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsYaxisEth\",\"outputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxisEthUniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/YaxisVotePower.sol\":\"YaxisVotePower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/governance/YaxisVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IRewards.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IVoteProxy.sol\\\";\\n\\ncontract YaxisVotePower is IVoteProxy {\\n    using SafeMath for uint256;\\n\\n    // solhint-disable-next-line const-name-snakecase\\n    uint8 public constant override decimals = uint8(18);\\n\\n    IUniswapV2Pair public immutable yaxisEthUniswapV2Pair;\\n    IERC20 public immutable yaxis;\\n    IRewards public immutable rewardsYaxis;\\n    IRewards public immutable rewardsYaxisEth;\\n\\n    constructor(\\n        address _yaxis,\\n        address _rewardsYaxis,\\n        address _rewardsYaxisEth,\\n        address _yaxisEthUniswapV2Pair\\n    )\\n        public\\n    {\\n        yaxis = IERC20(_yaxis);\\n        rewardsYaxis = IRewards(_rewardsYaxis);\\n        rewardsYaxisEth = IRewards(_rewardsYaxisEth);\\n        yaxisEthUniswapV2Pair = IUniswapV2Pair(_yaxisEthUniswapV2Pair);\\n    }\\n\\n    function totalSupply()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return sqrt(yaxis.totalSupply());\\n    }\\n\\n    function balanceOf(\\n        address _voter\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 _balance)\\n    {\\n        uint256 _stakeAmount = rewardsYaxisEth.balanceOf(_voter);\\n        (uint256 _yaxReserves,,) = yaxisEthUniswapV2Pair.getReserves();\\n        uint256 _supply = yaxisEthUniswapV2Pair.totalSupply();\\n        _supply = _supply == 0\\n            ? 1e18\\n            : _supply;\\n        uint256 _lpStakingYax = _yaxReserves\\n            .mul(_stakeAmount)\\n            .div(_supply)\\n            .add(rewardsYaxisEth.earned(_voter));\\n        uint256 _rewardsYaxisAmount = rewardsYaxis.balanceOf(_voter)\\n            .add(rewardsYaxis.earned(_voter));\\n        _balance = sqrt(\\n            yaxis.balanceOf(_voter)\\n                .add(_lpStakingYax)\\n                .add(_rewardsYaxisAmount)\\n        );\\n    }\\n\\n    function sqrt(\\n        uint256 x\\n    )\\n        private\\n        pure\\n        returns (uint256 y)\\n    {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n        y = y * (10 ** 9);\\n    }\\n}\\n\",\"keccak256\":\"0xfc59091b275607f1c534e97074bfbe6d0e917eeab082b4a9e1cfe5ba27cea7d6\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRewards {\\n    function balanceOf(address) external view returns (uint256);\\n    function earned(address) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbcdb1163f93859adeeaeda30c71e78cf344f823e335180c16a20a9c6df122324\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IERC20 {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\",\"keccak256\":\"0xfc2eddc11e5ceb4926a4e1a604e0b019f21f566517226f3447bc47db4bae6365\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IVoteProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IVoteProxy {\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _voter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x803c3e938dbe4891fddd4b51f79ee287d136556a0fbc8a8e02c8194ddc568ed8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516109b83803806109b88339818101604052608081101561003457600080fd5b508051602082015160408301516060938401516001600160601b031993851b841660a05291841b831660c052831b821660e05290911b1660805260805160601c60a05160601c60c05160601c60e05160601c6108e16100d7600039806101db528061020252806103ef5250806104a85280610560528061068b52508061012352806101b752806105ea5250806102b9528061035c528061066752506108e16000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806344302a391161005b57806344302a39146100de57806370a08231146100e65780637656f0ec1461010c5780639f0293b7146101145761007d565b806318160ddd14610082578063313ce5671461009c5780633f021b0e146100ba575b600080fd5b61008a61011c565b60408051918252519081900360200190f35b6100a46101b0565b6040805160ff9092168252519081900360200190f35b6100c26101b5565b604080516001600160a01b039092168252519081900360200190f35b6100c26101d9565b61008a600480360360208110156100fc57600080fd5b50356001600160a01b03166101fd565b6100c2610665565b6100c2610689565b60006101ab7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017a57600080fd5b505afa15801561018e573d6000803e3d6000fd5b505050506040513d60208110156101a457600080fd5b50516106ad565b905090565b601281565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d602081101561029757600080fd5b505160408051630240bc6b60e21b815290519192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630902f1ac916004808301926060929190829003018186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d606081101561032957600080fd5b5051604080516318160ddd60e01b815290516dffffffffffffffffffffffffffff90921692506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b5051905080156103dc57806103e6565b670de0b6b3a76400005b9050600061049f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316628cc262886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561045957600080fd5b505afa15801561046d573d6000803e3d6000fd5b505050506040513d602081101561048357600080fd5b50516104998461049387896106ea565b9061074c565b9061078e565b905060006105db7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316628cc262896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561051257600080fd5b505afa158015610526573d6000803e3d6000fd5b505050506040513d602081101561053c57600080fd5b5051604080516370a0823160e01b81526001600160a01b038b8116600483015291517f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156105a957600080fd5b505afa1580156105bd573d6000803e3d6000fd5b505050506040513d60208110156105d357600080fd5b50519061078e565b905061065a61065582610499857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156105a957600080fd5b6106ad565b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600260018201045b818110156106de578091506002818285816106cd57fe5b0401816106d657fe5b0490506106b6565b50633b9aca0002919050565b6000826106f957506000610746565b8282028284828161070657fe5b04146107435760405162461bcd60e51b815260040180806020018281038252602181526020018061088b6021913960400191505060405180910390fd5b90505b92915050565b600061074383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506107e8565b600082820183811015610743576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836108745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610839578181015183820152602001610821565b50505050905090810190601f1680156108665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161088057fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220e10c966889b589c1a0029320815788f15e3f9ae5ee759955b61b2691457cfa2064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806344302a391161005b57806344302a39146100de57806370a08231146100e65780637656f0ec1461010c5780639f0293b7146101145761007d565b806318160ddd14610082578063313ce5671461009c5780633f021b0e146100ba575b600080fd5b61008a61011c565b60408051918252519081900360200190f35b6100a46101b0565b6040805160ff9092168252519081900360200190f35b6100c26101b5565b604080516001600160a01b039092168252519081900360200190f35b6100c26101d9565b61008a600480360360208110156100fc57600080fd5b50356001600160a01b03166101fd565b6100c2610665565b6100c2610689565b60006101ab7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017a57600080fd5b505afa15801561018e573d6000803e3d6000fd5b505050506040513d60208110156101a457600080fd5b50516106ad565b905090565b601281565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d602081101561029757600080fd5b505160408051630240bc6b60e21b815290519192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630902f1ac916004808301926060929190829003018186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d606081101561032957600080fd5b5051604080516318160ddd60e01b815290516dffffffffffffffffffffffffffff90921692506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b1580156103a257600080fd5b505afa1580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b5051905080156103dc57806103e6565b670de0b6b3a76400005b9050600061049f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316628cc262886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561045957600080fd5b505afa15801561046d573d6000803e3d6000fd5b505050506040513d602081101561048357600080fd5b50516104998461049387896106ea565b9061074c565b9061078e565b905060006105db7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316628cc262896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561051257600080fd5b505afa158015610526573d6000803e3d6000fd5b505050506040513d602081101561053c57600080fd5b5051604080516370a0823160e01b81526001600160a01b038b8116600483015291517f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156105a957600080fd5b505afa1580156105bd573d6000803e3d6000fd5b505050506040513d60208110156105d357600080fd5b50519061078e565b905061065a61065582610499857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156105a957600080fd5b6106ad565b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600260018201045b818110156106de578091506002818285816106cd57fe5b0401816106d657fe5b0490506106b6565b50633b9aca0002919050565b6000826106f957506000610746565b8282028284828161070657fe5b04146107435760405162461bcd60e51b815260040180806020018281038252602181526020018061088b6021913960400191505060405180910390fd5b90505b92915050565b600061074383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506107e8565b600082820183811015610743576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081836108745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610839578181015183820152602001610821565b50505050905090810190601f1680156108665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161088057fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220e10c966889b589c1a0029320815788f15e3f9ae5ee759955b61b2691457cfa2064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}