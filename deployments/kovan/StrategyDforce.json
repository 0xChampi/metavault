{
  "address": "0x2d24b957B5a5D0FB6A07EA0b95E693D1b2fe1458",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DF",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_converter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DF",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfdToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "converter",
      "outputs": [
        {
          "internalType": "contract IConverter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager",
      "outputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
  "receipt": {
    "to": null,
    "from": "0x36D68d13dD18Fe8076833Ef99245Ef33B00A7259",
    "contractAddress": "0x2d24b957B5a5D0FB6A07EA0b95E693D1b2fe1458",
    "transactionIndex": 3,
    "gasUsed": "2813513",
    "logsBloom": "0x
    "blockHash": "0xa64cc9d3d60bc4df374bf0f012bb59ef5c1fe7f683546b0abf720b470153420d",
    "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 23062949,
        "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
        "address": "0x38e966C6F5562D628e70560726A7B7bCD6D1EC8A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002d24b957b5a5d0fb6a07ea0b95e693d1b2fe1458",
          "0x0000000000000000000000008d037ea525f150bad41d0cab990665fe944cb2f7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0xa64cc9d3d60bc4df374bf0f012bb59ef5c1fe7f683546b0abf720b470153420d"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23062949,
        "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
        "address": "0xC090b5686B24C2D5eDe2077857a986B6DB73Ad15",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002d24b957b5a5d0fb6a07ea0b95e693d1b2fe1458",
          "0x0000000000000000000000008d037ea525f150bad41d0cab990665fe944cb2f7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 13,
        "blockHash": "0xa64cc9d3d60bc4df374bf0f012bb59ef5c1fe7f683546b0abf720b470153420d"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23062949,
        "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
        "address": "0x59Dd2C19F322f7457C34C73023cC7dA1fde4063d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002d24b957b5a5d0fb6a07ea0b95e693d1b2fe1458",
          "0x0000000000000000000000004981d4a898e1c503bfa06b751f932600e124108f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 14,
        "blockHash": "0xa64cc9d3d60bc4df374bf0f012bb59ef5c1fe7f683546b0abf720b470153420d"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23062949,
        "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
        "address": "0x59Dd2C19F322f7457C34C73023cC7dA1fde4063d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002d24b957b5a5d0fb6a07ea0b95e693d1b2fe1458",
          "0x000000000000000000000000bfcc19bebbdcfa2992d83a9f93832ab1a3fed356"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 15,
        "blockHash": "0xa64cc9d3d60bc4df374bf0f012bb59ef5c1fe7f683546b0abf720b470153420d"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23062949,
        "transactionHash": "0xb9ba7ba9759c763a9ddaf96042c635fd7701f9ffc8ab7c20b19e7cc0a729f422",
        "address": "0xBFcc19bEBbDcfa2992D83A9f93832Ab1A3fED356",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002d24b957b5a5d0fb6a07ea0b95e693d1b2fe1458",
          "0x000000000000000000000000fe876a7b49d04073dca8a1ff0ba07946b78d5229"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 16,
        "blockHash": "0xa64cc9d3d60bc4df374bf0f012bb59ef5c1fe7f683546b0abf720b470153420d"
      }
    ],
    "blockNumber": 23062949,
    "cumulativeGasUsed": "3169612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x59Dd2C19F322f7457C34C73023cC7dA1fde4063d",
    "0xBFcc19bEBbDcfa2992D83A9f93832Ab1A3fED356",
    "0xfe876a7b49d04073dCa8a1fF0BA07946b78d5229",
    "0xC090b5686B24C2D5eDe2077857a986B6DB73Ad15",
    "0x4981D4A898e1C503BFA06B751f932600E124108f",
    "0xD3dB7ba937597A3fFAd1174bAed2955852FD5d6D",
    "0x15885dE7737B179968B216275b6531f3a668E4E9",
    "0x38e966C6F5562D628e70560726A7B7bCD6D1EC8A",
    "0x8D037Ea525f150BaD41D0caB990665fE944Cb2F7"
  ],
  "solcInputHash": "0dafef0f9d3baf21ab7d835401fdfdba",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DF\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfdToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract IConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"setController(address)\":{\"params\":{\"_controller\":\"The address of the controller\"}},\"setRouter(address)\":{\"params\":{\"_router\":\"The address of the router\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest()\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setController(address)\":{\"notice\":\"Sets the address of the controller\"},\"setRouter(address)\":{\"notice\":\"Sets the address of the ISwap-compatible router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metavault/strategies/StrategyDforce.sol\":\"StrategyDforce\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/interfaces/DForce.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface dRewards {\\n    function withdraw(uint) external;\\n    function getReward() external;\\n    function stake(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function exit() external;\\n}\\n\\ninterface dERC20 {\\n  function mint(address, uint256) external;\\n  function redeem(address, uint) external;\\n  function getTokenBalance(address) external view returns (uint);\\n  function getExchangeRate() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x762b407dd2788cd40f1ee86e2306e6df83d4553f07ffaf09c2ed23180cca3e18\",\"license\":\"MIT\"},\"contracts/metavault/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function balanceOf(address) external view returns (uint256);\\n    function earn(address, uint256) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address) external;\\n    function strategyTokens(address) external returns (address);\\n    function vaults(address) external view returns (address);\\n    function want(address) external view returns (address);\\n    function withdraw(address, uint256) external;\\n    function withdrawFee(address, uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x34677b3f7fc870d4738321e11c0395054e0c995100878ff628e681e41b7ce199\",\"license\":\"MIT\"},\"contracts/metavault/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IConverter {\\n    function token() external returns (address _share);\\n    function convert(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external returns (uint _outputAmount);\\n    function convert_rate(\\n        address _input,\\n        address _output,\\n        uint _inputAmount\\n    ) external view returns (uint _outputAmount);\\n    function convert_stables(\\n        uint[3] calldata amounts\\n    ) external returns (uint _shareAmount); // 0: DAI, 1: USDC, 2: USDT\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external returns (uint dy);\\n    function calc_token_amount(\\n        uint[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint _shareAmount);\\n    function calc_token_amount_withdraw(\\n        uint _shares,\\n        address _output\\n    ) external view returns (uint _outputAmount);\\n}\\n\",\"keccak256\":\"0xb2ce7af2aadcccdaddfa43ad14bf581f6d6d2fc85e7eb6c415675e2b1e0d4cd9\",\"license\":\"MIT\"},\"contracts/metavault/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x913b50315c2ef2d41e44e36802e2db0e11a664e76cc232f5496da7d4efde4e5b\",\"license\":\"MIT\"},\"contracts/metavault/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest() external;\\n    function skim() external;\\n    function want() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf4c1f571434bfcb0929b1890e7838f8427395d03057e553d63108e71a1ca5fd3\",\"license\":\"MIT\"},\"contracts/metavault/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n}\\n\",\"keccak256\":\"0x008a41c285e92105e22384cfa3b438c734c431a0d48e2c1920a339de9807809a\",\"license\":\"MIT\"},\"contracts/metavault/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultManager {\\n    function controllers(address) external view returns (bool);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\\n    function governance() external view returns (address);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryBalance() external view returns (uint256);\\n    function treasuryFee() external view returns (uint256);\\n    function vaults(address) external view returns (bool);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yax() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9755c468ca7cd281bc678a1692f294765da5fa734d63c20fbdac12c31a665ed2\",\"license\":\"MIT\"},\"contracts/metavault/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../IStableSwap3Pool.sol\\\";\\nimport \\\"../ISwap.sol\\\";\\nimport \\\"../IVaultManager.sol\\\";\\nimport \\\"../IStrategy.sol\\\";\\nimport \\\"../IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable weth;\\n    address public controller;\\n    IVaultManager public vaultManager;\\n    ISwap public router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _vaultManager The address of the vaultManager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _router The address of the router for swapping tokens\\n     */\\n    constructor(\\n        address _controller,\\n        address _vaultManager,\\n        address _want,\\n        address _weth,\\n        address _router\\n    ) public {\\n        want = _want;\\n        controller = _controller;\\n        vaultManager = IVaultManager(_vaultManager);\\n        weth = _weth;\\n        router = ISwap(_router);\\n        IERC20(_weth).safeApprove(address(_router), type(uint256).max);\\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(IERC20 _token, address _spender, uint256 _amount) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the controller\\n     * @param _controller The address of the controller\\n     */\\n    function setController(address _controller) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _router The address of the router\\n     */\\n    function setRouter(address _router) external {\\n        require(msg.sender == vaultManager.governance(), \\\"!governance\\\");\\n        router = ISwap(_router);\\n        IERC20(weth).safeApprove(address(_router), 0);\\n        IERC20(weth).safeApprove(address(_router), type(uint256).max);\\n    }\\n\\n    /**\\n     * AUTHORIZED-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit() external override onlyAuthorized {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest() external override onlyAuthorized {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim() external override onlyAuthorized {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(address _asset) external override onlyAuthorized {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external override onlyAuthorized {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        address _token = _vaultWant();\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll() external override onlyAuthorized returns (uint256 _balance) {\\n        _withdrawAll();\\n\\n        address _token = _vaultWant();\\n        _balance = IERC20(_token).balanceOf(address(this));\\n\\n        address _vault = IController(controller).vaults(_token);\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(_token).safeTransfer(_vault, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf() external override view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool() public view override virtual returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant() public view override returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit() internal virtual;\\n\\n    function _harvest() internal virtual;\\n\\n    function _payHarvestFees(\\n        address _poolToken\\n    ) internal returns (uint256 _wethBal) {\\n        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\\n        _swapTokens(_poolToken, weth, _amount);\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                address yax,\\n                address stakingPool,\\n                uint256 stakingPoolShareFee,\\n                address treasury,\\n                uint256 treasuryFee,\\n                address insurance,\\n                uint256 insurancePoolFee\\n            ) = vaultManager.getHarvestFeeInfo();\\n\\n            uint256 _fee;\\n\\n            // pay the staking pool with YAX\\n            if (stakingPoolShareFee > 0 && stakingPool != address(0)) {\\n                _fee = _wethBal.mul(stakingPoolShareFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(stakingPool, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(treasury, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // pay the insurance pool with YAX\\n            if (insurancePoolFee > 0 && insurance != address(0)) {\\n                _fee = _wethBal.mul(insurancePoolFee).div(ONE_HUNDRED_PERCENT);\\n                _swapTokens(weth, yax, _fee);\\n                IERC20(yax).safeTransfer(insurance, IERC20(yax).balanceOf(address(this)));\\n            }\\n\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokens(address _input, address _output, uint256 _amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            1,\\n            path,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp.add(1800)\\n        );\\n    }\\n\\n    function _vaultWant() internal returns (address) {\\n        return IController(controller).strategyTokens(address(this));\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _withdrawAll() internal virtual;\\n\\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\\n        address _token = _vaultWant();\\n        uint256 _before = IERC20(_token).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(_token).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == controller\\n             || msg.sender == vaultManager.strategist()\\n             || msg.sender == vaultManager.governance(),\\n             \\\"!authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4c7a0bc0f087511fd955810591d0bc2f9c226709911980d80598206afa2c990c\",\"license\":\"MIT\"},\"contracts/metavault/strategies/StrategyDforce.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../interfaces/DForce.sol\\\";\\nimport \\\"../IConverter.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyDforce is BaseStrategy {\\n    address public immutable dToken;\\n    address public immutable pool;\\n    address public immutable DF;\\n    IConverter public converter;\\n\\n    constructor(\\n        address _underlying,\\n        address _dToken,\\n        address _pool,\\n        address _DF,\\n        address _converter,\\n        address _controller,\\n        address _vaultManager,\\n        address _weth,\\n        address _router\\n    )\\n        public\\n        BaseStrategy(_controller, _vaultManager, _underlying, _weth, _router)\\n    {\\n        dToken = _dToken;\\n        pool = _pool;\\n        DF = _DF;\\n        converter = IConverter(_converter);\\n        IERC20(_DF).safeApprove(address(_router), type(uint256).max);\\n        IERC20(_underlying).safeApprove(address(_converter), type(uint256).max);\\n        IERC20(_underlying).safeApprove(_dToken, type(uint256).max);\\n        IERC20(_dToken).safeApprove(_pool, type(uint256).max);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return (dRewards(pool).balanceOf(address(this)))\\n            .mul(dERC20(dToken).getExchangeRate())\\n            .div(1e18)\\n            .add(balanceOfdToken());\\n    }\\n\\n    function balanceOfdToken() public view returns (uint256) {\\n        return dERC20(dToken).getTokenBalance(address(this));\\n    }\\n\\n    function _deposit() internal override {\\n        uint256 _amount = balanceOfWant();\\n        if (_amount > 0) {\\n            dERC20(dToken).mint(address(this), _amount);\\n        }\\n        uint256 _dToken = IERC20(dToken).balanceOf(address(this));\\n        if (_dToken > 0) {\\n            dRewards(pool).stake(_dToken);\\n        }\\n    }\\n\\n    function _harvest() internal override {\\n        dRewards(pool).getReward();\\n        uint256 _remainingWeth = _payHarvestFees(DF);\\n\\n        if (_remainingWeth > 0) {\\n            _swapTokens(weth, want, _remainingWeth);\\n\\n            if (balanceOfWant() > 0) {\\n                _deposit();\\n            }\\n        }\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        _amount = _amount.mul(1e18).div(dERC20(dToken).getExchangeRate());\\n        uint256 _before = IERC20(dToken).balanceOf(address(this));\\n        dRewards(pool).withdraw(_amount);\\n        uint256 _after = IERC20(dToken).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n        dERC20(dToken).redeem(address(this), _amount);\\n        _amount = balanceOfWant();\\n        if (_amount > 0) {\\n            _convert(want, _vaultWant(), _amount);\\n        }\\n    }\\n\\n    function _withdrawAll() internal override {\\n        dRewards(pool).exit();\\n        uint256 _amount = IERC20(dToken).balanceOf(address(this));\\n        if (_amount > 0) {\\n            dERC20(dToken).redeem(address(this), _amount);\\n            _amount = balanceOfWant();\\n            _convert(want, _vaultWant(), _amount);\\n        }\\n    }\\n\\n    function _convert(address _from, address _to, uint256 _amount) internal {\\n        require(converter.convert_rate(_from, _to, _amount) > 0, \\\"!convert_rate\\\");\\n        IERC20(_from).safeTransfer(address(converter), _amount);\\n        converter.convert(_from, _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x666444f99cf233edf461fa0406a512aa69e6a79f9d130359511336f4b881cba3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620034f2380380620034f283398181016040526101208110156200003957600080fd5b508051602080830151604084015160608086015160808088015160a0808a015160c08b015160e08c0151610100909c01516001600160601b03198c891b8116909652600080546001600160a01b038086166001600160a01b03199283161790925560018054838616908316179055988e901b9096169093526002805486851698169790971790965598999698959793969195949391929091859185918c9186918691620000f991908416908390600019906200158c620001e4821b17901c565b5050505050606088811b6001600160601b031990811660c05288821b811660e0529087901b1661010052600380546001600160a01b0319166001600160a01b03878116919091179091556200016090871682600019620001e4602090811b6200158c17901c565b62000187856000198b6001600160a01b0316620001e460201b6200158c179092919060201c565b620001ae886000198b6001600160a01b0316620001e460201b6200158c179092919060201c565b620001d5876000198a6001600160a01b0316620001e460201b6200158c179092919060201c565b505050505050505050620005f7565b8015806200026e575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156200023e57600080fd5b505afa15801562000253573d6000803e3d6000fd5b505050506040513d60208110156200026a57600080fd5b5051155b620002ab5760405162461bcd60e51b8152600401808060200182810382526036815260200180620034bc6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620003039185916200030816565b505050565b606062000364826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003c460201b6200169f179092919060201c565b80519091501562000303578080602001905160208110156200038557600080fd5b5051620003035760405162461bcd60e51b815260040180806020018281038252602a81526020018062003492602a913960400191505060405180910390fd5b6060620003d58484600085620003df565b90505b9392505050565b606082471015620004225760405162461bcd60e51b81526004018080602001828103825260268152602001806200346c6026913960400191505060405180910390fd5b6200042d8562000547565b6200047f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620004c05780518252601f1990920191602091820191016200049f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000524576040519150601f19603f3d011682016040523d82523d6000602084013e62000529565b606091505b5090925090506200053c8282866200054d565b979650505050505050565b3b151590565b606083156200055e575081620003d8565b8251156200056f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005bb578181015183820152602001620005a1565b50505050905090810190601f168015620005e95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c612d8b620006e1600039806102d95280611a485250806103bc528061044752806119d05280611ad95280611ded52806122d25250806103195280610fb4528061146e5280611b4e5280611c145280611ce85280611d4c528061217c5280612217528061233652806123dd5250806108c0528061122f52806112645280611a795280612530528061257552806126db52806127c3528061286e52806129055250806105f0528061061b5280610bc052806112945280611a9a5280611c82528061247f5250612d8b6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638a4adf24116100c3578063d0e30db01161007c578063d0e30db014610279578063d9d7858a14610281578063dd0081c714610289578063ef9e237914610291578063f77c4791146102c7578063f887ea40146102cf5761014d565b80638a4adf241461020d5780638aa4f0341461021557806392eefe9b1461021d578063bd38837b14610243578063c0d786551461024b578063c1a3d44c146102715761014d565b80632e1a7d4d116101155780632e1a7d4d146101aa5780633fc8cef3146101c75780634641257d146101cf57806351cff8d9146101d7578063722713f7146101fd578063853828b6146102055761014d565b806305a91f7b14610152578063115880861461017657806316f0115b146101905780631dd19cb4146101985780631f1fcd51146101a2575b600080fd5b61015a6102d7565b604080516001600160a01b039092168252519081900360200190f35b61017e6102fb565b60408051918252519081900360200190f35b61015a610445565b6101a0610469565b005b61015a610619565b6101a0600480360360208110156101c057600080fd5b503561063d565b61015a6108be565b6101a06108e2565b6101a0600480360360208110156101ed57600080fd5b50356001600160a01b0316610a4f565b61017e610cbd565b61017e610cd2565b61015a610fa1565b61017e610fb0565b6101a06004803603602081101561023357600080fd5b50356001600160a01b0316611050565b61015a611136565b6101a06004803603602081101561026157600080fd5b50356001600160a01b0316611145565b61017e611290565b6101a06112ff565b61015a61146c565b61017e611490565b6101a0600480360360608110156102a757600080fd5b506001600160a01b03813581169160208101359091169060400135611496565b61015a61156e565b61015a61157d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610440610308610fb0565b61043a670de0b6b3a76400006104347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d602081101561039a57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d602081101561042c57600080fd5b5051906116b8565b9061171a565b9061175c565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806105035750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cb57600080fd5b505afa1580156104df573d6000803e3d6000fd5b505050506040513d60208110156104f557600080fd5b50516001600160a01b031633145b8061058f5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561055757600080fd5b505afa15801561056b573d6000803e3d6000fd5b505050506040513d602081101561058157600080fd5b50516001600160a01b031633145b6105ce576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600054610617906001600160a01b03166105e6611290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906117b6565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806106d75750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516001600160a01b031633145b806107635750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d602081101561075557600080fd5b50516001600160a01b031633145b6107a2576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006107ac611290565b9050818110156107d7576107c86107c38383611808565b61184a565b91506107d4828261175c565b91505b60006107e161196d565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b15801561083257600080fd5b505afa158015610846573d6000803e3d6000fd5b505050506040513d602081101561085c57600080fd5b505190506001600160a01b0381166108a4576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6108b86001600160a01b03831682866117b6565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633148061097c5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561094457600080fd5b505afa158015610958573d6000803e3d6000fd5b505050506040513d602081101561096e57600080fd5b50516001600160a01b031633145b80610a085750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d057600080fd5b505afa1580156109e4573d6000803e3d6000fd5b505050506040513d60208110156109fa57600080fd5b50516001600160a01b031633145b610a47576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6106176119ce565b6000546001600160a01b0316331480610ae95750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab157600080fd5b505afa158015610ac5573d6000803e3d6000fd5b505050506040513d6020811015610adb57600080fd5b50516001600160a01b031633145b80610b755750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3d57600080fd5b505afa158015610b51573d6000803e3d6000fd5b505050506040513d6020811015610b6757600080fd5b50516001600160a01b031633145b610bb4576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610c24576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d6020811015610c9957600080fd5b5051600054909150610cb8906001600160a01b038481169116836117b6565b505050565b6000610440610cca6102fb565b61043a611290565b600080546001600160a01b0316331480610d6d5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3557600080fd5b505afa158015610d49573d6000803e3d6000fd5b505050506040513d6020811015610d5f57600080fd5b50516001600160a01b031633145b80610df95750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc157600080fd5b505afa158015610dd5573d6000803e3d6000fd5b505050506040513d6020811015610deb57600080fd5b50516001600160a01b031633145b610e38576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610e40611ad7565b6000610e4a61196d565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d6020811015610ec357600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b158015610f1657600080fd5b505afa158015610f2a573d6000803e3d6000fd5b505050506040513d6020811015610f4057600080fd5b505190506001600160a01b038116610f88576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b610f9c6001600160a01b03831682856117b6565b505090565b6001546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633aecd0e3306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561101f57600080fd5b505afa158015611033573d6000803e3d6000fd5b505050506040513d602081101561104957600080fd5b5051905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d60208110156110c857600080fd5b50516001600160a01b03163314611114576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561119357600080fd5b505afa1580156111a7573d6000803e3d6000fd5b505050506040513d60208110156111bd57600080fd5b50516001600160a01b03163314611209576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0383811691909117909155611257907f00000000000000000000000000000000000000000000000000000000000000001682600061158c565b61128d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168260001961158c565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561101f57600080fd5b6000546001600160a01b03163314806113995750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561136157600080fd5b505afa158015611375573d6000803e3d6000fd5b505050506040513d602081101561138b57600080fd5b50516001600160a01b031633145b806114255750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b50516001600160a01b031633145b611464576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610617611caf565b7f000000000000000000000000000000000000000000000000000000000000000081565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d602081101561150e57600080fd5b50516001600160a01b0316331461155a576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610cb86001600160a01b038416838361158c565b6000546001600160a01b031681565b6002546001600160a01b031681565b801580611612575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d602081101561160e57600080fd5b5051155b61164d5760405162461bcd60e51b8152600401808060200182810382526036815260200180612d206036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610cb8908490611e6e565b60606116ae8484600085611f1f565b90505b9392505050565b6000826116c757506000611714565b828202828482816116d457fe5b04146117115760405162461bcd60e51b8152600401808060200182810382526021815260200180612cd56021913960400191505060405180910390fd5b90505b92915050565b600061171183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061207b565b600082820183811015611711576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cb8908490611e6e565b600061171183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061211d565b60008061185561196d565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d60208110156118d057600080fd5b505190506118dd84612177565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d602081101561195657600080fd5b505190506119648183611808565b95945050505050565b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b1580156119ba57600080fd5b505af1158015611033573d6000803e3d6000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a2957600080fd5b505af1158015611a3d573d6000803e3d6000fd5b505050506000611a6c7f00000000000000000000000000000000000000000000000000000000000000006124ac565b9050801561128d57611abf7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083612988565b6000611ac9611290565b111561128d5761128d611caf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b3257600080fd5b505af1158015611b46573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d6020811015611be357600080fd5b50519050801561128d57604080516301e9a69560e41b81523060048201526024810183905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631e9a695091604480830192600092919082900301818387803b158015611c5b57600080fd5b505af1158015611c6f573d6000803e3d6000fd5b50505050611c7b611290565b905061128d7f0000000000000000000000000000000000000000000000000000000000000000611ca961196d565b83612acb565b6000611cb9611290565b90508015611d4857604080516340c10f1960e01b81523060048201526024810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f1991604480830192600092919082900301818387803b158015611d2f57600080fd5b505af1158015611d43573d6000803e3d6000fd5b505050505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611db757600080fd5b505afa158015611dcb573d6000803e3d6000fd5b505050506040513d6020811015611de157600080fd5b505190508015611e6a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a694fc3a826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611e5157600080fd5b505af1158015611e65573d6000803e3d6000fd5b505050505b5050565b6060611ec3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661169f9092919063ffffffff16565b805190915015610cb857808060200190516020811015611ee257600080fd5b5051610cb85760405162461bcd60e51b815260040180806020018281038252602a815260200180612cf6602a913960400191505060405180910390fd5b606082471015611f605760405162461bcd60e51b8152600401808060200182810382526026815260200180612caf6026913960400191505060405180910390fd5b611f6985612c42565b611fba576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611ff95780518252601f199092019160209182019101611fda565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461205b576040519150601f19603f3d011682016040523d82523d6000602084013e612060565b606091505b5091509150612070828286612c48565b979650505050505050565b600081836121075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120cc5781810151838201526020016120b4565b50505050905090810190601f1680156120f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161211357fe5b0495945050505050565b6000818484111561216f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156120cc5781810151838201526020016120b4565b505050900390565b6122117f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d60208110156121fd57600080fd5b505161043483670de0b6b3a76400006116b8565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561228257600080fd5b505afa158015612296573d6000803e3d6000fd5b505050506040513d60208110156122ac57600080fd5b505160408051632e1a7d4d60e01b81526004810185905290519192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d9160248082019260009290919082900301818387803b15801561231a57600080fd5b505af115801561232e573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d60208110156123cb57600080fd5b505190506123d98183611808565b92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631e9a695030856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561245257600080fd5b505af1158015612466573d6000803e3d6000fd5b50505050612472611290565b92508215610cb857610cb87f00000000000000000000000000000000000000000000000000000000000000006124a661196d565b85612acb565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124fc57600080fd5b505afa158015612510573d6000803e3d6000fd5b505050506040513d602081101561252657600080fd5b50519050612555837f000000000000000000000000000000000000000000000000000000000000000083612988565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156125bb57600080fd5b505afa1580156125cf573d6000803e3d6000fd5b505050506040513d60208110156125e557600080fd5b505191508115612982576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b15801561264857600080fd5b505afa15801561265c573d6000803e3d6000fd5b505050506040513d60e081101561267257600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a50909850965094509092509050600085158015906126bf57506001600160a01b03871615155b1561278f576126d46127106104348c896116b8565b90506127017f00000000000000000000000000000000000000000000000000000000000000008983612988565b61278f87896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275257600080fd5b505afa158015612766573d6000803e3d6000fd5b505050506040513d602081101561277c57600080fd5b50516001600160a01b038b1691906117b6565b6000841180156127a757506001600160a01b03851615155b1561283a576127bc6127106104348c876116b8565b90506127e97f00000000000000000000000000000000000000000000000000000000000000008983612988565b61283a85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275257600080fd5b60008211801561285257506001600160a01b03831615155b156128e5576128676127106104348c856116b8565b90506128947f00000000000000000000000000000000000000000000000000000000000000008983612988565b6128e583896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275257600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b505050506040513d602081101561297557600080fd5b5051995050505050505050505b50919050565b604080516002808252606080830184529260208301908036833701905050905083816000815181106129b657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106129e457fe5b6001600160a01b039283166020918202929092010152600254166338ed17398360018430612a144261070861175c565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612a84578181015183820152602001612a6c565b505050509050019650505050505050600060405180830381600087803b158015612aad57600080fd5b505af1158015612ac1573d6000803e3d6000fd5b5050505050505050565b60035460408051630db3e24f60e21b81526001600160a01b038681166004830152858116602483015260448201859052915160009392909216916336cf893c91606480820192602092909190829003018186803b158015612b2b57600080fd5b505afa158015612b3f573d6000803e3d6000fd5b505050506040513d6020811015612b5557600080fd5b505111612b99576040805162461bcd60e51b815260206004820152600d60248201526c21636f6e766572745f7261746560981b604482015290519081900360640190fd5b600354612bb3906001600160a01b038581169116836117b6565b6003546040805163248391ff60e01b81526001600160a01b0386811660048301528581166024830152604482018590529151919092169163248391ff9160648083019260209291908290030181600087803b158015612c1157600080fd5b505af1158015612c25573d6000803e3d6000fd5b505050506040513d6020811015612c3b57600080fd5b5050505050565b3b151590565b60608315612c575750816116b1565b825115612c675782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156120cc5781810151838201526020016120b456fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220877fae21ab6d8316c9c6dec753b07872b92cb3060b02a5b58b7a0f1890ce100064736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80638a4adf24116100c3578063d0e30db01161007c578063d0e30db014610279578063d9d7858a14610281578063dd0081c714610289578063ef9e237914610291578063f77c4791146102c7578063f887ea40146102cf5761014d565b80638a4adf241461020d5780638aa4f0341461021557806392eefe9b1461021d578063bd38837b14610243578063c0d786551461024b578063c1a3d44c146102715761014d565b80632e1a7d4d116101155780632e1a7d4d146101aa5780633fc8cef3146101c75780634641257d146101cf57806351cff8d9146101d7578063722713f7146101fd578063853828b6146102055761014d565b806305a91f7b14610152578063115880861461017657806316f0115b146101905780631dd19cb4146101985780631f1fcd51146101a2575b600080fd5b61015a6102d7565b604080516001600160a01b039092168252519081900360200190f35b61017e6102fb565b60408051918252519081900360200190f35b61015a610445565b6101a0610469565b005b61015a610619565b6101a0600480360360208110156101c057600080fd5b503561063d565b61015a6108be565b6101a06108e2565b6101a0600480360360208110156101ed57600080fd5b50356001600160a01b0316610a4f565b61017e610cbd565b61017e610cd2565b61015a610fa1565b61017e610fb0565b6101a06004803603602081101561023357600080fd5b50356001600160a01b0316611050565b61015a611136565b6101a06004803603602081101561026157600080fd5b50356001600160a01b0316611145565b61017e611290565b6101a06112ff565b61015a61146c565b61017e611490565b6101a0600480360360608110156102a757600080fd5b506001600160a01b03813581169160208101359091169060400135611496565b61015a61156e565b61015a61157d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610440610308610fb0565b61043a670de0b6b3a76400006104347f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d602081101561039a57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d602081101561042c57600080fd5b5051906116b8565b9061171a565b9061175c565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806105035750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cb57600080fd5b505afa1580156104df573d6000803e3d6000fd5b505050506040513d60208110156104f557600080fd5b50516001600160a01b031633145b8061058f5750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561055757600080fd5b505afa15801561056b573d6000803e3d6000fd5b505050506040513d602081101561058157600080fd5b50516001600160a01b031633145b6105ce576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b600054610617906001600160a01b03166105e6611290565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906117b6565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314806106d75750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516001600160a01b031633145b806107635750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d602081101561075557600080fd5b50516001600160a01b031633145b6107a2576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b60006107ac611290565b9050818110156107d7576107c86107c38383611808565b61184a565b91506107d4828261175c565b91505b60006107e161196d565b6000805460408051632988bb9f60e21b81526001600160a01b0380861660048301529151949550929391169163a622ee7c916024808301926020929190829003018186803b15801561083257600080fd5b505afa158015610846573d6000803e3d6000fd5b505050506040513d602081101561085c57600080fd5b505190506001600160a01b0381166108a4576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b6108b86001600160a01b03831682866117b6565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633148061097c5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561094457600080fd5b505afa158015610958573d6000803e3d6000fd5b505050506040513d602081101561096e57600080fd5b50516001600160a01b031633145b80610a085750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d057600080fd5b505afa1580156109e4573d6000803e3d6000fd5b505050506040513d60208110156109fa57600080fd5b50516001600160a01b031633145b610a47576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b6106176119ce565b6000546001600160a01b0316331480610ae95750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab157600080fd5b505afa158015610ac5573d6000803e3d6000fd5b505050506040513d6020811015610adb57600080fd5b50516001600160a01b031633145b80610b755750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3d57600080fd5b505afa158015610b51573d6000803e3d6000fd5b505050506040513d6020811015610b6757600080fd5b50516001600160a01b031633145b610bb4576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610c24576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d6020811015610c9957600080fd5b5051600054909150610cb8906001600160a01b038481169116836117b6565b505050565b6000610440610cca6102fb565b61043a611290565b600080546001600160a01b0316331480610d6d5750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3557600080fd5b505afa158015610d49573d6000803e3d6000fd5b505050506040513d6020811015610d5f57600080fd5b50516001600160a01b031633145b80610df95750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc157600080fd5b505afa158015610dd5573d6000803e3d6000fd5b505050506040513d6020811015610deb57600080fd5b50516001600160a01b031633145b610e38576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610e40611ad7565b6000610e4a61196d565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d6020811015610ec357600080fd5b50516000805460408051632988bb9f60e21b81526001600160a01b0386811660048301529151949650929391169163a622ee7c916024808301926020929190829003018186803b158015610f1657600080fd5b505afa158015610f2a573d6000803e3d6000fd5b505050506040513d6020811015610f4057600080fd5b505190506001600160a01b038116610f88576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b610f9c6001600160a01b03831682856117b6565b505090565b6001546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633aecd0e3306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561101f57600080fd5b505afa158015611033573d6000803e3d6000fd5b505050506040513d602081101561104957600080fd5b5051905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d60208110156110c857600080fd5b50516001600160a01b03163314611114576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561119357600080fd5b505afa1580156111a7573d6000803e3d6000fd5b505050506040513d60208110156111bd57600080fd5b50516001600160a01b03163314611209576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0383811691909117909155611257907f00000000000000000000000000000000000000000000000000000000000000001682600061158c565b61128d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168260001961158c565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561101f57600080fd5b6000546001600160a01b03163314806113995750600160009054906101000a90046001600160a01b03166001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b15801561136157600080fd5b505afa158015611375573d6000803e3d6000fd5b505050506040513d602081101561138b57600080fd5b50516001600160a01b031633145b806114255750600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b50516001600160a01b031633145b611464576040805162461bcd60e51b815260206004820152600b60248201526a08585d5d1a1bdc9a5e995960aa1b604482015290519081900360640190fd5b610617611caf565b7f000000000000000000000000000000000000000000000000000000000000000081565b61271081565b600160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d602081101561150e57600080fd5b50516001600160a01b0316331461155a576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b610cb86001600160a01b038416838361158c565b6000546001600160a01b031681565b6002546001600160a01b031681565b801580611612575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d602081101561160e57600080fd5b5051155b61164d5760405162461bcd60e51b8152600401808060200182810382526036815260200180612d206036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610cb8908490611e6e565b60606116ae8484600085611f1f565b90505b9392505050565b6000826116c757506000611714565b828202828482816116d457fe5b04146117115760405162461bcd60e51b8152600401808060200182810382526021815260200180612cd56021913960400191505060405180910390fd5b90505b92915050565b600061171183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061207b565b600082820183811015611711576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cb8908490611e6e565b600061171183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061211d565b60008061185561196d565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d60208110156118d057600080fd5b505190506118dd84612177565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d602081101561195657600080fd5b505190506119648183611808565b95945050505050565b60008054604080516364f5005760e01b815230600482015290516001600160a01b03909216916364f500579160248082019260209290919082900301818787803b1580156119ba57600080fd5b505af1158015611033573d6000803e3d6000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a2957600080fd5b505af1158015611a3d573d6000803e3d6000fd5b505050506000611a6c7f00000000000000000000000000000000000000000000000000000000000000006124ac565b9050801561128d57611abf7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083612988565b6000611ac9611290565b111561128d5761128d611caf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b3257600080fd5b505af1158015611b46573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d6020811015611be357600080fd5b50519050801561128d57604080516301e9a69560e41b81523060048201526024810183905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631e9a695091604480830192600092919082900301818387803b158015611c5b57600080fd5b505af1158015611c6f573d6000803e3d6000fd5b50505050611c7b611290565b905061128d7f0000000000000000000000000000000000000000000000000000000000000000611ca961196d565b83612acb565b6000611cb9611290565b90508015611d4857604080516340c10f1960e01b81523060048201526024810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f1991604480830192600092919082900301818387803b158015611d2f57600080fd5b505af1158015611d43573d6000803e3d6000fd5b505050505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611db757600080fd5b505afa158015611dcb573d6000803e3d6000fd5b505050506040513d6020811015611de157600080fd5b505190508015611e6a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a694fc3a826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611e5157600080fd5b505af1158015611e65573d6000803e3d6000fd5b505050505b5050565b6060611ec3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661169f9092919063ffffffff16565b805190915015610cb857808060200190516020811015611ee257600080fd5b5051610cb85760405162461bcd60e51b815260040180806020018281038252602a815260200180612cf6602a913960400191505060405180910390fd5b606082471015611f605760405162461bcd60e51b8152600401808060200182810382526026815260200180612caf6026913960400191505060405180910390fd5b611f6985612c42565b611fba576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611ff95780518252601f199092019160209182019101611fda565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461205b576040519150601f19603f3d011682016040523d82523d6000602084013e612060565b606091505b5091509150612070828286612c48565b979650505050505050565b600081836121075760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120cc5781810151838201526020016120b4565b50505050905090810190601f1680156120f95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161211357fe5b0495945050505050565b6000818484111561216f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156120cc5781810151838201526020016120b4565b505050900390565b6122117f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d60208110156121fd57600080fd5b505161043483670de0b6b3a76400006116b8565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561228257600080fd5b505afa158015612296573d6000803e3d6000fd5b505050506040513d60208110156122ac57600080fd5b505160408051632e1a7d4d60e01b81526004810185905290519192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d9160248082019260009290919082900301818387803b15801561231a57600080fd5b505af115801561232e573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d60208110156123cb57600080fd5b505190506123d98183611808565b92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631e9a695030856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561245257600080fd5b505af1158015612466573d6000803e3d6000fd5b50505050612472611290565b92508215610cb857610cb87f00000000000000000000000000000000000000000000000000000000000000006124a661196d565b85612acb565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124fc57600080fd5b505afa158015612510573d6000803e3d6000fd5b505050506040513d602081101561252657600080fd5b50519050612555837f000000000000000000000000000000000000000000000000000000000000000083612988565b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156125bb57600080fd5b505afa1580156125cf573d6000803e3d6000fd5b505050506040513d60208110156125e557600080fd5b505191508115612982576000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663da633d316040518163ffffffff1660e01b815260040160e06040518083038186803b15801561264857600080fd5b505afa15801561265c573d6000803e3d6000fd5b505050506040513d60e081101561267257600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151949c50929a50909850965094509092509050600085158015906126bf57506001600160a01b03871615155b1561278f576126d46127106104348c896116b8565b90506127017f00000000000000000000000000000000000000000000000000000000000000008983612988565b61278f87896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275257600080fd5b505afa158015612766573d6000803e3d6000fd5b505050506040513d602081101561277c57600080fd5b50516001600160a01b038b1691906117b6565b6000841180156127a757506001600160a01b03851615155b1561283a576127bc6127106104348c876116b8565b90506127e97f00000000000000000000000000000000000000000000000000000000000000008983612988565b61283a85896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275257600080fd5b60008211801561285257506001600160a01b03831615155b156128e5576128676127106104348c856116b8565b90506128947f00000000000000000000000000000000000000000000000000000000000000008983612988565b6128e583896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275257600080fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561294b57600080fd5b505afa15801561295f573d6000803e3d6000fd5b505050506040513d602081101561297557600080fd5b5051995050505050505050505b50919050565b604080516002808252606080830184529260208301908036833701905050905083816000815181106129b657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106129e457fe5b6001600160a01b039283166020918202929092010152600254166338ed17398360018430612a144261070861175c565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612a84578181015183820152602001612a6c565b505050509050019650505050505050600060405180830381600087803b158015612aad57600080fd5b505af1158015612ac1573d6000803e3d6000fd5b5050505050505050565b60035460408051630db3e24f60e21b81526001600160a01b038681166004830152858116602483015260448201859052915160009392909216916336cf893c91606480820192602092909190829003018186803b158015612b2b57600080fd5b505afa158015612b3f573d6000803e3d6000fd5b505050506040513d6020811015612b5557600080fd5b505111612b99576040805162461bcd60e51b815260206004820152600d60248201526c21636f6e766572745f7261746560981b604482015290519081900360640190fd5b600354612bb3906001600160a01b038581169116836117b6565b6003546040805163248391ff60e01b81526001600160a01b0386811660048301528581166024830152604482018590529151919092169163248391ff9160648083019260209291908290030181600087803b158015612c1157600080fd5b505af1158015612c25573d6000803e3d6000fd5b505050506040513d6020811015612c3b57600080fd5b5050505050565b3b151590565b60608315612c575750816116b1565b825115612c675782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156120cc5781810151838201526020016120b456fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220877fae21ab6d8316c9c6dec753b07872b92cb3060b02a5b58b7a0f1890ce100064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "setController(address)": {
        "params": {
          "_controller": "The address of the controller"
        }
      },
      "setRouter(address)": {
        "params": {
          "_router": "The address of the router"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest()": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setController(address)": {
        "notice": "Sets the address of the controller"
      },
      "setRouter(address)": {
        "notice": "Sets the address of the ISwap-compatible router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6798,
        "contract": "contracts/metavault/strategies/StrategyDforce.sol:StrategyDforce",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6800,
        "contract": "contracts/metavault/strategies/StrategyDforce.sol:StrategyDforce",
        "label": "vaultManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVaultManager)2082"
      },
      {
        "astId": 6802,
        "contract": "contracts/metavault/strategies/StrategyDforce.sol:StrategyDforce",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwap)1983"
      },
      {
        "astId": 8075,
        "contract": "contracts/metavault/strategies/StrategyDforce.sol:StrategyDforce",
        "label": "converter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IConverter)1737"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IConverter)1737": {
        "encoding": "inplace",
        "label": "contract IConverter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)1983": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultManager)2082": {
        "encoding": "inplace",
        "label": "contract IVaultManager",
        "numberOfBytes": "20"
      }
    }
  }
}